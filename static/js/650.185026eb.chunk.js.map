{"version":3,"file":"static/js/650.185026eb.chunk.js","mappings":"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","sources":["Data/Characters/Albedo/assets.tsx","Data/Characters/Albedo/index.tsx","Data/Characters/Aloy/assets.tsx","Data/Characters/Aloy/index.tsx","Data/Characters/Amber/assets.tsx","Data/Characters/Amber/index.tsx","Data/Characters/AratakiItto/assets.tsx","Data/Characters/AratakiItto/index.tsx","Data/Characters/Barbara/assets.tsx","Data/Characters/Barbara/index.tsx","Data/Characters/Beidou/assets.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/assets.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Chongyun/assets.tsx","Data/Characters/Chongyun/index.tsx","Data/Characters/Collei/assets.tsx","Data/Characters/Collei/index.tsx","Data/Characters/Diluc/assets.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/assets.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Dori/assets.tsx","Data/Characters/Dori/index.tsx","Data/Characters/Eula/assets.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/assets.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/assets.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/Gorou/assets.tsx","Data/Characters/Gorou/index.tsx","Data/Characters/HuTao/assets.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/assets.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/assets.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Kaeya/assets.tsx","Data/Characters/Kaeya/index.tsx","Data/Characters/KamisatoAyaka/assets.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/KamisatoAyato/assets.tsx","Data/Characters/KamisatoAyato/index.tsx","Data/Characters/Keqing/assets.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/Klee/assets.tsx","Data/Characters/Klee/index.tsx","Data/Characters/KujouSara/assets.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/KukiShinobu/assets.ts","Data/Characters/KukiShinobu/index.tsx","Data/Characters/Lisa/assets.tsx","Data/Characters/Lisa/index.tsx","Data/Characters/Mona/assets.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/assets.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/assets.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/Qiqi/assets.tsx","Data/Characters/Qiqi/index.tsx","Data/Characters/RaidenShogun/assets.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Razor/assets.tsx","Data/Characters/Razor/index.tsx","Data/Characters/Rosaria/assets.ts","Data/Characters/Rosaria/index.tsx","Data/Characters/SangonomiyaKokomi/assets.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Sayu/assets.tsx","Data/Characters/Sayu/index.tsx","Data/Characters/Shenhe/assets.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/ShikanoinHeizou/assets.tsx","Data/Characters/ShikanoinHeizou/index.tsx","Data/Characters/Sucrose/assets.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Tartaglia/assets.tsx","Data/Characters/Tartaglia/index.tsx","Data/Characters/Thoma/assets.tsx","Data/Characters/Thoma/index.tsx","Data/Characters/Tighnari/assets.tsx","Data/Characters/Tighnari/index.tsx","Data/Characters/Traveler/anemo/assets.tsx","Data/Characters/Traveler/anemo/index.tsx","Data/Characters/Traveler/dendro/assets.tsx","Data/Characters/Traveler/dendro/index.tsx","Data/Characters/Traveler/electro/assets.tsx","Data/Characters/Traveler/electro/index.tsx","Data/Characters/Traveler/geo/assets.tsx","Data/Characters/Traveler/geo/index.tsx","Data/Characters/Traveler/index.tsx","Data/Characters/Venti/assets.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/assets.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/assets.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/assets.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/Xinyan/assets.tsx","Data/Characters/Xinyan/index.tsx","Data/Characters/YaeMiko/assets.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yanfei/assets.tsx","Data/Characters/Yanfei/index.tsx","Data/Characters/Yelan/assets.tsx","Data/Characters/Yelan/index.tsx","Data/Characters/Yoimiya/assets.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/assets.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/assets.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts"],"sourcesContent":["import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Albedo_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Albedo\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    blossomDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    blossomCd: 2,\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    blossomDmg: skillParam_gen.burst[b++],\r\n    blossomAmt: 7,\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    blossomDmgInc: 0.25,\r\n    hpThresh: 50,\r\n  },\r\n  passive2: {\r\n    eleMasInc: skillParam_gen.passive2[0][0],\r\n    duration: skillParam_gen.passive2[1][0]\r\n  },\r\n  constellation1: {\r\n    blossomEner: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    blossomDmgInc: 0.30,\r\n    maxStacks: 4,\r\n    stackDuration: 30\r\n  },\r\n  constellation4: {\r\n    plunging_dmg_: 0.3,\r\n  },\r\n  constellation6: {\r\n    bonus_dmg_: 0.17\r\n  }\r\n} as const\r\n\r\nconst [condBurstBlossomPath, condBurstBlossom] = cond(key, \"burstBlossom\")\r\nconst [condBurstUsedPath, condBurstUsed] = cond(key, \"burstUsed\")\r\nconst p2Burst_eleMas = equal(condBurstUsed, \"burstUsed\", greaterEq(input.asc, 4, datamine.passive2.eleMasInc))\r\n\r\nconst [condP1EnemyHpPath, condP1EnemyHp] = cond(key, \"p1EnemyHp\")\r\nconst p1_blossom_dmg_ = equal(condP1EnemyHp, \"belowHp\", greaterEq(input.asc, 1, datamine.passive1.blossomDmgInc))\r\n\r\nconst [condC2StacksPath, condC2Stacks] = cond(key, \"c2Stacks\")\r\nconst c2_burst_dmgInc = greaterEq(input.constellation, 2,\r\n  prod(\r\n    lookup(\r\n      condC2Stacks,\r\n      Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i =>\r\n        [i,\r\n          prod(i, datamine.constellation2.blossomDmgInc)]\r\n      )\r\n      ),\r\n      naught\r\n    ),\r\n    input.total.def\r\n  )\r\n)\r\n\r\nconst [condSkillInFieldPath, condSkillInField] = cond(key, \"skillInField\")\r\nconst c4_plunging_dmg_disp = greaterEq(input.constellation, 4,\r\n  equal(condSkillInField, \"skillInField\", datamine.constellation4.plunging_dmg_)\r\n)\r\nconst c4_plunging_dmg_ = equal(input.activeCharKey, target.charKey, c4_plunging_dmg_disp)\r\n\r\n// Maybe we should just have a single conditional for \"in field AND crystallize shield\"?\r\n// This is technically a nested conditional\r\nconst [condC6CrystallizePath, condC6Crystallize] = cond(key, \"c6Crystallize\")\r\nconst c6_Crystal_all_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condSkillInField, \"skillInField\",\r\n    equal(condC6Crystallize, \"c6Crystallize\", datamine.constellation6.bonus_dmg_)\r\n  )\r\n)\r\nconst c6_Crystal_all_dmg_ = equal(input.activeCharKey, target.charKey, c6_Crystal_all_dmg_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n    blossom: dmgNode(\"def\", datamine.skill.blossomDmg, \"skill\", { total: { skill_dmg_: p1_blossom_dmg_ } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    blossom: equal(\"isoOnField\", condBurstBlossom, dmgNode(\"atk\", datamine.burst.blossomDmg, \"burst\")),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: p2Burst_eleMas,\r\n      plunging_dmg_: c4_plunging_dmg_,\r\n      all_dmg_: c6_Crystal_all_dmg_,\r\n    }\r\n  },\r\n  premod: {\r\n    burst_dmgInc: c2_burst_dmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.blossom, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: trm(\"blossomCD\"),\r\n          value: datamine.skill.blossomCd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1EnemyHp,\r\n        path: condP1EnemyHpPath,\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.passive1.hpThresh }),\r\n        states: {\r\n          belowHp: {\r\n            fields: [{\r\n              node: infoMut(p1_blossom_dmg_, { key: `char_${key}:blossomDmg_` })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"enerPerBlossom\"),\r\n          value: datamine.constellation1.blossomEner,\r\n          fixed: 1,\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condSkillInField,\r\n        path: condSkillInFieldPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          skillInField: {\r\n            fields: [{\r\n              node: infoMut(c4_plunging_dmg_disp, { key: \"plunging_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Crystallize,\r\n        path: condC6CrystallizePath,\r\n        name: st(\"protectedByShieldCrystal\"),\r\n        canShow: equal(condSkillInField, \"skillInField\", 1),\r\n        teamBuff: true,\r\n        states: {\r\n          c6Crystallize: {\r\n            fields: [{\r\n              node: infoMut(c6_Crystal_all_dmg_disp, { key: \"all_dmg_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurstBlossom,\r\n        path: condBurstBlossomPath,\r\n        name: trm(\"isotomaOnField\"),\r\n        states: {\r\n          isoOnField: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.blossom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n              textSuffix: st(\"brHits\", { count: datamine.burst.blossomAmt })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condBurstUsed,\r\n        path: condBurstUsedPath,\r\n        name: st(\"afterUse.burst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          burstUsed: {\r\n            fields: [{\r\n              node: p2Burst_eleMas\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2Stacks,\r\n        path: condC2StacksPath,\r\n        name: trm(\"c2Stacks\"),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: c2_burst_dmgInc\r\n            }]\r\n          }]\r\n        ))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Aloy_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { compareEq, constant, equal, greaterEq, infoMut, lookup, naught, percent, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Aloy\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1.1\r\n      skillParam_gen.auto[a++], // 1.2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    freezeBombDmg: skillParam_gen.skill[s++],\r\n    chillWaterBomblets: skillParam_gen.skill[s++],\r\n    atkDecrease: skillParam_gen.skill[s++],\r\n    atkDecreaseDuration: skillParam_gen.skill[s++][0],\r\n    coilNormalDmgBonus1: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus2: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus3: skillParam_gen.skill[s++],\r\n    rushingNormalDmgBonus: skillParam_gen.skill[s++],\r\n    rushingDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atkInc: 0.16,\r\n    teamAtkInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condCoilPath, condCoil] = cond(key, \"coil\")\r\nconst normal_dmg_ = lookup(condCoil, {\r\n  \"coil1\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus1, { key: \"_\" }),\r\n  \"coil2\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus2, { key: \"_\" }),\r\n  \"coil3\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus3, { key: \"_\" }),\r\n  \"rush\": subscript(input.total.skillIndex, datamine.skill.rushingNormalDmgBonus, { key: \"_\" })\r\n}, naught)\r\nconst atk_ = greaterEq(input.asc, 1, unequal(condCoil, undefined, percent(datamine.passive1.atkInc)))\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst teamAtk_ = greaterEq(input.asc, 1, equal(condA1, \"on\",\r\n  unequal(input.activeCharKey, key, percent(datamine.passive1.teamAtkInc))))\r\n\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst cryo_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4, Object.fromEntries(range(1, 10).map(i => [i, percent(datamine.passive2.cryoDmgBonus * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\", {\r\n      hit: {\r\n        ele: compareEq(\"rush\", condCoil, elementKey, \"physical\")\r\n      }\r\n    })])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    freezeBombDmg: dmgNode(\"atk\", datamine.skill.freezeBombDmg, \"skill\"),\r\n    chillWaterBomblets: dmgNode(\"atk\", datamine.skill.chillWaterBomblets, \"skill\"),\r\n    atkDecrease: subscript(input.total.skillIndex, datamine.skill.atkDecrease)\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  premod: {\r\n    normal_dmg_,\r\n    atk_,\r\n    cryo_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: teamAtk_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i === 0 ? 0 : -1)}` }),\r\n          textSuffix: i === 0 ? \"(1)\" : i === 1 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.freezeBombDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.chillWaterBomblets, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.atkDecrease, { key: `char_${key}_gen:skill.skillParams.2_` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.atkDecreaseDuration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.7\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condCoil,\r\n        path: condCoilPath,\r\n        name: trm(\"skill.coil\"),\r\n        states: {\r\n          \"coil1\": {\r\n            name: trm(\"skill.coil1\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil2\": {\r\n            name: trm(\"skill.coil2\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil3\": {\r\n            name: trm(\"skill.coil3\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"rush\": {\r\n            name: trm(\"skill.rush\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }, {\r\n              text: trm(\"normCryoInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.6\"),\r\n              value: datamine.skill.rushingDuration,\r\n              unit: \"s\"\r\n            }]\r\n          },\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        teamBuff: true,\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: infoMut(teamAtk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: equal(\"rush\", condCoil, 1),\r\n        name: trm(\"skill.rushState\"),\r\n        states: Object.fromEntries(range(1, 10).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{ node: cryo_dmg_ }]\r\n        }]))\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\"),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\"),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Amber_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Amber\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    unknown: skillParam_gen.skill[s++], // what is this??\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerWave: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    rainDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    aoeInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    atkInc: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    secArrowDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    manualDetionationDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    moveSpdInc: skillParam_gen.constellation6[0],\r\n    atkInc: skillParam_gen.constellation6[1],\r\n    duration: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst burst_critRate_ = greaterEq(input.asc, 1, percent(datamine.passive1.critRateInc))\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst atk_ = equal(\"on\", condA4, percent(datamine.passive2.atkInc))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst moveSPD_ = equal(\"on\", condC6, percent(datamine.constellation6.moveSpdInc))\r\nconst teamAtk_ = equal(\"on\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('pyro') } }),\r\n    secondAimed: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.secArrowDmg), dmgNode(\"atk\", datamine.charged.aimed, \"charged\"))),\r\n    secondAimedCharged: greaterEq(input.constellation, 1, prod(dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\",\r\n      { hit: { ele: constant('pyro') } }), percent(datamine.constellation1.secArrowDmg))),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    rainDmg: dmgNode(\"atk\", datamine.burst.rainDmg, \"burst\"),\r\n    dmgPerWave: dmgNode(\"atk\", datamine.burst.dmgPerWave, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    manualDetonationDmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { premod: { skill_dmg_: percent(datamine.constellation2.manualDetionationDmg) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    atk_,\r\n    burst_critRate_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      moveSPD_,\r\n      atk_: teamAtk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        },],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"heal\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation2.manualDetonationDmg, { key: `char_${key}:manualDetonationDmg` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: (data) => data.get(input.constellation).value >= 4 ? datamine.skill.cd - datamine.skill.cd * 0.2 : datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          text: st(\"charges\"),\r\n          value: 2,\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmgPerWave, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.rainDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6CondName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: teamAtk_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          text: trm(\"critRateBonus\"),\r\n          value: datamine.passive1.critRateInc * 100,\r\n          unit: \"%\"\r\n        }, {\r\n          text: trm(\"aoeRangeBonus\"),\r\n          value: datamine.passive1.aoeInc * 100,\r\n          unit: \"%\"\r\n        }, {\r\n          node: burst_critRate_\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"a4CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Arataki_Itto_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, min, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\n\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    initialStacks: skillParam_gen.constellation1[0],\r\n    timedStacks: skillParam_gen.constellation1[1]\r\n  },\r\n  constellation2: {\r\n    burstCdRed: skillParam_gen.constellation2[0],\r\n    energyRegen: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC2BurstRed = prod(min(tally.geo, 3), datamine.constellation2.burstCdRed)\r\nconst nodeC2EnergyRegen = prod(min(tally.geo, 3), datamine.constellation2.energyRegen)\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.ss.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.stam,\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1.name\"),\r\n        value: condP1,\r\n        path: condP1Path,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeP1AtkSpd\r\n            }]\r\n          }]\r\n        ))\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` })\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: nodeC6CritDMG\r\n        }]\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"heal\" }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              node: nodeBurstAtkSpd,\r\n            },\r\n            ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n            {\r\n              node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"c1.initialGain\"),\r\n          value: datamine.constellation1.initialStacks\r\n        }, {\r\n          text: trm(\"c1.timedGain\"),\r\n          value: datamine.constellation1.timedStacks\r\n        }],\r\n        canShow: equal(condBurst, \"on\", 1),\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: st(\"burstCDRed\"),\r\n          value: data => data.get(nodeC2BurstRed).value,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }, {\r\n          text: st(\"energyRegen\"),\r\n          value: data => data.get(nodeC2EnergyRegen).value,\r\n        }],\r\n        canShow: equal(condBurst, \"on\", 1)\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        name: trm(\"c4.name\"),\r\n        teamBuff: true,\r\n        value: condC4,\r\n        path: condC4Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4Atk\r\n            }, {\r\n              node: nodeC4Def\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [{ fields: [{ node: nodeC6CritDMG }] }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Barbara_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Barbara\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    cregen_hp_: skillParam_gen.skill[s++],\r\n    cregen_hp: skillParam_gen.skill[s++],\r\n    regen_hp_: skillParam_gen.skill[s++],\r\n    regen_hp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    hp_: skillParam_gen.burst[b++],\r\n    hp: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stam: -skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    ext: skillParam_gen.passive2[0][0],\r\n    maxExt: skillParam_gen.passive2[0][1],\r\n  },\r\n  constellation2: {\r\n    cdDec: 0.15,\r\n    hydro_dmg_: 0.15\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodeA1 = greaterEq(input.asc, 1, equal(condSkill, \"on\", equal(input.activeCharKey, target.charKey, datamine.passive1.stam)))\r\nconst nodeA1Display = greaterEq(input.asc, 1, equal(condSkill, \"on\", datamine.passive1.stam))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(condC2, \"on\", equal(input.activeCharKey, target.charKey, datamine.constellation2.hydro_dmg_)))\r\nconst nodeC2Display = greaterEq(input.constellation, 2, equal(condC2, \"on\", datamine.constellation2.hydro_dmg_))\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    regen: healNodeTalent(\"hp\", datamine.skill.regen_hp_, datamine.skill.regen_hp, \"skill\"),\r\n    cregen: healNodeTalent(\"hp\", datamine.skill.cregen_hp_, datamine.skill.cregen_hp, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: healNodeTalent(\"hp\", datamine.burst.hp_, datamine.burst.hp, \"burst\"),\r\n  }\r\n}\r\n\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1,\r\n      hydro_dmg_: nodeC2,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.regen, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.cregen, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: data => data.get(input.constellation).value >= 2 ? `${datamine.skill.cd}s - ${datamine.constellation2.cdDec * 100}%` : `${datamine.skill.cd}s`,\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"passive1.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA1Display, { key: \"staminaDec_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        teamBuff: true,\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"constellation2.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC2Display, { key: \"hydro_dmg_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Beidou_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Beidou\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    dmgBase: skillParam_gen.skill[s++],\r\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    lightningDmg: skillParam_gen.burst[b++],\r\n    damageReduction: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  //pasive 1: 2, //additional targets for lightning arc\r\n  ascension4: {\r\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\r\n    chargeDmg_: skillParam_gen.passive2[0][0],\r\n    attackSpeed: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    shieldHp_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\n//Toggable stuff:\r\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\r\n// C6: During the duration of <b>Stormbreaker</b>\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\r\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\r\n\r\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\r\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\r\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\r\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    electroShield: shieldElement(\"electro\", shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"),\r\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\r\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\r\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\r\n  },\r\n  burst: {\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0))),\r\n    shield: greaterEq(input.constellation, 1, shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)),\r\n  },\r\n  constellation4: {\r\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, customBonus: {\r\n    normal_dmg_: nodeSkillNormalDmg_,\r\n    charged_dmg_: nodeSkillChargeDmg_,\r\n    atkSPD_: nodeSkillAttackSpeed_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: nodeBurstElectroResRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: false,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"tidecallerMaxDmg\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkillNormalDmg_,\r\n            }, {\r\n              node: nodeSkillChargeDmg_,\r\n            }, {\r\n              node: nodeSkillAttackSpeed_,\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"a4charge\"),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.energyCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"duringBurst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeBurstElectroResRed_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation1.shield, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Bennett_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 0.2, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 0.5, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst a1SkillCd = greaterEq(input.asc, 1, datamine.passive1.cd_red)\r\n\r\nconst burstAtkRatio = subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" })\r\nconst burstAddlAtk = prod(burstAtkRatio, input.base.atk)\r\nconst c1AtkRatio = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_` })\r\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1AtkRatio, input.base.atk))\r\nconst atkIncRatio = sum(burstAtkRatio, c1AtkRatio)\r\nconst activeInAreaAtkDisp = prod(atkIncRatio, input.base.atk)\r\n\r\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\r\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\r\nconst activeInAreaAtk = equal(activeInArea, 1, activeInAreaAtkDisp)\r\n\r\nconst activeInAreaA4 = greaterEq(input.asc, 4,\r\n  equal(activeInArea, 1, datamine.passive2.cd_red)\r\n)\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1,\r\n  greaterEq(input.constellation, 6, datamine.constellation6.pyro_dmg)\r\n)\r\nconst activeInAreaC6Infusion = equalStr(c6AndCorrectWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: activeInAreaAtk,\r\n  },\r\n  constellation4: {\r\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: activeInAreaC6PyroDmg,\r\n    },\r\n    total: {\r\n      // Not 100% sure if this should be in premod or total\r\n      atk: activeInAreaAtk,\r\n    },\r\n    infusion: {\r\n      team: activeInAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          // Press\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n        }, {\r\n          text: sgt(\"press.cd\"),\r\n          unit: \"s\",\r\n          value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n        }, {\r\n          // Lvl 1\r\n          node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n        }, {\r\n          text: trm(\"skill.lvl1CD\"),\r\n          unit: \"s\",\r\n          value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n        }, {\r\n          // Lvl 2\r\n          node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n        }, {\r\n          text: trm(\"skill.lvl2CD\"),\r\n          unit: \"s\",\r\n          value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n        }]\r\n      }, ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(a1SkillCd, { key: \"skillCDRed_\" })\r\n        }],\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: data => data.get(burstAtkRatio).value * 100,\r\n              unit: \"%\",\r\n              fixed: 1\r\n            }, {\r\n              node: infoMut(burstAddlAtk, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(activeInAreaA4, { key: \"skillCDRed_\" })\r\n        }],\r\n        canShow: equal(condInArea, \"activeInArea\", 1),\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"additionalATKRatio\"),\r\n          node: c1AtkRatio\r\n        }, {\r\n          node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\r\n        }],\r\n        canShow: equal(condInArea, \"activeInArea\", 1),\r\n        teamBuff: true,\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: constant(datamine.constellation6.pyro_dmg, { key: \"pyro_dmg_\", variant: \"pyro\" })\r\n        }, {\r\n          text: trm(\"c6PyroInfusion\")\r\n        }],\r\n        canShow: equal(condInArea, \"activeInArea\", 1),\r\n        teamBuff: true,\r\n      })]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [\r\n        ct.conditionalTemplate(\"constellation2\", {\r\n          value: condUnderHP,\r\n          path: condUnderHPPath,\r\n          name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\r\n          states: {\r\n            underHP: {\r\n              fields: [{\r\n                node: underHP\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n        }],\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(activeInAreaA4).value);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Chongyun_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Chongyun\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin_dmg: skillParam_gen.auto[4],\r\n    final_dmg: skillParam_gen.auto[5],\r\n    stamina: skillParam_gen.auto[6][0],\r\n    duration: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    infusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    fieldDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atk_spd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0],\r\n    res: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    cdr: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    energy_regen: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    burst_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst skillDmg = dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spin_dmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.final_dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg,\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, skillDmg),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(percent(datamine.constellation1.dmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4,\r\n  equal(condAsc4, \"hit\",\r\n    -0.10\r\n  )\r\n)\r\nconst activeInArea = equal(\"activeInArea\", condSkill, equal(input.activeCharKey, target.charKey, 1))\r\n\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1, percent(0.08))\r\nconst nodeAsc1 = equal(activeInArea, 1, nodeAsc1Disp)\r\n\r\nconst correctWep =\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0));\r\n\r\nconst activeInAreaInfusion = equalStr(correctWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.burst_dmg_))\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_enemyRes_: nodeAsc4,\r\n      atkSPD_: nodeAsc1\r\n    },\r\n    infusion: {\r\n      team: activeInAreaInfusion,\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.fieldDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: trm(\"infusion\"),\r\n              variant: elementKey\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.infusionDuration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: infoMut(nodeAsc1Disp, { key: \"atkSPD_\" })\r\n            }]\r\n          },\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          text: trm(\"blades\"),\r\n          value: data => data.get(input.constellation).value < 6 ? 3 : 4\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2` }),\r\n        }]\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: true,\r\n        value: condAsc4,\r\n        path: condAsc4Path,\r\n        name: trm(\"asc4Cond\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeAsc4\r\n            }]\r\n          },\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:constellation1` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"constellation6\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Collei_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Collei\"\r\nconst elementKey: ElementKey = \"dendro\"\r\nconst region: Region = \"sumeru\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    leapDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    unknown: skillParam_gen.passive1[p1++][0],\r\n    sproutDmg: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    maxExtension: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    enerRech_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    duration: skillParam_gen.constellation2[0],\r\n    sproutDmg: skillParam_gen.constellation2[0],\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    eleMas: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    anbarDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst c1_enerRech_ = greaterEq(input.constellation, 1, datamine.constellation1.enerRech_)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst c4AfterBurst_eleMasDisp = greaterEq(input.constellation, 4,\r\n  equal(condAfterBurst, \"on\", datamine.constellation4.eleMas)\r\n)\r\nconst c4AfterBurst_eleMas = unequal(target.charKey, key, c4AfterBurst_eleMasDisp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n    leapDmg: dmgNode(\"atk\", datamine.burst.leapDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(percent(datamine.passive1.sproutDmg), input.total.atk), \"skill\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  constellation6: {\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.anbarDmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } })) // This is possibly burst damage\r\n  }\r\n}\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  premod: {\r\n    enerRech_: c1_enerRech_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: c4AfterBurst_eleMas\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        },],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.leapDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        path: condAfterBurstPath,\r\n        value: condAfterBurst,\r\n        teamBuff: true,\r\n        name: st(\"afterUse.burst\"),\r\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c4AfterBurst_eleMasDisp, { key: \"eleMas\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:sproutDmg` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\",\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: `char_${key}:miniAnbarDmg` })\r\n        }]\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Diluc_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n    hpThresh_: 0.5,\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, equal(condBurst, \"on\", datamine.passive2.pyroInc))\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n  constellation4: {\r\n    secondHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional)),\r\n    thirdHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: {\r\n    // CAUTION: Technically, this infusion is overridable,\r\n    // but it should also be higher prio than `team` because\r\n    // it refreshes faster than auras. So we put it here instead.\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n          unit: 's'\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n        }],\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6DmgBonus,\r\n            }, {\r\n              node: nodeC6SpdBonus\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.pyro\"),\r\n              variant: \"pyro\",\r\n            }, {\r\n              node: nodeA4Bonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: st(\"enemyGreaterPercentHP\", { percent: datamine.constellation1.hpThresh_ * 100 }),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1Bonus,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: st(\"takeDmg\"),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n          [i, {\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: nodeC2AtkBonus\r\n            }, {\r\n              node: nodeC2SpdBonus\r\n            }]\r\n          }]\r\n        ))\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Diona_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Diona\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    icyPawDmg: skillParam_gen.skill[s++],\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    fieldDmg: skillParam_gen.burst[b++],\r\n    healHp_: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\r\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\r\n  },\r\n  passive2: {\r\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\r\n    duration: skillParam_gen.passive1[p2++][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\r\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\r\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\r\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\r\n  },\r\n  constellation6: {\r\n    healingBonus_: skillParam_gen.constellation6[0],\r\n    emBonus: skillParam_gen.constellation6[1],\r\n  },\r\n} as const\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\r\n\r\n// Hold shield bonus is a separate multiplier\r\nconst holdSkillShieldStr_ = percent(1.75)\r\n// C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\r\n// 100% if not C2, 175% if C2 or higher\r\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\r\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\r\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, holdSkillShieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\r\n    pressShield: nodeSkillShieldPress,\r\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\r\n    holdShield: nodeSkillShieldHold,\r\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\r\n  },\r\n  burst: {\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\r\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\r\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\r\n\r\nconst nodeC6healing_Disp = equal(condC6, \"lower\", percent(datamine.constellation6.healingBonus_),)\r\nconst nodeC6healing_ = equal(input.activeCharKey, target.charKey, nodeC6healing_Disp)\r\nconst nodeC6emDisp = equal(condC6, \"higher\", datamine.constellation6.emBonus,)\r\nconst nodeC6em = equal(input.activeCharKey, target.charKey, nodeC6emDisp)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, premod: {\r\n    skill_dmg_: nodeC2skillDmg_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1Stamina,\r\n      moveSPD_: nodeA1MoveSpeed,\r\n      eleMas: nodeC6em,\r\n      incHeal_: nodeC6healing_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `char_${key}:pressShield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.pressShield, { key: `char_${key}:pressShield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdShield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: trm(\"skillDuration\"),\r\n          value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        }, {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.cdPress,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\",\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        teamBuff: true,\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: trm(`a1shielded`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1MoveSpeed,\r\n            }, {\r\n              node: nodeA1Stamina,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          lower: {\r\n            name: st(\"lessEqPercentHP\", { percent: 50 }),\r\n            fields: [{\r\n              node: infoMut(nodeC6healing_Disp, { key: \"incHeal_\" }),\r\n            }]\r\n          },\r\n          higher: {\r\n            name: st(\"greaterPercentHP\", { percent: 50 }),\r\n            fields: [{\r\n              node: infoMut(nodeC6emDisp, { key: \"eleMas\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2skillDmg_ }] }]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Dori_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, min, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Dori\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst regionKey: Region = \"sumeru\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2.1\r\n      skillParam_gen.auto[a++], // 2.2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    shotDmg: skillParam_gen.skill[s++],\r\n    roundDmg: skillParam_gen.skill[s++],\r\n    numRounds: 2,\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    connectorDmg: skillParam_gen.burst[b++],\r\n    healMult: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    energyRegen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: skillParam_gen.passive1[0][0],\r\n    cd: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[0][0],\r\n    maxEnergyRegen: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation1: {\r\n    addlRounds: 1\r\n  },\r\n  constellation2: {\r\n    toopDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: 50,\r\n    energyThresh: 50,\r\n    incHeal_: skillParam_gen.constellation4[0],\r\n    enerRech_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    infusionDuration: skillParam_gen.constellation6[0],\r\n    heal_: skillParam_gen.constellation6[1],\r\n    cd: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condC4BelowHpPath, condC4BelowHp] = cond(key, \"c4BelowHp\")\r\nconst [condC4BelowEnerPath, condC4BelowEner] = cond(key, \"c4BelowEner\")\r\nconst c4BelowHp_incHeal_disp = greaterEq(input.constellation, 4,\r\n  equal(condC4BelowHp, \"belowHp\", datamine.constellation4.incHeal_)\r\n)\r\nconst c4BelowHp_incHeal_ = equal(input.activeCharKey, target.charKey, c4BelowHp_incHeal_disp)\r\nconst c4BelowEner_enerRech_disp = greaterEq(input.constellation, 4,\r\n  equal(condC4BelowEner, \"belowEner\", datamine.constellation4.enerRech_)\r\n)\r\nconst c4BelowEner_enerRech_ = equal(input.activeCharKey, target.charKey, c4BelowEner_enerRech_disp)\r\n\r\nconst [condC6AfterSkillPath, condC6AfterSkill] = cond(key, \"c6AfterSkill\")\r\nconst c6AfterSkill_infusion = greaterEqStr(input.constellation, 6, equalStr(condC6AfterSkill, \"on\", elementKey))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    shotDmg: dmgNode(\"atk\", datamine.skill.shotDmg, \"skill\"),\r\n    roundDmg: dmgNode(\"atk\", datamine.skill.roundDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    connectorDmg: dmgNode(\"atk\", datamine.burst.connectorDmg, \"burst\"),\r\n    heal: healNodeTalent(\"hp\", datamine.burst.healMult, datamine.burst.healBase, \"burst\")\r\n  },\r\n  passive2: {\r\n    energyRegen: greaterEq(input.asc, 4, min(prod(constant(datamine.passive2.energyRegen), input.total.enerRech_), constant(datamine.passive2.maxEnergyRegen)))\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(\r\n      prod(\r\n        subscript(input.total.skillIndex, datamine.skill.shotDmg, { key: \"_\" }),\r\n        percent(datamine.constellation2.toopDmg, { key: `char_${key}:c2MultiplierKey_` }),\r\n        input.total.atk\r\n      ),\r\n      \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }\r\n    ))\r\n  },\r\n  constellation6: {\r\n    heal: greaterEq(input.constellation, 6, equal(condC6AfterSkill, \"on\",\r\n      customHealNode(prod(\r\n        percent(datamine.constellation6.heal_),\r\n        input.total.hp\r\n      ))\r\n    ))\r\n  }\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  infusion: {\r\n    overridableSelf: c6AfterSkill_infusion // This might end up being non-overridable, though I doubt it\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      incHeal_: c4BelowHp_incHeal_,\r\n      enerRech_: c4BelowEner_enerRech_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i > 1 ? i - 1 : i}` }),\r\n          textSuffix: i >= 1 && i < 3 ? `(${i})` : undefined\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.shotDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.roundDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.energyRegen, { key: \"sheet:energyRegen\"}),\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        path: condC6AfterSkillPath,\r\n        value: condC6AfterSkill,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: <ColorText color={elementKey}>{st(`infusion.${elementKey}`)}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.infusionDuration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6Heal` ,variant: \"success\" })\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\",\r\n              fixed: 1\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.connectorDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" }),\r\n        }, {\r\n          text: st(\"energyRegen\"),\r\n          value: (data) => data.get(subscript(input.total.burstIndex, datamine.burst.energyRegen)).value,\r\n          fixed: 1\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:c2DmgKey` })\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        states: {\r\n          belowHp: {\r\n            path: condC4BelowHpPath,\r\n            value: condC4BelowHp,\r\n            name: trm(\"c4ConnectedBelowHp\"),\r\n            fields: [{\r\n              node: infoMut(c4BelowHp_incHeal_disp, { key: \"incHeal_\" }),\r\n            }]\r\n          },\r\n          belowEner: {\r\n            path: condC4BelowEnerPath,\r\n            value: condC4BelowEner,\r\n            name: trm(\"c4ConnectedBelowEner\"),\r\n            fields: [{\r\n              node: infoMut(c4BelowEner_enerRech_disp, { key: \"enerRech_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Eula_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.8\"),\r\n          value: `${datamine.skill.pressCd}`,\r\n          unit: 's'\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: `${datamine.skill.holdCd}`,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: 2,\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condGrimheart,\r\n        path: condGrimheartPath,\r\n        name: trm(\"skillC.name\"),\r\n        states: {\r\n          \"stack1\": {\r\n            name: st(\"stack\", { count: 1 }),\r\n            fields: [{\r\n              node: def_,\r\n            }, {\r\n              text: trm(\"skillC.grimheart.int\")\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.grimheartDuration,\r\n              unit: 's'\r\n            }]\r\n          },\r\n          \"stack2\": {\r\n            name: st(\"stack\", { count: 2 }),\r\n            fields: [{\r\n              node: def_,\r\n            }, {\r\n              text: trm(\"skillC.grimheart.int\")\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.grimheartDuration,\r\n              unit: 's'\r\n            }]\r\n          },\r\n          \"consumed\": {\r\n            name: trm(\"skillC.consumed\"),\r\n            fields: [{\r\n              node: cryo_enemyRes_,\r\n            }, {\r\n              node: physical_enemyRes_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: 7,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 7,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condLightfallSword,\r\n        path: condLightfallSwordPath,\r\n        name: trm(\"burstC.name\"),\r\n        states: {\r\n          ...objectKeyMap(range(1, 30), i => ({\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              canShow: data => data.get(input.constellation).value >= 6,\r\n              text: trm(\"burstC.start5\"),\r\n            }, {\r\n              canShow: data => data.get(input.constellation).value >= 6,\r\n              text: trm(\"burstC.addStacks\"),\r\n            }]\r\n          })),\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4C.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"c4C.desc\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Fischl_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Fischl\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    ozDmg: skillParam_gen.skill[s++],\r\n    summonDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0]\r\n  },\r\n  constellation2: {\r\n    dmg: skillParam_gen.constellation2[0]\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n    regen: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\r\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\r\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\r\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\r\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\r\n      { hit: { ele: constant('electro') } })),\r\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\r\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"elemental\", { hit: { ele: constant('physical') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value < 2,\r\n          node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 6,\r\n          node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          text: st(\"aoeInc\"),\r\n          value: 50,\r\n          unit: \"%\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Ganyu_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_disp = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst cryo_dmg_ = equal(input.activeCharKey, target.charKey, cryo_dmg_disp)\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_,\r\n      cryo_enemyRes_,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: trm(\"a1.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"a1.critRateInc\"),\r\n              value: datamine.passive1.critRateInc * 100,\r\n              unit: \"%\"\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.passive1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1.condName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: cryo_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.constellation1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"heal\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}s`,\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}s`,\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          text: st(\"charges\"),\r\n          value: 2,\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: `${datamine.burst.duration}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.cd}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: st(\"opponentsField\"),\r\n        states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n          name: st(\"seconds\", { count: (i - 1) * 3 }),\r\n          fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Gorou_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Gorou\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    defInc: skillParam_gen.skill[s++],\r\n    geo_dmg_: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg_def: skillParam_gen.burst[b++],\r\n    crystalDmg_def: skillParam_gen.burst[b++],\r\n    crystalHits: 6,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    def_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    skill_dmgInc: skillParam_gen.passive2[0][0],\r\n    burst_dmgInc: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation4: {\r\n    heal_def_: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    geo_critDMG_: [\r\n      skillParam_gen.constellation6[0],\r\n      skillParam_gen.constellation6[1],\r\n      skillParam_gen.constellation6[2],\r\n      skillParam_gen.constellation6[2],\r\n    ] as number[],\r\n    duration: skillParam_gen.constellation6[3]\r\n  }\r\n} as const\r\n\r\nconst [condInFieldPath, condInField] = cond(key, \"inField\")\r\nconst skill1_defDisp = equal(condInField, \"inField\",\r\n  greaterEq(tally[\"geo\"], 1,\r\n    subscript(input.total.skillIndex, datamine.skill.defInc)\r\n  )\r\n)\r\nconst skill1_def = equal(input.activeCharKey, target.charKey, skill1_defDisp)\r\nconst skill3_geo_dmg_Disp = equal(condInField, \"inField\",\r\n  greaterEq(tally[\"geo\"], 3, datamine.skill.geo_dmg_)\r\n)\r\nconst skill3_geo_dmg_ = equal(input.activeCharKey, target.charKey, skill3_geo_dmg_Disp)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_def_ = greaterEq(input.asc, 1, equal(condAfterBurst, \"afterBurst\", datamine.passive1.def_))\r\n\r\nconst p2_skill_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.skill_dmgInc))\r\nconst p2_burst_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.burst_dmgInc))\r\n\r\nconst [condAfterSkillBurstPath, condAfterSkillBurst] = cond(key, \"afterSkillBurst\")\r\nconst c6_geo_critDMG_ = greaterEq(input.constellation, 6,\r\n  equal(condAfterSkillBurst, \"afterSkillBurst\",\r\n    subscript(sum(tally[\"geo\"], -1), datamine.constellation6.geo_critDMG_)\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"def\", datamine.burst.dmg_def, \"burst\"),\r\n    crystalCollapse: dmgNode(\"def\", datamine.burst.crystalDmg_def, \"burst\")\r\n  },\r\n  constellation4: {\r\n    heal: greaterEq(input.constellation, 4, greaterEq(tally[\"geo\"], 2, healNode(\"def\", datamine.constellation4.heal_def_, 0)))\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      def: skill1_def,\r\n      geo_dmg_: skill3_geo_dmg_,\r\n      def_: afterBurst_def_,\r\n      geo_critDMG_: c6_geo_critDMG_,\r\n    }\r\n  },\r\n  premod: {\r\n    skill_dmgInc: p2_skill_dmgInc,\r\n    burst_dmgInc: p2_burst_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }],\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condInField,\r\n        path: condInFieldPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inField: {\r\n            fields: [{\r\n              node: infoMut(skill1_defDisp, { key: \"def\" }),\r\n            }, {\r\n              canShow: data => data.get(tally[\"geo\"]).value >= 2,\r\n              text: st(\"incInterRes\")\r\n            }, {\r\n              node: infoMut(skill3_geo_dmg_Disp, { key: \"geo_dmg_\", variant: \"geo\" }),\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: p2_skill_dmgInc\r\n        }]\r\n      }), ct.headerTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        canShow: greaterEq(tally.geo, 2, 1),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.heal, { key: \"sheet_gen:healing\" }),\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.crystalCollapse, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.burst.crystalHits })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurst_def_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: p2_burst_dmgInc\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condAfterSkillBurst,\r\n        path: condAfterSkillBurstPath,\r\n        name: st(\"afterUse.skillOrBurst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterSkillBurst: {\r\n            fields: [{\r\n              node: c6_geo_critDMG_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })])\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Hu_Tao_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n          textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.bloodBlossomDuration,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value > 1,\r\n          text: trm(\"constellation2.applyBloodBlossom\"),\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n              node: critRate_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: 60,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Jean_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Jean\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    stamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    enterExitDmg: skillParam_gen.burst[b++],\r\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\r\n    burstActionFlatModifier: skillParam_gen.burst[b++],\r\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\r\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    chance: skillParam_gen.passive1[p1++][0],\r\n    atkPercentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    increaseDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    moveSpd: skillParam_gen.constellation2[0],\r\n    atkSpd: skillParam_gen.constellation2[1],\r\n    duration: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation4: {\r\n    anemoRes: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    dmgReduction: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\r\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\r\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\r\n\r\nconst [condC1Path, condC1] = cond(key, \"c1\")\r\nconst skill_dmg_ = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.increaseDmg))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\r\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst dmgRed_disp = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\r\nconst dmgRed_ = equal(input.activeCharKey, target.charKey, dmgRed_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\r\n    regen,\r\n    contRegen\r\n  },\r\n  passive1: {\r\n    a1Regen\r\n  },\r\n  constellation2: {\r\n    atkSPD_,\r\n    moveSPD_\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atkSPD_,\r\n      moveSPD_,\r\n      anemo_enemyRes_,\r\n      dmgRed_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: `${datamine.skill.stamina}`,\r\n          unit: \"/s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }],\r\n      }, ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"c1PullSpeed\")\r\n            }, {\r\n              node: skill_dmg_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 11,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: anemo_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgRed_disp, { key: \"dmgRed_\" })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: st(\"energyRegen\"),\r\n          value: datamine.passive2.energyRegen\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atkSPD_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kazuha_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(ele, condSwirls[ele],\r\n      // Use premod since this is a percentage-based effect\r\n      prod(percent(datamine.passive2.elemas_dmg_, { fixed: 2 }), input.premod.eleMas)\r\n    ))]))\r\n\r\n// 2 C2 conds for the 2 parts of his C2\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMasDisp = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P, datamine.constellation2.elemas)\r\n)\r\nconst c2PEleMas = equal(input.activeCharKey, target.charKey, // Apply to active character\r\n  unequal(target.charKey, key, c2PEleMasDisp) // But not to Kazuha\r\n)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  // Not sure if this should be premod or total. I am guessing premod\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  passive2: asc4,\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      staminaSprintDec_: passive,\r\n      eleMas: c2PEleMas,\r\n    },\r\n    total: {\r\n      // Should be in total, since other character abilities should not scale off this\r\n      // if those abilities are percentage-based (e.g. XQ skill dmg red.)\r\n      ...asc4,\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: c6infusion,\r\n  },\r\n  total: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  premod: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n          textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: data => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd * (1 - 0.10)}`\r\n            : `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: data => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.cdHold} - 10% = ${datamine.skill.cdHold * (1 - 0.10)}`\r\n            : `${datamine.skill.cdHold}`,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.headerTemplate(\"skill\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(greaterEq(input.constellation, 1, percent(0.1)), { key: \"skillCDRed_\" })\r\n        }, {\r\n          text: trm(\"c1\"),\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", { // Burst absorption\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }]\r\n        }]))\r\n      }), ct.conditionalTemplate(\"constellation2\", { // C2 self\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2EleMas\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation2\", { // C2 Party\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        value: condC2P,\r\n        path: condC2PPath,\r\n        teamBuff: true,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          c2p: {\r\n            fields: [{\r\n              node: infoMut(c2PEleMasDisp, { key: \"eleMas\" })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", { // Poetics of Fuubutsu\r\n        teamBuff: true,\r\n        states: Object.fromEntries(absorbableEle.map(ele => [ele, {\r\n          value: condSwirls[ele],\r\n          path: condSwirlPaths[ele],\r\n          name: st(`swirlReaction.${ele}`),\r\n          fields: [{\r\n            node: asc4[`${ele}_dmg_`]\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n        }), ct.conditionalTemplate(\"constellation2\", { // C2 self, in teambuff panel\r\n        value: condC2,\r\n        path: condC2Path,\r\n        // Show C2 self buff if A4 is enabled\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, key,\r\n          greaterEq(input.asc, 4,\r\n            sum(...Object.values(condSwirls).map(val => unequal(val, undefined, 1)))\r\n          )\r\n        ),\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2EleMas\r\n            }]\r\n          }\r\n        }\r\n      })\r\n      ]),\r\n      passive3: ct.talentTemplate(\"passive3\", [ct.headerTemplate(\"passive3\", {\r\n        teamBuff: true,\r\n        fields: [{\r\n          node: passive\r\n        }]\r\n      })]),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        // Crimson Momiji\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              canShow: data => data.get(c6infusion).value === elementKey,\r\n              text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n            }, {\r\n              node: c6NormDmg_\r\n            }, {\r\n              node: c6ChargedDmg_\r\n            }, {\r\n              node: c6PlungingDmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })])\r\n    },\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kaeya_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode, shieldElement, shieldNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Kaeya\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    healAtk_: .15,\r\n  },\r\n  constellation1: {\r\n    critRate_: .15,\r\n  },\r\n  constellation4: {\r\n    shieldHp_: 0.30,\r\n    duration: 20,\r\n    cooldown: 60,\r\n  },\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    heal: healNode(\"atk\", percent(datamine.passive2.healAtk_), 0),\r\n  },\r\n  constellation4: {\r\n    cryoShield: shieldElement(\"cryo\", shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0)),\r\n    shield: shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\n//Conditional C1: Oppo affected by Cryo\r\nconst [condC1Path, condC1Cryo] = cond(key, \"CryoC1\")\r\nconst nodeC1NormalCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\nconst nodeC1ChargeCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, premod: {\r\n    normal_critRate_: nodeC1NormalCritRate,\r\n    charged_critRate_: nodeC1ChargeCritRate,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 2,\r\n          text: trm(\"c2burstDuration\"),\r\n        }],\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.heal, { key: `char_${key}:p1heal` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1Cryo,\r\n        path: condC1Path,\r\n        name: trm(\"c1cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalCritRate\r\n            }, {\r\n              node: nodeC1ChargeCritRate\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.cryoShield, { key: `char_${key}:c4shield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.shield, { key: `char_${key}:c4shield` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.constellation4.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.constellation4.cooldown,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kamisato_Ayaka_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\nimport sprint from './sprint.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3, sprint\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    cutDmg: skillParam_gen.burst[b++],\r\n    bloomDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.cutDmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.bloomDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(\r\n      subscript(input.total.burstIndex, datamine.burst.cutDmg, { key: \"_\" }),\r\n      percent(datamine.constellation2.snowflake),\r\n      input.total.atk,\r\n    ), \"burst\", { hit: { ele: constant(elementKey) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterSprintInfusion,\r\n  },\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: st(\"brHits\", { count: 3 })\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      sprint: ct.talentTemplate(\"sprint\", [{\r\n        fields: [{\r\n          text: st(\"activationStam\"),\r\n          value: datamine.sprint.active_stam,\r\n        }, {\r\n          text: st(\"stamDrain\"),\r\n          value: datamine.sprint.drain_stam,\r\n          unit: \"/s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"sprint\", {\r\n        value: condAfterSprint,\r\n        path: condAfterSprintPath,\r\n        name: trm(\"afterSprint\"),\r\n        states: {\r\n          afterSprint: {\r\n            fields: [{\r\n              canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n              text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.sprint.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condAfterApplySprint,\r\n        path: condAfterApplySprintPath,\r\n        name: trm(\"afterSprintCryo\"),\r\n        states: {\r\n          afterApplySprint: {\r\n            fields: [{\r\n              text: trm(\"staminaRestore\"),\r\n              value: datamine.passive2.stamina,\r\n            }, {\r\n              node: afterApplySprintCryo\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6Active\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      })])\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kamisato_Ayato_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyato\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmgArr: [\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n    ],\r\n    stateDuration: skillParam_gen.skill[s++][0],\r\n    stackHpDmgInc: skillParam_gen.skill[s++],\r\n    maxStacks: 4,\r\n    illusionDmg: skillParam_gen.skill[s++],\r\n    illusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    normal_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stacksGained: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerThres_: skillParam_gen.passive2[0][0],\r\n    cd: skillParam_gen.passive2[1][0],\r\n    energyRestore: skillParam_gen.passive2[2][0]\r\n  },\r\n  constellation1: {\r\n    oppHpThres_: skillParam_gen.constellation1[0],\r\n    shunDmg_: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    extraStacks: skillParam_gen.constellation2[0],\r\n    stackThresh: 3,\r\n    hp_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    atkSPD: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    extraStrikes: 2,\r\n    dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condInSkillPath, condInSkill] = cond(key, \"inSkill\")\r\n\r\nconst [condSkillStacksPath, condSkillStacks] = cond(key, \"skillStacks\")\r\nconst skillStacks_dmgInc = equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(1, 5).map(stacks => [\r\n    stacks,\r\n    prod(\r\n      stacks,\r\n      subscript(input.total.skillIndex, datamine.skill.stackHpDmgInc, { key: \"_\" }),\r\n      input.total.hp,\r\n    )\r\n  ])), naught)\r\n)\r\n\r\nconst [condBurstInAreaPath, condBurstInArea] = cond(key, \"burstInArea\")\r\nconst burst_normal_dmg_Disp = equal(condBurstInArea, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.normal_dmg_)\r\n)\r\nconst burst_normal_dmg_ = equal(input.activeCharKey, target.charKey, burst_normal_dmg_Disp)\r\n\r\nconst [condC1OppHpPath, condC1OppHp] = cond(key, \"c1OppHp\")\r\nconst c1Shun_dmg_ = greaterEq(input.constellation, 1, equal(condC1OppHp, \"on\", datamine.constellation1.shunDmg_))\r\n\r\n// Not sure what \"Max HP increased by 50%\" means\r\nconst c2_hp_ = greaterEq(input.constellation, 2, equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(datamine.constellation2.stackThresh, 5).map(stacks => [\r\n    stacks,\r\n    percent(datamine.constellation2.hp_)\r\n  ])), naught)\r\n))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\nconst c4_atkSPD_ = greaterEq(input.constellation, 4, equal(condC4AfterBurst, \"on\", datamine.constellation4.atkSPD))\r\n\r\nconst shunAddl: Data = {\r\n  hit: {\r\n    ele: constant(elementKey)\r\n  },\r\n  premod: {\r\n    normal_dmgInc: skillStacks_dmgInc,\r\n    normal_dmg_: c1Shun_dmg_\r\n  }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ...Object.fromEntries(datamine.skill.dmgArr.map((arr, i) =>\r\n      [`dmg${i}`, equal(condInSkill, \"on\", customDmgNode(prod(\r\n        subscript(input.total.skillIndex, arr, { key: \"_\" }),\r\n        input.total.atk,\r\n      ), \"normal\", shunAddl))])),\r\n    illusionDmg: dmgNode(\"atk\", datamine.skill.illusionDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation6: {\r\n    // Not sure if this benefits from C1 or not\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"normal\", { hit: { ele: constant(elementKey) }, premod: { normal_dmg_: c1Shun_dmg_ } }))\r\n  }\r\n}\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmg_: burst_normal_dmg_,\r\n      atkSPD_: c4_atkSPD_,\r\n    }\r\n  },\r\n  premod: {\r\n    hp_: c2_hp_,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields:\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.illusionDmg, { key: `char_${key}_gen:skill.skillParams.5` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.6\"),\r\n          value: datamine.skill.illusionDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condInSkill,\r\n        path: condInSkillPath,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...datamine.skill.dmgArr.map((_, i) => ({\r\n                node: infoMut(dmgFormulas.skill[`dmg${i}`], { key: `char_${key}_gen:skill.skillParams.${i}` })\r\n              })), {\r\n                text: st(\"incInterRes\"),\r\n              }, {\r\n                text: trm(\"skill.unableToAuto\"),\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.skill.stateDuration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillStacks,\r\n        path: condSkillStacksPath,\r\n        name: trm(\"skill.namisenStacks\"),\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        states: Object.fromEntries(range(1, 5).map(stacks => [\r\n          stacks, {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: infoMut(skillStacks_dmgInc, { key: `char_${key}:skill.shun_dmgInc` })\r\n            }, {\r\n              text: st(\"maxStacks\"),\r\n              value: data => data.get(input.constellation).value >= 2\r\n                ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n                : datamine.skill.maxStacks\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"passive1\", {\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        fields: [{\r\n          text: trm(\"passive1.afterUse\"),\r\n          value: datamine.passive1.stacksGained,\r\n        }, {\r\n          text: trm(\"passive1.afterExplode\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n            : datamine.skill.maxStacks\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1OppHp,\r\n        path: condC1OppHpPath,\r\n        name: st(\"enemyLessEqPercentHP\", { percent: datamine.constellation1.oppHpThres_ * 100 }),\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c1Shun_dmg_, { key: `char_${key}:c1.shun_dmg_` }),\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: trm(\"c2.addlStacks\"),\r\n          value: datamine.constellation2.extraStacks,\r\n        }, {\r\n          canShow: data => data.get(c2_hp_).value !== 0,\r\n          node: c2_hp_,\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: `char_${key}:c6.dmg` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.constellation6.extraStrikes })\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurstInArea,\r\n        path: condBurstInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(burst_normal_dmg_Disp, { key: \"normal_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4AfterBurst,\r\n        path: condC4AfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c4_atkSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Keqing_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterRecastInfusion,\r\n  },\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i],\r\n            { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n          ),\r\n          textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condAfterRecast,\r\n        path: condAfterRecastPath,\r\n        name: trm(\"recast\"),\r\n        states: {\r\n          afterRecast: {\r\n            fields: [{\r\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n              text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: st(\"brHits\", { count: 8 })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurstCritRate_\r\n            }, {\r\n              node: afterBurstEnerRech_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condAfterReact,\r\n        path: condAfterReactPath,\r\n        name: st(\"elementalReaction.electro\"),\r\n        states: {\r\n          afterReact: {\r\n            fields: [{\r\n              node: afterReactAtk_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Stack,\r\n        path: condC6StackPath,\r\n        name: trm(\"effectTriggers\"),\r\n        states: objectKeyMap(range(1, 4), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c6Electro_dmg_\r\n          }]\r\n        }))\r\n      })]),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Klee_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Klee\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    jumptyDumptyDmg1: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg2: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg3: skillParam_gen.skill[s++],\r\n    mineDmg: skillParam_gen.skill[s++],\r\n    mineDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++], // what is this??\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    charged_dmg_: 0.5\r\n  },\r\n  constellation1: {\r\n    dmg_: 1.2\r\n  },\r\n  constellation2: {\r\n    enemyDefRed_: 0.23\r\n  },\r\n  constellation4: {\r\n    dmg: 5.55\r\n  },\r\n  constellation6: {\r\n    pyro_dmg_: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"PoundingSurprise\")\r\nconst charged_dmg_ = equal(\"on\", condA1, greaterEq(input.asc, 1, percent(datamine.passive1.charged_dmg_)))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"ExplosiveFrags\")\r\nconst enemyDefRed_ = equal(\"on\", condC2, greaterEq(input.constellation, 2, percent(datamine.constellation2.enemyDefRed_)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"BlazingDelight\")\r\nconst pyro_dmg_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.pyro_dmg_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    jumptyDumptyDmg: dmgNode(\"atk\", datamine.skill.jumptyDumptyDmg1, \"skill\"),\r\n    mineDmg: dmgNode(\"atk\", datamine.skill.mineDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    chainedReactionsDmg: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.dmg_), dmgNode(\"atk\", datamine.burst.dmg, \"burst\")))\r\n  },\r\n  constellation4: {\r\n    sparklyExplosionDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.dmg), input.total.atk), \"elemental\", { hit: { ele: constant('pyro') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_,\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" })\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.jumptyDumptyDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.mineDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.mineDuration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: `${datamine.burst.duration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerCost}`\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: charged_dmg_\r\n            }, {\r\n              text: trm(\"a1CondName2\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.chainedReactionsDmg, { key: `sheet:dmg` }),\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.sparklyExplosionDmg, { key: `sheet:dmg` })\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 25,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })])\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kujou_Sara_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst atkIncRatio = subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' })\r\nconst skillTenguAmbush_disp = equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, atkIncRatio)\r\n)\r\nconst skillTenguAmbush_ = equal(input.activeCharKey, target.charKey, skillTenguAmbush_disp)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = greaterEq(input.constellation, 6, equal(\"c6\", condC6, percent(datamine.constellation6.atkInc)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}s`,\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}s`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(skillTenguAmbush_disp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.cd}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: trm(\"a4.enerRest\"),\r\n          value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen,\r\n          fixed: 2\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kuki_Shinobu_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { compareEq, constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"KukiShinobu\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    ringHealHP_: skillParam_gen.skill[s++],\r\n    ringHealFlat: skillParam_gen.skill[s++],\r\n    ringDmg: skillParam_gen.skill[s++],\r\n    cost: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    singleDmg: skillParam_gen.burst[b++],\r\n    maxDmgBase: skillParam_gen.burst[b++],\r\n    maxDmgExtend: skillParam_gen.burst[b++],\r\n    durationBase: skillParam_gen.burst[b++][0],\r\n    durationExtend: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    hpThresh_: skillParam_gen.passive1[p1++][0],\r\n    heal_: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    emSkillHeal_: skillParam_gen.passive2[p2++][0],\r\n    emSkillDmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    aoeInc: 0.5,\r\n  },\r\n  constellation2: {\r\n    skillDurInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    markDmg: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    hpThresh_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    em: skillParam_gen.constellation6[2],\r\n    cd: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst a1Heal_ = greaterEq(input.asc, 1, equal(condUnderHP, \"on\", datamine.passive1.heal_))\r\n\r\nconst a4Skill_healInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.emSkillHeal_), input.total.eleMas))\r\nconst a4Skill_dmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.emSkillDmg_), input.total.eleMas))\r\n\r\nconst [condC6TriggerPath, condC6Trigger] = cond(key, \"c6Trigger\")\r\nconst c6eleMas = greaterEq(input.constellation, 6, equal(condC6Trigger, \"on\", datamine.constellation6.em))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    pressDmg: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    ringHeal: healNodeTalent(\"hp\", datamine.skill.ringHealHP_, datamine.skill.ringHealFlat, \"skill\",\r\n      { premod: { healInc: a4Skill_healInc } }\r\n    ),\r\n    ringDmg: dmgNode(\"atk\", datamine.skill.ringDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    singleDmg: dmgNode(\"hp\", datamine.burst.singleDmg, \"burst\"),\r\n    totalDmg: compareEq(condUnderHP, \"on\",\r\n      dmgNode(\"hp\", datamine.burst.maxDmgExtend, \"burst\"),\r\n      dmgNode(\"hp\", datamine.burst.maxDmgBase, \"burst\")\r\n    )\r\n  },\r\n  constellation4: {\r\n    markDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.markDmg), input.total.hp), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    heal_: a1Heal_,\r\n    skill_dmgInc: a4Skill_dmgInc,\r\n    eleMas: c6eleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.pressDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.ringHeal, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.ringDmg, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cost * 100,\r\n          unit: trm(\"skill.cost\"),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: (data) => data.get(input.constellation).value >= 2\r\n            ? `${datamine.skill.duration}s + ${datamine.constellation2.skillDurInc}s = ${datamine.skill.duration + datamine.constellation2.skillDurInc}`\r\n            : datamine.skill.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(a4Skill_healInc, { key: `char_${key}:a4.heal`, variant: \"heal\" }),\r\n        }, {\r\n          node: a4Skill_dmgInc\r\n        }]\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.skillDurInc,\r\n          unit: \"s\",\r\n        }]\r\n      }), ct.headerTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.markDmg, { key: `char_${key}:c4.dmg` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation4.cd,\r\n          unit: \"s\",\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.singleDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.totalDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: (data) => data.get(condUnderHP).value === \"on\"\r\n            ? `${datamine.burst.durationBase}s + ${datamine.burst.durationExtend - datamine.burst.durationBase}s = ${datamine.burst.durationExtend}`\r\n            : datamine.burst.durationBase,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive1.hpThresh_ * 100 }),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"durationInc\"),\r\n              value: datamine.burst.durationExtend - datamine.burst.durationBase,\r\n              fixed: 1,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"aoeInc\"),\r\n          value: datamine.constellation1.aoeInc * 100,\r\n          unit: \"%\",\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive1.hpThresh_ * 100 }),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: a1Heal_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Trigger,\r\n        path: condC6TriggerPath,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation6.hpThresh_ * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6eleMas,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\",\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Lisa_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Lisa\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stack0: skillParam_gen.skill[s++],\r\n    stack1: skillParam_gen.skill[s++],\r\n    stack2: skillParam_gen.skill[s++],\r\n    stack3: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    press: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    tick: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    unknown: skillParam_gen.passive1[0][0] // I have no idea what this is\r\n  },\r\n  passive2: {\r\n    defShred: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"LisaA4\")\r\nconst [condC2Path, condC2] = cond(key, \"LisaC2\")\r\n\r\nconst nodeA4DefShred = equal(condA4, \"on\", greaterEq(input.asc, 1, datamine.passive2.defShred))\r\nconst nodeC2DefIncrease = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.25))) // Doesn't exist in skillParam_gen\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    stack0: dmgNode(\"atk\", datamine.skill.stack0, \"skill\"),\r\n    stack1: dmgNode(\"atk\", datamine.skill.stack1, \"skill\"),\r\n    stack2: dmgNode(\"atk\", datamine.skill.stack2, \"skill\"),\r\n    stack3: dmgNode(\"atk\", datamine.skill.stack3, \"skill\"),\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    tick: dmgNode(\"atk\", datamine.burst.tick, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    def_: nodeC2DefIncrease,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: nodeA4DefShred\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        },\r\n        ...range(0, 3).map(i => ({\r\n          node: infoMut(dmgFormulas.skill[`stack${i}`], { key: `char_${key}_gen:skill.skillParams.${2 + i}` })\r\n        })), {\r\n          text: sgt(\"press.cd\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"hold.cd\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.tick, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        name: trm(\"a4C\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4DefShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2DefIncrease\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Mona_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\nimport sprint from './sprint.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3, sprint\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }]),\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          text: trm(\"bubbleDuration\"),\r\n          value: datamine.burst.bubbleDuration,\r\n          unit: \"s\",\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      sprint: ct.talentTemplate(\"sprint\", [{\r\n        fields: [{\r\n          text: st(\"activationStam\"),\r\n          value: datamine.sprint.active_stam,\r\n        }, {\r\n          text: st(\"stamDrain\"),\r\n          value: datamine.sprint.drain_stam,\r\n          unit: \"/s\",\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: trm(\"phantomDuration\"),\r\n          value: datamine.passive1.phantomDuration,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: hydro_dmg_\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })])\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Ningguang_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ningguang\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    jadeDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerGem: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    geoDmgBonus_: skillParam_gen.passive2[p1++][0],\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  },\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\r\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\r\n\r\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\r\n\r\nconst nodesC4 = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_res_`,\r\n  equal(condC4, \"on\", percent(0.10))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      geo_dmg_: nodeA4GeoDmgBonus_,\r\n      ...nodesC4,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` })\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          text: trm(\"aoeGems\"),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\r\n        }, {\r\n          canShow: data => data.get(input.asc).value < 1,\r\n          text: tr(\"auto.skillParams.3\"),\r\n          value: datamine.charged.stamina,\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"auto.skillParams.3\"),\r\n          value: trm(\"starJadeStaminaCost\"),\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 2,\r\n          text: trm(\"skillReset\"),\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: true,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"a4toggle\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4GeoDmgBonus_\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4toggle\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesC4).map(n => ({ node: n }))\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: trm(\"c6bonus\"),\r\n          value: 7,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Noelle_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC2ChargeDec = greaterEq(input.constellation, 2, percent(-datamine.constellation2.chargeStamina))\r\nconst nodeC4dmg = greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\")),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: greaterEq(input.asc, 1, shieldElement(\"geo\", shieldNode(\"def\", percent(datamine.passive1.shield), 0)))\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n    staminaChargedDec_: nodeC2ChargeDec,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, { //Heal trigger chance\r\n          canShow: data => data.get(input.constellation).value === 0,\r\n          node: nodeSkillHealChanceBase,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOff,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOn,\r\n        }, { //Shield Duration\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, { //Cooldown\r\n          canShow: data => data.get(input.asc).value < 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: trm(`p4cd`),\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value < 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: trm(`c6duration`),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }],\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              text: trm(\"qlarger\")\r\n            }, {\r\n              node: nodeBurstAtk\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.passive1.cooldown,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: nodeC2ChargeDec\r\n        }, {\r\n          node: nodeC2ChargeDMG\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Qiqi_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Qiqi\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hitRegenPercent: skillParam_gen.skill[s++],\r\n    hitRegenFlat: skillParam_gen.skill[s++],\r\n    contRegenPercent: skillParam_gen.skill[s++],\r\n    contRegenFlat: skillParam_gen.skill[s++],\r\n    tickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    castDmg: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    healPercent: skillParam_gen.burst[b++],\r\n    healFlat: skillParam_gen.burst[b++],\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"QiqiA1\")\r\nconst [condC2Path, condC2] = cond(key, \"QiqiC2\")\r\n\r\n// Values here doesn't exist in skillParam_gen\r\nconst nodeA1HealingBonus = equal(condA1, \"on\", greaterEq(input.asc, 1, 0.2))\r\nconst nodeC2ChargedDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, 0.15))\r\nconst nodeC2NormalDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, 0.15))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    castDmg: dmgNode(\"atk\", datamine.skill.castDmg, \"skill\"),\r\n    tickDmg: dmgNode(\"atk\", datamine.skill.tickDmg, \"skill\"),\r\n    hitRegen: healNodeTalent(\"atk\", datamine.skill.hitRegenPercent, datamine.skill.hitRegenFlat, \"skill\"),\r\n    contRegen: healNodeTalent(\"atk\", datamine.skill.contRegenPercent, datamine.skill.contRegenFlat, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"atk\", datamine.burst.healPercent, datamine.burst.healFlat, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_: nodeC2NormalDmgInc,\r\n    charged_dmg_: nodeC2ChargedDmgInc,\r\n    incHeal_: nodeA1HealingBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 2 || i === 3) ? st(\"brHits\", { count: 2 }) : undefined\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: st(\"brHits\", { count: 2 })\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.castDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hitRegen, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.contRegen, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.tickDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        },\r\n        {\r\n          node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1C\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1HealingBonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 8,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2NormalDmgInc\r\n            }, {\r\n              node: nodeC2ChargedDmgInc\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Raiden_Shogun_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(constant(datamine.burst.enerCost, { key: \"sheet:energy\" }), subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { fixed: 2, key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i, { key: \"sheet:energy\" })), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { fixed: 2, key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nconst resolveStackNode = lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0, { key: `char_${key}:burst.resolves` })\r\nconst resolveInitialBonus_ = prod(\r\n  subscript(input.total.burstIndex, datamine.burst.resolveBonus1, { key: `char_${key}:burst.resolveInitial_` }),\r\n  resolveStackNode\r\n)\r\nconst resolveInfusedBonus_ = prod(\r\n  subscript(input.total.burstIndex, datamine.burst.resolveBonus2, { key: `char_${key}:burst.resolveInfused_` }),\r\n  resolveStackNode\r\n)\r\nfunction burstResolve(mvArr: number[], initial = false) {\r\n  const resolveBonus = initial ? resolveInitialBonus_ : resolveInfusedBonus_\r\n\r\n  return customDmgNode(\r\n    prod(\r\n      sum(\r\n        subscript(input.total.burstIndex, mvArr, { key: '_' }),\r\n        resolveBonus\r\n      ),\r\n      input.total.atk\r\n    ),\r\n    'burst',\r\n    {\r\n      hit: {\r\n        ele: constant('electro')\r\n      }, enemy: {\r\n        // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n        defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n          textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}s`,\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: `${datamine.skill.cd}s`,\r\n        }],\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillEye,\r\n        path: condSkillEyePath,\r\n        name: trm(\"skill.eye\"),\r\n        states: {\r\n          skillEye: {\r\n            fields: [{\r\n              node: skillEye_\r\n            }]\r\n          }\r\n        }\r\n      },\r\n      ), ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillEyeTeam,\r\n        path: condSkillEyeTeamPath,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"skill.partyCost\"),\r\n        states: Object.fromEntries(energyCosts.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: [{\r\n            node: skillEyeTeamBurstDmgInc,\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.9\"),\r\n          value: `${datamine.burst.stam}`,\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.12\"),\r\n          value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.13\"),\r\n          value: `${datamine.burst.duration}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.14\"),\r\n          value: `${datamine.burst.cd}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.15\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }],\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: infoMut(resolveInitialBonus_, { key: `char_${key}:burst.resolveInitial_` }),\r\n          }, {\r\n            node: infoMut(resolveInfusedBonus_, { key: `char_${key}:burst.resolveInfused_` })\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: trm(\"a4.enerRest\"),\r\n          value: (data) => (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100),\r\n          unit: \"%\"\r\n        }, {\r\n          node: passive2ElecDmgBonus,\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Razor_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Razor\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++]\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    erBonus: skillParam_gen.skill[s++][0],\r\n    enerRegen: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    companionDmg: skillParam_gen.burst[b++],\r\n    atkSpdBonus: skillParam_gen.burst[b++],\r\n    electroResBonus: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: 0.18\r\n  },\r\n  passive2: {\r\n    enerThreshold: 0.5,\r\n    erInc: 0.3\r\n  },\r\n  passive3: {\r\n    sprintStaminaDec: 0.2\r\n  },\r\n  constellation1: {\r\n    allDmgInc: 0.1,\r\n    duration: 8\r\n  },\r\n  constellation2: {\r\n    hpThreshold: 0.3,\r\n    critRateInc: 0.1\r\n  },\r\n  constellation4: {\r\n    defDec: 0.15,\r\n    duration: 7\r\n  },\r\n  constellation6: {\r\n    dmg: 1,\r\n    electroSigilGenerated: 1,\r\n    cd: 10\r\n  }\r\n} as const\r\n\r\nconst [condElectroSigilPath, condElectroSigil] = cond(key, \"ElectroSigil\")\r\nconst [condTheWolfWithinPath, condTheWolfWithin] = cond(key, \"TheWolfWithin\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC2Path, condC2] = cond(key, \"C2\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\n\r\nconst enerRechElectroSigil_ = lookup(condElectroSigil, objectKeyMap(range(1, 3), i => prod(i, percent(datamine.skill.erBonus))),\r\n  naught, { key: \"enerRech_\" })\r\nconst electro_res_ = equal(\"on\", condTheWolfWithin, percent(datamine.burst.electroResBonus))\r\nconst atkSPD_ = equal(\"on\", condTheWolfWithin, subscript(input.total.burstIndex, datamine.burst.atkSpdBonus, { key: \"_\" }))\r\nconst enerRechA4_ = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.erInc, { key: \"enerRech_\" })))\r\nconst all_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.allDmgInc)))\r\nconst critRate_ = greaterEq(input.constellation, 2, equal(\"on\", condC2, percent(datamine.constellation2.critRateInc)))\r\nconst enemyDefRed_ = greaterEq(input.constellation, 4, equal(\"on\", condC4, percent(datamine.constellation4.defDec)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    companionDmg1: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg2: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg3: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg4: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    // TODO: this is for the additional section to calculate the full burst dmg where the full burst dmg = sum of normal dmg and burst companion dmg\r\n    // However, the final dmg then defaults to Electro text color which is sort of incorrect?\r\n    // Is there a way to disable the electro text color and default it to just normal color instead?\r\n    fullBurstDmg1: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg2: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg3: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg4: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"))\r\n  },\r\n  constellation6: {\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: sum(enerRechElectroSigil_, enerRechA4_),\r\n    electro_res_,\r\n    atkSPD_,\r\n    all_dmg_,\r\n    critRate_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: (data) => data.get(input.asc).value >= 1\r\n            ? datamine.skill.pressCd - (datamine.skill.pressCd * datamine.passive1.cdRed)\r\n            : datamine.skill.pressCd,\r\n          unit: 's'\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.6\"),\r\n          value: (data) => data.get(input.asc).value >= 1\r\n            ? datamine.skill.holdCd - (datamine.skill.holdCd * datamine.passive1.cdRed)\r\n            : datamine.skill.holdCd,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", { // Electro Sigil\r\n        value: condElectroSigil,\r\n        path: condElectroSigilPath,\r\n        name: trm(\"electroSigil\"),\r\n        states: {\r\n          ...objectKeyMap(range(1, 3), i => ({\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: enerRechElectroSigil_\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"electroSigilAbsorbed\"),\r\n              value: datamine.skill.enerRegen * i,\r\n            }]\r\n          })),\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg1, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.0\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg2, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.1\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg3, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.2\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg4, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.3\")\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.6\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", { // The Wolf Within\r\n        value: condTheWolfWithin,\r\n        path: condTheWolfWithinPath,\r\n        name: tr(\"burst.description.3\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: electro_res_\r\n            }, {\r\n              node: atkSPD_\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: trm(\"fullBurstDMG.description\"),\r\n      }, ct.headerTemplate(\"burst\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg1, { key: `char_${key}:fullBurstDMG.dmg1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg2, { key: `char_${key}:fullBurstDMG.dmg2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg3, { key: `char_${key}:fullBurstDMG.dmg3` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg4, { key: `char_${key}:fullBurstDMG.dmg4` })\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: st(\"lessPercentEnergy\", { percent: datamine.passive2.enerThreshold * 100 }),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enerRechA4_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"pickUpElementalOrbParticle\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: all_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.constellation2.hpThreshold * 100 }),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: critRate_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: trm(\"opHitWithClawAndThunder\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: trm(\"electroSigilPerProc\"),\r\n          value: datamine.constellation6.electroSigilGenerated\r\n        }, {\r\n          text: st(\"cooldown\"),\r\n          value: datamine.constellation6.cd,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Rosaria_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, min, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Rosaria\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c1i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hit1: skillParam_gen.skill[s++],\r\n    hit2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    crInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    crBonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    maxBonus: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    atkSpdInc: skillParam_gen.constellation1[c1i++],\r\n    dmgInc: skillParam_gen.constellation1[c1i++],\r\n    duration: skillParam_gen.constellation1[c1i++],\r\n  },\r\n  constellation6: {\r\n    physShred: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"RosariaA1\")\r\nconst [condA4Path, condA4] = cond(key, \"RosariaA4\")\r\nconst [condC1Path, condC1] = cond(key, \"RosariaC1\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeA1CritInc = equal(condA1, \"on\", greaterEq(input.asc, 1, datamine.passive1.crInc))\r\nconst nodeA4CritBonusDisp = equal(condA4, \"on\",\r\n  greaterEq(input.asc, 4, min(\r\n    prod(percent(datamine.passive2.crBonus), input.premod.critRate_),\r\n    percent(datamine.passive2.maxBonus)\r\n  ))\r\n)\r\nconst nodeA4CritBonus = unequal(target.charKey, key, nodeA4CritBonusDisp)\r\n\r\nconst nodeC1AtkSpd = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.atkSpdInc))\r\nconst nodeC1NormalInc = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC6PhysShred = equal(condC6, \"on\", greaterEq(input.constellation, 6, -datamine.constellation6.physShred))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    hit1: dmgNode(\"atk\", datamine.skill.hit1, \"skill\"),\r\n    hit2: dmgNode(\"atk\", datamine.skill.hit2, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: dmgNode(\"atk\", datamine.burst.hit1, \"burst\"),\r\n    hit2: dmgNode(\"atk\", datamine.burst.hit2, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    critRate_: nodeA1CritInc,\r\n    atkSPD_: nodeC1AtkSpd,\r\n    normal_dmg_: nodeC1NormalInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_enemyRes_: nodeC6PhysShred\r\n    },\r\n    total: {\r\n      critRate_: nodeA4CritBonus\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.hit1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hit2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"hitOp.skill\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6PhysShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        // Hide for Rosaria\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA4CritBonusDisp, { key: \"critRate_\", isTeamBuff: true }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: st(\"hitOp.crit\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalInc\r\n            }, {\r\n              node: nodeC1AtkSpd,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sangonomiya_Kokomi_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c2SkillHeal = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\",\r\n    prod(percent(datamine.c2.s_heal_), input.total.hp)\r\n  )\r\n)\r\nconst c2BurstHeal = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\",\r\n    prod(percent(datamine.c2.nc_heal_), input.total.hp)\r\n  )\r\n)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, datamine.c4.atkSPD_)\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.c6.hydro_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    heal: healNodeTalent(\"hp\", datamine.skill.heal_, datamine.skill.heal, \"skill\",\r\n      { premod: { healInc: c2SkillHeal } }\r\n    )\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"hp\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"hp\", datamine.burst.heal_, datamine.burst.heal, \"burst\",\r\n      { premod: { healInc: c2BurstHeal } }\r\n    )\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.6\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.7\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"heal\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive: ct.talentTemplate(\"passive\", [{\r\n        fields: [{\r\n          node: passiveHeal_\r\n        }, {\r\n          node: passiveCritRate_\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c2SkillHeal, { key: `char_${key}:c2SkillHeal` }),\r\n            }, {\r\n              node: infoMut(c2BurstHeal, { key: `char_${key}:c2BurstHeal` }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [{ fields: [{ node: c4AtkSpd_ }] }]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sayu_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, min, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Sayu\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3x2\r\n      skillParam_gen.auto[4], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[5],\r\n    final: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n    duration: skillParam_gen.auto[8][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[9],\r\n    low: skillParam_gen.auto[10],\r\n    high: skillParam_gen.auto[11],\r\n  },\r\n  skill: {\r\n    wheelDmg: skillParam_gen.skill[s++],\r\n    eleWheelDmg: skillParam_gen.skill[s++],\r\n    kickPressDmg: skillParam_gen.skill[s++],\r\n    kickHoldDmg: skillParam_gen.skill[s++],\r\n    eleKickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cdMin: skillParam_gen.skill[s++][0],\r\n    cdMax: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    pressBaseHeal: skillParam_gen.burst[b++],\r\n    pressAtkHeal: skillParam_gen.burst[b++],\r\n    darumaDmg: skillParam_gen.burst[b++],\r\n    darumaBaseHeal: skillParam_gen.burst[b++],\r\n    darumaAtkHeal: skillParam_gen.burst[b++],\r\n    darumaHits: 7,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    baseHeal: skillParam_gen.passive1[0][0],\r\n    emHeal: skillParam_gen.passive1[1][0],\r\n    cd: skillParam_gen.passive1[2][0]\r\n  },\r\n  passive2: {\r\n    nearHeal: skillParam_gen.passive2[0][0]\r\n  },\r\n  constellation2: {\r\n    dmgInc: skillParam_gen.constellation2[0],\r\n    maxStacks: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    ener: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    darumaDmgInc: skillParam_gen.constellation6[0],\r\n    maxStacks: skillParam_gen.constellation6[1] / skillParam_gen.constellation6[0],\r\n    darumaHealInc: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst [condActiveSwirlPath, condActiveSwirl] = cond(key, \"activeSwirl\")\r\n\r\nconst [condC2SkillStackPath, condC2SkillStack] = cond(key, \"c2SkillStack\")\r\nconst c2_kickPressDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.dmgInc))\r\nconst c2_kickDmg_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2SkillStack,\r\n    Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [\r\n      stack,\r\n      prod(stack, percent(datamine.constellation2.dmgInc))\r\n    ])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c6_daruma_dmg_inc = greaterEq(input.constellation, 6,\r\n  prod(\r\n    min(input.total.eleMas, datamine.constellation6.maxStacks),\r\n    datamine.constellation6.darumaDmgInc,\r\n    input.total.atk\r\n  )\r\n)\r\nconst c6_daruma_heal_inc = greaterEq(input.constellation, 6,\r\n  prod(min(input.total.eleMas, datamine.constellation6.maxStacks), datamine.constellation6.darumaHealInc)\r\n)\r\n// Using customHealNode so I can have healInc\r\nconst darumaHeal = customHealNode(sum(\r\n  prod(\r\n    subscript(input.total.burstIndex, datamine.burst.darumaAtkHeal, { key: \"_\" }),\r\n    input.total.atk,\r\n  ),\r\n  subscript(input.total.burstIndex, datamine.burst.darumaBaseHeal),\r\n  c6_daruma_heal_inc,\r\n))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    wheelDmg: dmgNode(\"atk\", datamine.skill.wheelDmg, \"skill\"),\r\n    kickPressDmg: dmgNode(\"atk\", datamine.skill.kickPressDmg, \"skill\",\r\n      { premod: { skill_dmg_: sum(c2_kickDmg_, c2_kickPressDmg_) } }),\r\n    kickHoldDmg: dmgNode(\"atk\", datamine.skill.kickHoldDmg, \"skill\",\r\n      { premod: { skill_dmg_: c2_kickDmg_ } }),\r\n    eleWheelDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleWheelDmg, \"skill\", { hit: { ele: constant(eleKey) } })\r\n    ])), naught),\r\n    eleKickDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleKickDmg, \"skill\",\r\n        { hit: { ele: constant(eleKey) }, premod: { skill_dmg_: c2_kickDmg_ } })\r\n    ])), naught)\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    pressHeal: healNodeTalent(\"atk\", datamine.burst.pressAtkHeal, datamine.burst.pressBaseHeal, \"burst\"),\r\n    darumaDmg: dmgNode(\"atk\", datamine.burst.darumaDmg, \"burst\",\r\n      { premod: { burst_dmgInc: c6_daruma_dmg_inc } }),\r\n    darumaHeal\r\n  },\r\n  passive1: {\r\n    heal: greaterEq(input.asc, 1, equal(condActiveSwirl, \"activeSwirl\",\r\n      customHealNode(\r\n        sum(datamine.passive1.baseHeal, prod(datamine.passive1.emHeal, input.total.eleMas))\r\n      )\r\n    ))\r\n  },\r\n  passive2: {\r\n    extraHeal: greaterEq(input.asc, 4, prod(darumaHeal, percent(datamine.passive2.nearHeal)))\r\n  }\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.wheelDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.kickPressDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.kickHoldDmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: `${datamine.skill.cdMin}s ~ ${datamine.skill.cdMax}`,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.eleWheelDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.eleKickDmg, { key: `char_${key}_gen:skill.skillParams.4` })\r\n          }]\r\n        }]))\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(c2_kickPressDmg_, { key: `char_${key}:c2KickPressDmg_` })\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2SkillStack,\r\n        path: condC2SkillStackPath,\r\n        name: trm(\"c2Cond\"),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [stack, {\r\n          name: st(\"seconds\", { count: stack * 0.5 }),\r\n          fields: [{\r\n            node: infoMut(c2_kickDmg_, { key: `char_${key}:c2KickDmg_` })\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.pressHeal, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.darumaDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.darumaHeal, { key: `char_${key}_gen:burst.skillParams.3` })\r\n        }, {\r\n          text: trm(\"burstHits\"),\r\n          value: datamine.burst.darumaHits,\r\n        }]\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.extraHeal, { key: `char_${key}:p2Heal`, variant: \"heal\" })\r\n        }, {\r\n          text: trm(\"p2Aoe\")\r\n        }]\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"c1Text\")\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(c6_daruma_dmg_inc, { key: `char_${key}:c6DarumaDmgInc`, variant: \"anemo\" })\r\n        }, {\r\n          node: infoMut(c6_daruma_heal_inc, { key: `char_${key}:c6DarumaHealInc`, variant: \"heal\" })\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condActiveSwirl,\r\n        path: condActiveSwirlPath,\r\n        name: trm(\"p1Swirl\"),\r\n        states: {\r\n          activeSwirl: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.passive1.heal, { key: `sheet_gen:healing` })\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.passive1.cd,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          text: trm(\"c4Ener\"),\r\n          value: datamine.constellation4.ener,\r\n          fixed: 1\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation4.cd,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\")\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Shenhe_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.total.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeAsc1 = equal(input.activeCharKey, target.charKey, nodeAsc1Disp)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2Disp = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeC2 = equal(input.activeCharKey, target.charKey, nodeC2Disp)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: trm(\"pressDuration\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: trm(\"pressQuota\"),\r\n          value: datamine.skill.trigger,\r\n        }, {\r\n          text: st(\"pressCD\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: trm(\"holdDuration\"),\r\n          value: datamine.skill.durationHold,\r\n          unit: \"s\"\r\n        }, {\r\n          text: trm(\"holdQuota\"),\r\n          value: datamine.skill.triggerHold,\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 1,\r\n          text: st(\"charges\"),\r\n          value: 2\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        teamBuff: true,\r\n        value: condQuill,\r\n        path: condQuillPath,\r\n        name: trm(\"quill\"),\r\n        states: {\r\n          quill: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condAsc4,\r\n        path: condAsc4Path,\r\n        teamBuff: true,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          press: {\r\n            name: st(\"press\"),\r\n            fields: [{\r\n              node: nodeAsc4Press_skill_dmg_\r\n            }, {\r\n              node: nodeAsc4Press_burst_dmg_\r\n            }]\r\n          },\r\n          hold: {\r\n            name: st(\"hold\"),\r\n            fields: [{\r\n              node: nodeAsc4Hold_normal_dmg_\r\n            }, {\r\n              node: nodeAsc4Hold_charged_dmg_\r\n            }, {\r\n              node: nodeAsc4Hold_plunging_dmg_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"addlCharges\"),\r\n          value: 1\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n          name: i.toString(),\r\n          fields: [{ node: c4Inc }]\r\n        }))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          text: tr(\"constellation6.description\")\r\n        }],\r\n        teamBuff: true\r\n      }),\r\n      ]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          burst: {\r\n            fields: [{\r\n              node: nodeBurstCryo_enemyRes_\r\n            }, {\r\n              node: nodeBurstPhysical_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n          value: condAsc1,\r\n          path: condAsc1Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            field: {\r\n              fields: [{\r\n                node: infoMut(nodeAsc1Disp, { key: \"cryo_dmg_\", variant: \"cryo\" }) // Jank\r\n              }]\r\n            }\r\n          }\r\n        }), ct.headerTemplate(\"constellation2\", {\r\n          fields: [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.durationInc,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(nodeC2Disp, { key: \"cryo_critDMG_\", variant: \"cryo\" })\r\n        }],\r\n        teamBuff: true,\r\n       }),\r\n      ]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './banner.png'\r\nimport burst from './burst.png'\r\nimport card from './characterCard.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './icon.png'\r\nimport thumbSide from './iconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"ShikanoinHeizou\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 4.3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    declension_dmg_: skillParam_gen.skill[s++],\r\n    conviction_dmg_: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    declension_duration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    slugger_dmg: skillParam_gen.burst[b++],\r\n    iris_dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    eleMas: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  passive3: {\r\n    staminaSprintDec_: 0.25,\r\n  },\r\n  constellation1: {\r\n    duration: skillParam_gen.constellation1[0],\r\n    atkSpd_: skillParam_gen.constellation1[1],\r\n    cd: skillParam_gen.constellation1[2],\r\n  },\r\n  constellation4: {\r\n    baseEnergy: skillParam_gen.constellation4[0],\r\n    addlEnergy: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    hsCritRate_: skillParam_gen.constellation6[0],\r\n    hsCritDmg_: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst stacksArr = range(1, 4)\r\nconst [condDeclensionStacksPath, condDeclensionStacks] = cond(key, \"declensionStacks\")\r\nconst declension_dmg_ = lookup(\r\n  condDeclensionStacks,\r\n  Object.fromEntries(stacksArr.map(stacks => [\r\n    stacks,\r\n    prod(\r\n      subscript(input.total.skillIndex, datamine.skill.declension_dmg_, { key: \"sheet:bonusScaling.skill_\" }),\r\n      constant(stacks, { key: `char_${key}:declensionStacks` })\r\n    )\r\n  ])), naught, { key: \"sheet:bonusScaling.skill_\" })\r\nconst conviction_dmg_ = equal(condDeclensionStacks, \"4\",\r\n  subscript(input.total.skillIndex, datamine.skill.conviction_dmg_, { key: \"_\" }),\r\n  { key: \"sheet:bonusScaling.skill_\" }\r\n)\r\nconst totalStacks_dmg_ = sum(declension_dmg_, conviction_dmg_)\r\n\r\nconst [condSkillHitPath, condSkillHit] = cond(key, \"skillHit\")\r\nconst a4_eleMasDisp = greaterEq(input.asc, 4,\r\n  equal(condSkillHit, \"on\", datamine.passive2.eleMas)\r\n)\r\nconst a4_eleMas = unequal(target.charKey, key, a4_eleMasDisp)\r\n\r\n// TODO: After non-stacking buffs\r\n// const staminaSprintDec_ = percent(datamine.passive3.staminaSprintDec_)\r\n\r\nconst [condTakeFieldPath, condTakeField] = cond(key, \"takeField\")\r\nconst c1_atkSpd_ = greaterEq(input.constellation, 1, equal(condTakeField, \"on\", percent(datamine.constellation1.atkSpd_)))\r\n\r\nconst c6_skill_critRate_ = greaterEq(input.constellation, 6, lookup(\r\n  condDeclensionStacks,\r\n  Object.fromEntries(stacksArr.map(stacks => [\r\n    stacks,\r\n    prod(\r\n      percent(datamine.constellation6.hsCritRate_),\r\n      constant(stacks, { key: `char_${key}:declensionStacks` })\r\n    )\r\n  ])),\r\n  naught\r\n))\r\nconst c6_skill_critDMG_ = greaterEq(input.constellation, 6,\r\n  equal(condDeclensionStacks, \"4\", percent(datamine.constellation6.hsCritDmg_))\r\n)\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.skillIndex, datamine.skill.dmg, { key: \"_\" }),\r\n          totalStacks_dmg_\r\n        ),\r\n        input.total.atk\r\n      ),\r\n      \"skill\",\r\n      { hit: { ele: constant(\"anemo\") } }\r\n    )\r\n  },\r\n  burst: {\r\n    slugger_dmg: dmgNode(\"atk\", datamine.burst.slugger_dmg, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(ele => [\r\n      `${ele}_iris_dmg`,\r\n      dmgNode(\"atk\", datamine.burst.iris_dmg, \"burst\", { hit: { ele: constant(ele) } })\r\n    ]))\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    atkSPD_: c1_atkSpd_,\r\n    skill_critRate_: c6_skill_critRate_,\r\n    skill_critDMG_: c6_skill_critDMG_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      // TODO: after non-stacking buffs\r\n      // staminaSprintDec_\r\n      eleMas: a4_eleMas,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(\r\n            dmgFormulas.normal[i],\r\n            { key: `char_${key}_gen:auto.skillParams.${i > 2 ? (i < 6 ? 3 : 4) : i}` }\r\n          ),\r\n          textSuffix: (i > 2 && i < 6) ? `(${i - 2})` : undefined,\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        path: condDeclensionStacksPath,\r\n        value: condDeclensionStacks,\r\n        name: trm(\"declensionStacks\"),\r\n        states: Object.fromEntries(stacksArr.map(stacks => [\r\n          stacks,\r\n          {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: infoMut(totalStacks_dmg_, { key: \"sheet:bonusScaling.skill_\" })\r\n            }, {\r\n              canShow: (data) => data.get(condDeclensionStacks).value === \"4\",\r\n              text: st(\"aoeInc\"),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.skill.declension_duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        path: condSkillHitPath,\r\n        value: condSkillHit,\r\n        name: st(\"hitOp.skill\"),\r\n        teamBuff: true,\r\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(a4_eleMasDisp, { key: \"eleMas\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: c6_skill_critRate_\r\n        }, {\r\n          node: c6_skill_critDMG_\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.slugger_dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, ...absorbableEle.map(ele => ({\r\n          node: infoMut(dmgFormulas.burst[`${ele}_iris_dmg`], { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        })), {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"/* TODO: after non-stacking buffs, [{ fields: [{ node: staminaSprintDec_ }] }]*/),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        path: condTakeFieldPath,\r\n        value: condTakeField,\r\n        name: trm(\"takingField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c1_atkSpd_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation1.cd,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sucrose_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(key, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(key, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(key, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Disp = greaterEq(input.asc, 1, datamine.passive1.eleMas)\r\nconst asc1 = unequal(target.charKey, key, // Not applying to Sucrose\r\n  equal(target.charEle, condSwirlReaction, asc1Disp)) // And element matches the swirl\r\nconst asc4Disp = equal(\"hit\", condSkillHitOpponent,\r\n  greaterEq(input.asc, 4,\r\n    prod(percent(datamine.passive2.eleMas_), input.premod.eleMas)))\r\nconst asc4 = unequal(target.charKey, key, asc4Disp)\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 1,\r\n          text: st(\"charges\"),\r\n          value: 2\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? `${datamine.burst.duration}s + 2`\r\n            : datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", { // Absorption\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }]\r\n        }]))\r\n      }), ct.conditionalTemplate(\"constellation6\", { // Absorption teambuff for C6\r\n        teamBuff: true,\r\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: Object.values(c6Bonus).map(n => ({ node: n }))\r\n        }]))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: unequal(condAbsorption, undefined, 1),\r\n        fields: Object.values(c6Bonus).map(n => ({ node: n }))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        // Hide for Sucrose\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(asc1Disp, { key: \"eleMas\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: infoMut(asc4Disp, { key: \"eleMas\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Tartaglia_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tartaglia\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst region: Region = \"snezhnaya\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  riptide: {\r\n    flashDmg: skillParam_gen.auto[a++],\r\n    burstDmg: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  riptideDuration: skillParam_gen.auto[a++][0],\r\n  skill: {\r\n    stanceDmg: skillParam_gen.skill[s++],\r\n    normal1: skillParam_gen.skill[s++],\r\n    normal2: skillParam_gen.skill[s++],\r\n    normal3: skillParam_gen.skill[s++],\r\n    normal4: skillParam_gen.skill[s++],\r\n    normal5: skillParam_gen.skill[s++],\r\n    normal61: skillParam_gen.skill[s++], // 6.1\r\n    normal62: skillParam_gen.skill[s++], // 6.2\r\n    charged1: skillParam_gen.skill[s++],\r\n    charged2: skillParam_gen.skill[s++],\r\n    riptideSlash: skillParam_gen.skill[s++],\r\n    chargedStamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    preemptiveCd1: skillParam_gen.skill[s++][0],\r\n    preemptiveCd2: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    meleeDmg: skillParam_gen.burst[b++],\r\n    riptideBlastDmg: skillParam_gen.burst[b++],\r\n    rangedDmg: skillParam_gen.burst[b++],\r\n    enerReturned: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    durationExt: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive: {\r\n    auto_boost: 1,\r\n  },\r\n  constellation1: {\r\n    cdRed: 0.2\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('hydro') } }),\r\n    flashDmg: dmgNode(\"atk\", datamine.riptide.flashDmg, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    burstDmg: dmgNode(\"atk\", datamine.riptide.burstDmg, \"normal\", { hit: { ele: constant('hydro') } })\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stanceDmg: dmgNode(\"atk\", datamine.skill.stanceDmg, \"skill\"),\r\n    normal1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal1), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal2), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal3: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal3), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal4: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal4), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal5: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal5), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal61: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal61), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal62: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal62), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    charged1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged1), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    charged2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged2), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    riptideSlash: dmgNode(\"atk\", datamine.skill.riptideSlash, \"skill\")\r\n  },\r\n  burst: {\r\n    meleeDmg: dmgNode(\"atk\", datamine.burst.meleeDmg, \"burst\"),\r\n    rangedDmg: dmgNode(\"atk\", datamine.burst.rangedDmg, \"burst\"),\r\n    riptideBlastDmg: dmgNode(\"atk\", datamine.burst.riptideBlastDmg, \"burst\")\r\n  }\r\n}\r\n\r\nconst nodePassive = constant(1)\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    bonus: {\r\n      auto: nodePassive,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.riptide\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.flashDmg, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n          textSuffix: st(\"brHits\", { count: 3 })\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.burstDmg, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.10\"),\r\n          value: (data) => data.get(input.asc).value >= 1\r\n            ? datamine.passive1.durationExt + datamine.riptideDuration\r\n            : datamine.riptideDuration,\r\n          unit: \"s\"\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.stanceDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal3, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal4, { key: `char_${key}_gen:skill.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal5, { key: `char_${key}_gen:skill.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal61, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal62, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.charged1, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.charged2, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(constant(datamine.skill.chargedStamina), { key: `char_${key}_gen:skill.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.riptideSlash, { key: `char_${key}_gen:skill.skillParams.9` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.10\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.11\"),\r\n          value: (data) => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.preemptiveCd1 - (datamine.skill.preemptiveCd1 * datamine.constellation1.cdRed)}\r\n            - ${datamine.skill.preemptiveCd2 - (datamine.skill.preemptiveCd2 * datamine.constellation1.cdRed)}`\r\n            : `${datamine.skill.preemptiveCd1} - ${datamine.skill.preemptiveCd2}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.12\"),\r\n          value: (data) => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.maxCd - (datamine.skill.maxCd * datamine.constellation1.cdRed)}`\r\n            : `${datamine.skill.maxCd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.meleeDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.rangedDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.riptideBlastDmg, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerReturned}`,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\", [ct.headerTemplate(\"passive3\", {\r\n        teamBuff: true,\r\n        fields: [{ node: nodePassive }]\r\n      })]),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Thoma_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Thoma\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    hpShield_: skillParam_gen.skill[s++],\r\n    baseShield: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    maxHpShield_: skillParam_gen.skill[s++],\r\n    maxBaseShield: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    collapseDmg: skillParam_gen.burst[b++],\r\n    hpShield_: skillParam_gen.burst[b++],\r\n    baseShield: skillParam_gen.burst[b++],\r\n    shieldDuration: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++][0],\r\n    scorchingDuration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: skillParam_gen.passive1[2][0],\r\n    cd: skillParam_gen.passive1[3][0]\r\n  },\r\n  passive2: {\r\n    collapse_dmgInc: skillParam_gen.passive2[0][0],\r\n  },\r\n  c2: {\r\n    burstDuration: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    energyRestore: skillParam_gen.constellation4[0],\r\n  },\r\n  c6: {\r\n    auto_dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condP1BarrierStacksPath, condP1BarrierStacks] = cond(key, \"p1BarrierStacks\")\r\n// This should technically only apply to the active character, but I am trying\r\n// to minimize the amount of jank active character fixes.\r\nconst p1_shield_ = greaterEq(input.asc, 1,\r\n  lookup(condP1BarrierStacks, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n    stacks,\r\n    constant(stacks * datamine.passive1.shield_)\r\n  ])), naught)\r\n)\r\n\r\nconst p2Collapse_dmgInc = greaterEq(input.asc, 4, prod(input.total.hp, datamine.passive2.collapse_dmgInc))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\n\r\nconst [condC6AfterBarrierPath, condC6AfterBarrier] = cond(key, \"c6AfterBarrier\")\r\nconst c6_normal_dmg_ = greaterEq(input.constellation, 6,\r\n  equal(condC6AfterBarrier, \"on\", datamine.c6.auto_dmg)\r\n)\r\nconst c6_charged_dmg_ = { ...c6_normal_dmg_ }\r\nconst c6_plunging_dmg_ = { ...c6_normal_dmg_ }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    minShield: shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\"),\r\n    minPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\")),\r\n    maxShield: shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\"),\r\n    maxPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\")),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    collapseDmg: dmgNode(\"atk\", datamine.burst.collapseDmg, \"burst\",\r\n      { premod: { burst_dmgInc: p2Collapse_dmgInc } }\r\n    ),\r\n    shield: shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\"),\r\n    pyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\")),\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: p1_shield_,\r\n      normal_dmg_: c6_normal_dmg_,\r\n      charged_dmg_: c6_charged_dmg_,\r\n      plunging_dmg_: c6_plunging_dmg_,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.minShield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.minPyroShield,\r\n            { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n          ),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.maxShield, { key: `char_${key}:maxShield` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.maxPyroShield,\r\n            { key: `char_${key}:maxPyroShield`, variant: elementKey }\r\n          ),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.pyroShield,\r\n            { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n          ),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.shieldDuration,\r\n          unit: \"s\",\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.collapseDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? `${datamine.burst.scorchingDuration}s + ${datamine.c2.burstDuration}s = ${datamine.burst.scorchingDuration + datamine.c2.burstDuration}`\r\n            : datamine.burst.scorchingDuration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1BarrierStacks,\r\n        path: condP1BarrierStacksPath,\r\n        name: trm(\"a1\"),\r\n        teamBuff: true,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n          stacks,\r\n          {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: p1_shield_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: st(\"triggerCD\"),\r\n              value: datamine.passive1.cd,\r\n              unit: \"s\",\r\n              fixed: 1\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(p2Collapse_dmgInc, { key: `char_${key}:a2`, variant: elementKey }),\r\n        }]\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: trm(\"c2\"),\r\n          value: datamine.c2.burstDuration,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4AfterBurst,\r\n        path: condC4AfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"energyRegen\"),\r\n              value: datamine.c4.energyRestore,\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6AfterBarrier,\r\n        path: condC6AfterBarrierPath,\r\n        name: trm(\"c6\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6_normal_dmg_,\r\n            }, {\r\n              node: c6_charged_dmg_,\r\n            }, {\r\n              node: c6_plunging_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Tighnari_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, min, naught, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tighnari\"\r\nconst elementKey: ElementKey = \"dendro\"\r\nconst region: Region = \"sumeru\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    wreathArrow: skillParam_gen.auto[a++],\r\n    clusterArrow: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    fieldDuration: skillParam_gen.skill[s++][0],\r\n    penetratorDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    primaryDmg: skillParam_gen.burst[b++],\r\n    secondaryDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    charged_burst_dmg_: skillParam_gen.passive2[p2++][0],\r\n    maxDmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    charged_critRate_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    dendro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    eleMas: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0],\r\n    dmg: skillParam_gen.constellation6[1],\r\n    chargeTimeRed: 0.9\r\n  }\r\n} as const\r\n\r\nconst [condA1AfterWreathPath, condA1AfterWreath] = cond(key, \"p1AfterWreath\")\r\nconst a1AfterWreath_eleMas = greaterEq(input.asc, 1, equal(condA1AfterWreath, \"on\", datamine.passive1.eleMas))\r\n\r\nconst a4_charged_dmg_ = greaterEq(input.asc, 4, min(\r\n  prod(percent(datamine.passive2.charged_burst_dmg_, { fixed: 2 }), input.total.eleMas),\r\n  percent(datamine.passive2.maxDmg_)\r\n))\r\nconst a4_burst_dmg_ = { ...a4_charged_dmg_ }\r\nconst chargedShaftAddl: Data = {\r\n  hit: { ele: constant(elementKey) },\r\n}\r\n\r\nconst c1_charged_critRate_ = greaterEq(input.constellation, 1, datamine.constellation1.charged_critRate_)\r\n\r\nconst [condC2EnemyFieldPath, condC2EnemyField] = cond(key, \"c2EnemyField\")\r\nconst c2EnemyField_dendro_dmg_ = greaterEq(input.constellation, 2, equal(condC2EnemyField, \"on\", datamine.constellation2.dendro_dmg_))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_eleMas = greaterEq(input.constellation, 4, lookup(condC4, {\r\n  after: constant(datamine.constellation4.eleMas),\r\n  react: constant(datamine.constellation4.eleMas * 2)\r\n}, naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", chargedShaftAddl),\r\n    wreath: dmgNode(\"atk\", datamine.charged.wreathArrow, \"charged\", chargedShaftAddl),\r\n    cluster: dmgNode(\"atk\", datamine.charged.clusterArrow, \"charged\", chargedShaftAddl),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    primaryDmg: dmgNode(\"atk\", datamine.burst.primaryDmg, \"burst\"),\r\n    secondaryDmg: dmgNode(\"atk\", datamine.burst.secondaryDmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    charged_dmg_: a4_charged_dmg_,\r\n    burst_dmg_: a4_burst_dmg_,\r\n  },\r\n  constellation6: {\r\n    cluster: greaterEq(input.constellation, 6, customDmgNode(\r\n      prod(percent(datamine.constellation6.dmg), input.total.atk),\r\n      \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }\r\n    ))\r\n  }\r\n}\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  premod: {\r\n    eleMas: a1AfterWreath_eleMas,\r\n    charged_dmg_: a4_charged_dmg_,\r\n    burst_dmg_: a4_burst_dmg_,\r\n    charged_critRate_: c1_charged_critRate_,\r\n    dendro_dmg_: c2EnemyField_dendro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: c4_eleMas,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : undefined,\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.wreath, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.cluster, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        path: condA1AfterWreathPath,\r\n        value: condA1AfterWreath,\r\n        name: trm(\"p1Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: a1AfterWreath_eleMas\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: c1_charged_critRate_,\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          text: trm(\"c6WreathRed\"),\r\n          value: datamine.constellation6.chargeTimeRed,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation6.cluster, { key: `char_${key}:c6DmgKey` })\r\n        }]\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.fieldDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.penetratorDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation2\", {\r\n        path: condC2EnemyFieldPath,\r\n        value: condC2EnemyField,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c2EnemyField_dendro_dmg_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.primaryDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.secondaryDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.energyCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        path: condC4Path,\r\n        value: condC4,\r\n        teamBuff: true,\r\n        name: \"\",\r\n        states: {\r\n          after: {\r\n            name: st(\"afterUse.burst\"),\r\n            fields: [{\r\n              node: c4_eleMas\r\n            }]\r\n          },\r\n          react: {\r\n            name: trm(\"c4ReactCond\"),\r\n            fields: [{\r\n              node: c4_eleMas\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: a4_charged_dmg_,\r\n        }, {\r\n          node: a4_burst_dmg_,\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../CharacterSheet'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { objectKeyValueMap } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, skillAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    initial_dmg: skillParam_gen.skill[s++],\r\n    initial_max: skillParam_gen.skill[s++],\r\n    storm_dmg: skillParam_gen.skill[s++],\r\n    storm_max: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: 0.6,\r\n  },\r\n  passive2: {\r\n    heal_: 0.02,\r\n  },\r\n  constellation2: {\r\n    enerRech_: 0.16,\r\n  },\r\n  constellation6: {\r\n    enemyRes_: -0.2\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, `${elementKey}BurstAbsorption`)\r\nconst nodeC2 = greaterEq(input.constellation, 2, datamine.constellation2.enerRech_)\r\nconst [condC6Path, condC6] = cond(key, `${elementKey}C6Hit`)\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.enemyRes_))\r\nconst nodesC6 = objectKeyValueMap(absorbableEle, ele => [`${ele}_enemyRes_`, greaterEq(input.constellation, 6, equal(condC6, \"on\", equal(condBurstAbsorption, ele, datamine.constellation6.enemyRes_)))])\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    initial_dmg: dmgNode(\"atk\", datamine.skill.initial_dmg, \"skill\"),\r\n    initial_max: dmgNode(\"atk\", datamine.skill.initial_max, \"skill\"),\r\n    storm_dmg: dmgNode(\"atk\", datamine.skill.storm_dmg, \"skill\"),\r\n    storm_max: dmgNode(\"atk\", datamine.skill.storm_max, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(input.total.atk, datamine.passive1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n  passive2: {\r\n    heal: greaterEq(input.asc, 2, customHealNode(prod(percent(datamine.passive2.heal_), input.total.hp))),\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: nodeC2,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...nodesC6,\r\n      anemo_enemyRes_: nodeC6,\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.initial_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.initial_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.storm_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.storm_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.maxCd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        text: trm(\"c1\"),\r\n        value: 10,\r\n        unit: \"%\"\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }),\r\n        }]\r\n      }]))\r\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 anemo\r\n      value: condC6,\r\n      path: condC6Path,\r\n      teamBuff: true,\r\n      name: trm(\"c6\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(nodeC6, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"constellation6\", { // C6 elemental self-display\r\n      canShow: unequal(condBurstAbsorption, undefined, equal(condC6, \"on\", equal(target.charKey, key, 1))),\r\n      fields: absorbableEle.map(eleKey => (\r\n        { node: nodesC6[`${eleKey}_enemyRes_`] }\r\n      ))\r\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 elemental team-display\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      teamBuff: true,\r\n      canShow: equal(condC6, \"on\", unequal(input.activeCharKey, key, 1)),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: nodesC6[`${eleKey}_enemyRes_`]\r\n        }]\r\n      }]))\r\n    })]),\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:${elementKey}.p1` })\r\n      }]\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.heal, { key: `sheet_gen:healing` })\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2 }] }]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\nexport default talentSheet\r\n","import { TalentSheetElementKey } from '../../CharacterSheet'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport talentAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"dendro\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    lampDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    unknown1: skillParam_gen.burst[b++],\r\n    unknown2: skillParam_gen.burst[b++],\r\n    lampDuration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[0][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    skill_dmgInc: skillParam_gen.passive2[0][0],\r\n    burst_dmgInc: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: 1\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condA1StacksPath, condA1Stacks] = cond(key, \"a1Stacks\")\r\nconst a1StacksArr = range(1, datamine.passive1.maxStacks)\r\nconst a1_eleMas_disp = greaterEq(input.asc, 1,\r\n  lookup(condA1Stacks, Object.fromEntries(a1StacksArr.map(stack => [\r\n    stack,\r\n    prod(datamine.passive1.eleMas, stack)\r\n  ])), naught),\r\n  { key: \"eleMas\" }\r\n)\r\nconst a1_eleMas = equal(input.activeCharKey, target.charKey, a1_eleMas_disp)\r\n\r\nconst a4_skill_dmg_ = greaterEq(input.asc, 4,\r\n  prod(percent(datamine.passive2.skill_dmgInc, { fixed: 2 }), input.total.eleMas),\r\n  { key: \"_\" }\r\n)\r\nconst a4_burst_dmg_ = greaterEq(input.asc, 4,\r\n  prod(percent(datamine.passive2.burst_dmgInc), input.total.eleMas),\r\n  { key: \"_\" }\r\n)\r\n\r\nconst [condC6BurstEffectPath, condC6BurstEffect] = cond(key, \"c6BurstEffect\")\r\nconst [condC6BurstElePath, condC6BurstEle] = cond(key, \"c6BurstEle\")\r\nconst c6_dendro_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condC6BurstEffect, \"on\", percent(datamine.constellation6.ele_dmg_))\r\n)\r\nconst c6_dendro_dmg_ = equal(input.activeCharKey, target.charKey, c6_dendro_dmg_disp)\r\nconst c6_ele_dmg_disp = Object.fromEntries([\"hydro\", \"pyro\", \"electro\"].map(ele => [\r\n  ele,\r\n  greaterEq(input.constellation, 6,\r\n    equal(condC6BurstEffect, \"on\",\r\n      equal(condC6BurstEle, ele, percent(datamine.constellation6.ele_dmg_))\r\n    )\r\n  )\r\n]))\r\nconst c6_ele_dmg_ = Object.entries(c6_ele_dmg_disp).map(([ele, node]) => [\r\n  `${ele}_dmg_`,\r\n  equal(input.activeCharKey, target.charKey, node)\r\n])\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    lampDmg: dmgNode(\"atk\", datamine.burst.lampDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\")\r\n  }\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_: a4_skill_dmg_,\r\n    burst_dmg_: a4_burst_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: a1_eleMas,\r\n      dendro_dmg_: c6_dendro_dmg_,\r\n      ...c6_ele_dmg_,\r\n    },\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.lampDmg,\r\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }\r\n        )\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg,\r\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }\r\n        )\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.lampDuration}s + ${datamine.constellation2.durationInc}s = ${datamine.burst.lampDuration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.lampDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      path: condA1StacksPath,\r\n      value: condA1Stacks,\r\n      teamBuff: true,\r\n      name: st(\"stacks\"),\r\n      states: Object.fromEntries(a1StacksArr.map(stack => [\r\n        stack,\r\n        {\r\n          name: st(\"stack\", { count: stack }),\r\n          fields: [{\r\n            node: a1_eleMas_disp\r\n          }]\r\n        }\r\n      ])),\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation2.durationInc,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      path: condC6BurstEffectPath,\r\n      value: condC6BurstEffect,\r\n      teamBuff: true,\r\n      name: st(\"activeCharField\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c6_dendro_dmg_disp, { key: \"dendro_dmg_\", variant: \"dendro\", isTeamBuff: true }),\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      path: condC6BurstElePath,\r\n      value: condC6BurstEle,\r\n      teamBuff: true,\r\n      canShow: equal(condC6BurstEffect, \"on\", 1),\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(Object.entries(c6_ele_dmg_disp).map(([ele, node]) => [\r\n        ele, {\r\n          name: <ColorText color={ele}>{sgt(`element.${ele}`)}</ColorText>,\r\n          fields: [{ node: infoMut(node, { key: `${ele}_dmg_`, variant: ele as ElementKey, isTeamBuff: true }) }],\r\n        }\r\n      ]))\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: a4_skill_dmg_,\r\n      }, {\r\n        node: a4_burst_dmg_,\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { TalentSheetElementKey } from '../../CharacterSheet'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { cond, sgt } from '../../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport talentAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    energyRestore: skillParam_gen.skill[s++],\r\n    amulets: 2,\r\n    amuletDuration: skillParam_gen.skill[s++][0],\r\n    enerRech_: skillParam_gen.skill[s++][0],\r\n    enerRech_duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    thunderDmg: skillParam_gen.burst[b++],\r\n    thunderCd: 0.5,\r\n    energyRestore: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerRech_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    addlAmulets: 1\r\n  },\r\n  constellation2: {\r\n    duration: skillParam_gen.constellation2[0],\r\n    electro_enemyRes: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation6: {\r\n    numAttacks: skillParam_gen.constellation6[0],\r\n    thunder_dmg_: skillParam_gen.constellation6[0],\r\n    energyRestore: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAmuletPath, condSkillAmulet] = cond(key, `${elementKey}SkillAmulet`)\r\nconst p2_enerRech_ = greaterEq(input.asc, 4,\r\n  prod(input.premod.enerRech_, percent(datamine.passive2.enerRech_))\r\n)\r\nconst skillAmulet_enerRech_Disp = equal(condSkillAmulet, \"on\",\r\n  sum(\r\n    percent(datamine.skill.enerRech_),\r\n    p2_enerRech_\r\n  )\r\n)\r\nconst skillAmulet_enerRech_ = equal(input.activeCharKey, target.charKey, skillAmulet_enerRech_Disp)\r\n\r\nconst burstEnergyRestore = subscript(input.total.burstIndex, datamine.burst.energyRestore,\r\n  { key: `char_${key}_gen:${elementKey}.burst.skillParmas.2` }\r\n)\r\n\r\nconst [condC2ThunderPath, condC2Thunder] = cond(key, `${elementKey}C2Thunder`)\r\nconst c2Thunder_electro_enemyRes_ = greaterEq(input.constellation, 2,\r\n  equal(condC2Thunder, \"on\", datamine.constellation2.electro_enemyRes)\r\n)\r\n\r\nconst [condC6After2ThunderPath, condC6After2Thunder] = cond(key, `${elementKey}C6After2Thunder`)\r\nconst c6_thunder_dmg_ = greaterEq(input.constellation, 6, equal(condC6After2Thunder, \"on\", datamine.constellation6.thunder_dmg_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    thunderDmg: dmgNode(\"atk\", datamine.burst.thunderDmg, \"burst\",\r\n      { premod: { burst_dmg_: c6_thunder_dmg_ } })\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: c2Thunder_electro_enemyRes_,\r\n    },\r\n    total: {\r\n      enerRech_: skillAmulet_enerRech_ // In total to avoid loops\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` })\r\n      }, {\r\n        text: trm(\"skill.amuletGenAmt\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? datamine.skill.amulets + datamine.constellation1.addlAmulets\r\n          : datamine.skill.amulets\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.amuletDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n        fixed: 1\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      value: condSkillAmulet,\r\n      path: condSkillAmuletPath,\r\n      name: trm(\"skill.absorb\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: subscript(input.total.skillIndex, datamine.skill.energyRestore,\r\n              { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }\r\n            )\r\n          }, {\r\n            node: infoMut(skillAmulet_enerRech_Disp, { key: \"enerRech_\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.skill.enerRech_duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: tr(\"passive1.description\")\r\n      }]\r\n    }), ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(p2_enerRech_, { key: `char_${key}:${elementKey}.passive2.enerRech_` })\r\n      }]\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg,\r\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }\r\n        )\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.thunderDmg,\r\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }\r\n        )\r\n      }, {\r\n        text: trm(\"burst.thunderCd\"),\r\n        value: datamine.burst.thunderCd,\r\n        unit: \"s\",\r\n        fixed: 1\r\n      }, {\r\n        node: infoMut(burstEnergyRestore, { key: `char_${key}_gen:${elementKey}.burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2Thunder,\r\n      path: condC2ThunderPath,\r\n      name: trm(\"c2.thunderHit\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: c2Thunder_electro_enemyRes_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6After2Thunder,\r\n      path: condC6After2ThunderPath,\r\n      name: trm(\"c6.fallingThunder3\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c6_thunder_dmg_,\r\n              { key: `char_${key}:${elementKey}.c6.fallingThunderBonus_`, variant: \"electro\" }\r\n            )\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.constellation6.energyRestore\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { TalentSheetElementKey } from '../../CharacterSheet'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport talentAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    numShockwaves: 4,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    skill_cdRed: 2\r\n  },\r\n  passive2: {\r\n    geoDmg: percent(0.6),\r\n  },\r\n  constellation1: {\r\n    critRate_: percent(0.1),\r\n  },\r\n  constellation4: {\r\n    energyRestore: 5,\r\n    maxTriggers: 5\r\n  },\r\n  constellation6: {\r\n    burstDuration: 5,\r\n    skillDuration: 10\r\n  }\r\n} as const\r\n\r\nconst [condC1BurstAreaPath, condC1BurstArea] = cond(key, `${elementKey}C1BurstArea`)\r\nconst c1BurstArea_critRate_Disp = greaterEq(input.constellation, 1,\r\n  equal(condC1BurstArea, \"on\", datamine.constellation1.critRate_)\r\n)\r\nconst c1BurstArea_critRate_ = equal(input.activeCharKey, target.charKey, c1BurstArea_critRate_Disp)\r\n\r\nconst [condC4BurstHitPath, condC4BurstHit] = cond(key, `${elementKey}C4BurstHit`)\r\nconst c4Burst_energyRestore = lookup(condC4BurstHit,\r\n  Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n    stack,\r\n    constant(stack * datamine.constellation4.energyRestore)\r\n  ])),\r\n  naught\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: customDmgNode(\r\n      prod(input.total.atk, datamine.passive2.geoDmg), \"elemental\", { hit: { ele: constant(\"geo\") } }\r\n    )\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: c1BurstArea_critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 6\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation6.skillDuration}s = ${datamine.skill.duration + datamine.constellation6.skillDuration}`\r\n          : datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: data => data.get(input.asc).value >= 1\r\n          ? `${datamine.skill.cd}s - ${datamine.passive1.skill_cdRed}s = ${datamine.skill.cd - datamine.passive1.skill_cdRed}`\r\n          : datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }, ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.skill_cdRed,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:${elementKey}.c2.key` }),\r\n      }]\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.skillDuration,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg,\r\n          { key: `sheet_gen:skillDMG` }\r\n        ),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.numShockwaves })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 6\r\n          ? `${datamine.burst.duration}s + ${datamine.constellation6.burstDuration}s = ${datamine.burst.duration + datamine.constellation6.burstDuration}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation1\", {\r\n      value: condC1BurstArea,\r\n      path: condC1BurstAreaPath,\r\n      name: st(\"activeCharField\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c1BurstArea_critRate_Disp, { key: \"critRate_\" }),\r\n          }, {\r\n            text: st(\"incInterRes\"),\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      value: condC4BurstHit,\r\n      path: condC4BurstHitPath,\r\n      name: st(\"hitOp.burst\"),\r\n      states: Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n        stack,\r\n        {\r\n          name: st(\"hits\", { count: stack }),\r\n          fields: [{\r\n            node: infoMut(c4Burst_energyRestore, { key: \"sheet:energyRegen\" }),\r\n          }]\r\n        }\r\n      ]))\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.burstDuration,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:${elementKey}.passive2.key` })\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { CharacterData } from 'pipeline'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\r\nimport anemo, { data as anemoData } from './anemo'\r\nimport data_gen_src from './data_gen.json'\r\nimport dendro, { data as dendroData } from './dendro'\r\nimport electro, { data as electroData } from './electro'\r\nimport geo, { data as geoData } from './geo'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport card from './Traveler_Female_Card.jpg'\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Traveler\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  rarity: data_gen.star,\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"F/M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talents: {\r\n    anemo,\r\n    geo,\r\n    electro,\r\n    dendro,\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, {\r\n  anemo: anemoData,\r\n  geo: geoData,\r\n  electro: electroData,\r\n  dendro: dendroData,\r\n});\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Venti_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { reactions } from '../../../Formula/reaction'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Venti\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1x2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDmg: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    baseDmg: skillParam_gen.burst[b++],\r\n    baseTicks: 20,\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    absorbTicks: 15,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0]\r\n  },\r\n  // No real p3/constellation datamine values :(\r\n  passive3: {\r\n    stam_: 0.20,\r\n  },\r\n  constellation1: {\r\n    dmgRatio: 0.33,\r\n  },\r\n  constellation2: {\r\n    res_: -0.12,\r\n    duration: 10,\r\n  },\r\n  constellation4: {\r\n    anemo_dmg_: 0.25,\r\n    duration: 10,\r\n  },\r\n  constellation6: {\r\n    res_: -0.20,\r\n    duration: 10, // From KQM\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2, {\r\n    \"hit\": constant(datamine.constellation2.res_),\r\n    \"launched\": prod(datamine.constellation2.res_, 2)\r\n  },\r\n    naught\r\n  )\r\n)\r\nconst c2Hit_phys_enemyRes__ = { ...c2Hit_anemo_enemyRes_ }\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\r\n  datamine.constellation4.anemo_dmg_))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6_anemo_enemyRes_ = greaterEq(input.constellation, 6, equal(condC6, \"takeDmg\", datamine.constellation6.res_))\r\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\r\n  `${ele}_enemyRes_`,\r\n  greaterEq(input.constellation, 6, equal(condC6, \"takeDmg\", equal(ele, condBurstAbsorption, datamine.constellation6.res_)))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\r\n    absorb: unequal(condBurstAbsorption, undefined, dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } })),\r\n    full7: unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 7)\r\n    )),\r\n    full14: unequal(condBurstAbsorption, \"hydro\", unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 14)\r\n    )))\r\n  },\r\n  constellation1: {\r\n    aimed: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\"\r\n      )\r\n    ),\r\n    fully: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\", { hit: { ele: constant(elementKey) } }\r\n      )\r\n    ),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    anemo_dmg_: c4_anemo_dmg_,\r\n    staminaGlidingDec_: p3_staminaGlidingDec_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\r\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\r\n      ...c6_ele_enemyRes_arr,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          text: trm(\"upcurrentDuration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: tr(\"constellation2.name\"),\r\n        states: {\r\n          hit: {\r\n            name: trm(\"c2.hit\"),\r\n            fields: [{\r\n              node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }, {\r\n              node: c2Hit_phys_enemyRes__\r\n            }]\r\n          },\r\n          launched: {\r\n            name: trm(\"c2.launched\"),\r\n            fields: [{\r\n              node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }, {\r\n              node: c2Hit_phys_enemyRes__\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n            textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\r\n          }]\r\n        }]))\r\n      }), ct.headerTemplate(\"burst\", { // Custom burst formula\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.full7, { key: `char_${key}:fullBurstDMG.dmg7`, variant: \"physical\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.full14, { key: `char_${key}:fullBurstDMG.dmg14`, variant: \"physical\" }),\r\n        }],\r\n        canShow: unequal(condBurstAbsorption, undefined, 1),\r\n      }), {\r\n        text: trm(\"fullBurstDMG.description\"),\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: trm(\"regenEner\"),\r\n        }, {\r\n          text: trm(\"q\"),\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation6\", { // C6 Anemo\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          takeDmg: {\r\n            fields: [{\r\n              node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation6\", { // C6 elemental self-display\r\n        fields: absorbableEle.map(eleKey => (\r\n          { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\r\n        )),\r\n        canShow: unequal(condBurstAbsorption, undefined,\r\n          equal(condC6, \"takeDmg\",\r\n            equal(target.charKey, key, 1)\r\n          )\r\n        ),\r\n      }), ct.conditionalTemplate(\"constellation6\", { // C6 elemental team-display\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        teamBuff: true,\r\n        canShow: equal(condC6, \"takeDmg\", unequal(input.activeCharKey, key, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\", [{ fields: [{ node: p3_staminaGlidingDec_ }] }]),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [\r\n        ct.conditionalTemplate(\"constellation4\", {\r\n          value: condC4,\r\n          path: condC4Path,\r\n          name: trm(\"c4\"),\r\n          states: {\r\n            pickup: {\r\n              fields: [{\r\n                node: c4_anemo_dmg_,\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xiangling_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg))\r\n)\r\nconst antiC6 = prod(duringPyronado, -1)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation1\", {\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              text: trm(\"c6Exception\"),\r\n              canShow: data => data.get(input.constellation).value >= 6\r\n                && data.get(condDuringPyronado).value === \"duringPyronado\"\r\n            }, {\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          value: datamine.constellation2.dmg,\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xiao_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiao\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[2], // 2\r\n      skillParam_gen.auto[3], // 3\r\n      skillParam_gen.auto[4], // 4\r\n      skillParam_gen.auto[6], // 5\r\n      skillParam_gen.auto[7], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[8], // 1\r\n    stamina: skillParam_gen.auto[9][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[10],\r\n    low: skillParam_gen.auto[11],\r\n    high: skillParam_gen.auto[12],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n    drain: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmgBonus: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[0][0],\r\n    skillDmgBonus: skillParam_gen.passive2[1][0],\r\n    maxStacks: skillParam_gen.passive2[2][0],\r\n  },\r\n  passive3: {\r\n    staminaClimbingDec_: 0.20,\r\n  },\r\n  constellation2: {\r\n    enerRech_: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: skillParam_gen.constellation4[0],\r\n    def_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\r\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\r\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\r\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\r\n\r\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\r\nconst a1BurstStackArr = range(0, 4)\r\nconst all_dmg_ = equal(\"inBurst\", condInBurst,\r\n  lookup(condA1BurstStack,\r\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\r\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\r\nconst skill_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4SkillStack,\r\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c2Inactive = greaterEq(input.constellation, 2,\r\n  unequal(input.activeCharKey, key, 1)\r\n)\r\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\r\n\r\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\r\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    plunging_dmg_,\r\n    all_dmg_,\r\n    skill_dmg_,\r\n    enerRech_: c2Inactive_enerRech_,\r\n    def_: c4BelowHP_def_,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: st(\"charges\"),\r\n          value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", { // A4\r\n        path: condA4SkillStackPath,\r\n        value: condA4SkillStack,\r\n        name: trm(\"skillStack\"),\r\n        states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\r\n          name: st(\"uses\", { count: i }),\r\n          fields: [{ node: skill_dmg_ }]\r\n        }]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\r\n        }, {\r\n          node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\r\n          textSuffix: trm(\"burst.currentHPPerSec\"),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        path: condInBurstPath,\r\n        value: condInBurst,\r\n        name: trm(\"burst.inBurst\"),\r\n        states: {\r\n          inBurst: {\r\n            fields: [{\r\n              node: normal_dmg_,\r\n            }, {\r\n              node: charged_dmg_,\r\n            }, {\r\n              node: plunging_dmg_,\r\n            }, {\r\n              text: trm(\"burst.incJump\"),\r\n            }, {\r\n              text: trm(\"burst.incAtkAoe\"),\r\n            }, {\r\n              canShow: data => data.get(infusion).value === elementKey,\r\n              text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", { // A1\r\n        path: condA1BurstStackPath,\r\n        value: condA1BurstStack,\r\n        name: trm(\"burst.stack\"),\r\n        canShow: equal(\"inBurst\", condInBurst, 1),\r\n        states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\r\n          name: st(\"seconds\", { count: i * 3 }),\r\n          fields: [{ node: all_dmg_ }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        canShow: equal(c2Inactive, 1, 1),\r\n        teamBuff: true,\r\n        fields: [{ node: c2Inactive_enerRech_ }],\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        path: condC4BelowHPPath,\r\n        value: condC4BelowHP,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\r\n        states: {\r\n          c4BelowHP: {\r\n            fields: [{ node: c4BelowHP_def_ }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xingqiu_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum, one } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.premod.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    // Multiplicative DMG increase requires customDmgNode\r\n    press1: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit1, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(one, nodeC4)\r\n    ), \"skill\"),\r\n    press2: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit2, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(one, nodeC4)\r\n    ), \"skill\"),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n            : `${datamine.skill.duration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: nodeA4\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xinyan_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xinyan\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[a++],\r\n    final: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    shieldArr: [\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n    ],\r\n    lvl3Dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressPhysDmg: skillParam_gen.burst[b++],\r\n    dotPyroDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    physical_dmg_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    atkSPD_: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    cd: skillParam_gen.constellation1[1],\r\n  },\r\n  c2: {\r\n    burstphysical_critRate_: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    physical_enemyRes_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  c6: {\r\n    staminaChargedDec_: -skillParam_gen.constellation6[0],\r\n    charged_atkBonus: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillHitNumPath, condSkillHitNum] = cond(key, \"skillHitNum\")\r\n\r\nconst [condP2ShieldPath, condP2Shield] = cond(key, \"p2Shield\")\r\nconst p2Shield_physical_dmg_Disp = greaterEq(input.asc, 4, equal(condP2Shield, \"on\", datamine.passive2.physical_dmg_))\r\nconst p2Shield_physical_dmg_ = equal(input.activeCharKey, target.charKey, p2Shield_physical_dmg_Disp)\r\n\r\nconst [condC1CritPath, condC1Crit] = cond(key, \"c1Crit\")\r\nconst c1Crit_atkSPD_ = greaterEq(input.constellation, 1, equal(condC1Crit, \"on\", datamine.c1.atkSPD_))\r\n\r\nconst c2BurstPhysical_critRate_ = greaterEq(input.constellation, 2, datamine.c2.burstphysical_critRate_)\r\n\r\nconst [condC4SkillHitPath, condC4SkillHit] = cond(key, \"c4Burst\")\r\nconst c4SkillHit_physical_enemyRes_ = greaterEq(input.constellation, 4, equal(condC4SkillHit, \"on\", datamine.c4.physical_enemyRes_))\r\n\r\nconst c6_staminaChargedDec_ = greaterEq(input.constellation, 6, datamine.c6.staminaChargedDec_)\r\nconst [condC6ChargedPath, condC6Charged] = cond(key, \"c6Charged\")\r\nconst c6_chargedAtkBonus = greaterEq(input.constellation, 6,\r\n  equal(condC6Charged, \"on\",\r\n    prod(input.total.def, percent(datamine.c6.charged_atkBonus))\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `normShield${i + 1}`,\r\n      shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"),\r\n    ])),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `pyroShield${i + 1}`,\r\n      shieldElement(elementKey, shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"))\r\n    ])),\r\n    lvl3Dmg: dmgNode(\"atk\", datamine.skill.lvl3Dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressPhysDmg: dmgNode(\"atk\", datamine.burst.pressPhysDmg, \"burst\", {\r\n      hit: { ele: constant(\"physical\") },\r\n      premod: {\r\n        burst_critRate_: c2BurstPhysical_critRate_,\r\n      }\r\n    }),\r\n    dotPyroDmg: dmgNode(\"atk\", datamine.burst.dotPyroDmg, \"burst\"),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_dmg_: p2Shield_physical_dmg_,\r\n      physical_enemyRes_: c4SkillHit_physical_enemyRes_,\r\n    }\r\n  },\r\n  premod: {\r\n    atkSPD_: c1Crit_atkSPD_,\r\n    staminaChargedDec_: c6_staminaChargedDec_,\r\n    atk: c6_chargedAtkBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }],\r\n      }, ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: c6_staminaChargedDec_\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Charged,\r\n        path: condC6ChargedPath,\r\n        name: trm(\"c6.duringCharge\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6_chargedAtkBonus\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillHitNum,\r\n        path: condSkillHitNumPath,\r\n        name: trm(\"skill.shieldLevel\"),\r\n        states: Object.fromEntries(range(1, 3).map(lvl => [ // For each level\r\n          lvl, {\r\n            name: trm(`skill.shieldLevels.${lvl}`),\r\n            fields: [\r\n              ...([\"norm\", \"pyro\"] as const).flatMap(type => ([{ // For each type of shield\r\n                node: infoMut(dmgFormulas.skill[`${type}Shield${lvl}`], // Make the node\r\n                  {\r\n                    key: type === \"norm\" // And change the key to match\r\n                      ? `char_${key}_gen:skill.skillParams.${lvl}`\r\n                      : `char_${key}:skill.pyroShield.${lvl}`\r\n                  }\r\n                )\r\n              },\r\n              ])), {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.skill.duration,\r\n                unit: \"s\",\r\n              },\r\n              // Level 3 damage\r\n              ...lvl === 3 ? [{ node: infoMut(dmgFormulas.skill.lvl3Dmg, { key: `char_${key}_gen:skill.skillParams.4` }) }] : [],\r\n            ]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          text: trm(\"p1.desc\"),\r\n        }]\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condP2Shield,\r\n        path: condP2ShieldPath,\r\n        name: trm(\"p2.activeShield\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(p2Shield_physical_dmg_Disp, { key: \"physical_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4SkillHit,\r\n        path: condC4SkillHitPath,\r\n        name: trm(\"c4.swingHit\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c4SkillHit_physical_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.c4.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressPhysDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dotPyroDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(c2BurstPhysical_critRate_, { key: `char_${key}:c2.key_` }),\r\n        }, {\r\n          text: trm(\"c2.shield\"),\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1Crit,\r\n        path: condC1CritPath,\r\n        name: st(\"hitOp.crit\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c1Crit_atkSPD_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.c1.duration,\r\n              unit: \"s\",\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.c1.cd,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yae_Miko_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_, { fixed: 2 })))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n        }],\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [{ fields: [{ node: nodeAsc4 }] }]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yanfei_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customShieldNode, dataObjForCharacterSheet, dmgNode, shieldElement } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Yanfei\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmgArr: [\r\n      skillParam_gen.auto[a++], // 0 seals\r\n      skillParam_gen.auto[a++], // 1 seal\r\n      skillParam_gen.auto[a++], // 2 seals\r\n      skillParam_gen.auto[a++], // 3 seals\r\n      skillParam_gen.auto[a++], // 4 seals\r\n    ],\r\n    unknown: {\r\n      arr: [\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n      ]\r\n    },\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    sealStaminaRed_: skillParam_gen.auto[a++][0],\r\n    maxSeals: 3,\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  sealDuration: skillParam_gen.auto[a++][0],\r\n  // There is another unknown here for auto\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    cd: skillParam_gen.skill[1][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    charged_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    sealInterval: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    seal_pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    dmg: percent(skillParam_gen.passive2[0][0])\r\n  },\r\n  c1: {\r\n    sealStaminaRed_: skillParam_gen.constellation1[0]\r\n  },\r\n  c2: {\r\n    hpThresh: skillParam_gen.constellation2[0],\r\n    charged_critRate_: skillParam_gen.constellation2[1]\r\n  },\r\n  c4: {\r\n    hpShield_: skillParam_gen.constellation4[0],\r\n    duration: 15,\r\n  },\r\n  c6: {\r\n    extraSeals: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_charged_dmg_ = equal(condAfterBurst, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.charged_dmg_)\r\n)\r\n\r\nconst [condP1SealsPath, condP1Seals] = cond(key, \"p1Seals\")\r\nconst p1_pyro_dmg_ = greaterEq(input.asc, 1,\r\n  // TODO: Should be changing number of seals shown based on C6\r\n  lookup(condP1Seals, Object.fromEntries(range(1, 4).map(seals => [\r\n    seals,\r\n    prod(seals, datamine.passive1.seal_pyro_dmg_)\r\n  ])), naught)\r\n)\r\n\r\nconst [condP2ChargedCritPath, condP2ChargedCrit] = cond(key, \"p2ChargedCrit\")\r\n\r\nconst [condC2EnemyHpPath, condC2EnemyHp] = cond(key, \"c2EnemyHp\")\r\nconst c2EnemyHp_critRate_ = greaterEq(input.constellation, 2,\r\n  equal(condC2EnemyHp, \"on\", datamine.c2.charged_critRate_)\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: Object.fromEntries(datamine.charged.dmgArr.map((arr, i) =>\r\n    [i, i < 4\r\n      ? dmgNode(\"atk\", arr, \"charged\")\r\n      : greaterEq(input.constellation, 6, dmgNode(\"atk\", arr, \"charged\"))\r\n    ])),\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, equal(condP2ChargedCrit, \"on\",\r\n      customDmgNode(prod(input.total.atk, datamine.passive2.dmg), \"charged\")\r\n    ))\r\n  },\r\n  constellation4: {\r\n    pyro_shield: greaterEq(input.constellation, 4,\r\n      shieldElement(elementKey, customShieldNode(prod(input.total.hp, datamine.c4.hpShield_)))\r\n    ),\r\n    norm_shield: greaterEq(input.constellation, 4,\r\n      customShieldNode(prod(input.total.hp, datamine.c4.hpShield_))\r\n    ),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: afterBurst_charged_dmg_,\r\n    charged_critRate_: c2EnemyHp_critRate_,\r\n    pyro_dmg_: p1_pyro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [\r\n          // TODO: Would probably be better as a conditional,\r\n          // but can't make conditional states based on constellation value\r\n          ...datamine.charged.dmgArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.charged[i], { key: `char_${key}:charged.${i}` }),\r\n          })), {\r\n            text: tr(\"auto.skillParams.4\"),\r\n            // TODO: Should change this value based on how many seals, but can't do without conditional\r\n            // charged attack. And its a bit execssive.\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            text: st(\"staminaDec_\"),\r\n            value: datamine.charged.sealStaminaRed_ * 100,\r\n            textSuffix: trm(\"perSeal\"),\r\n            unit: \"%\",\r\n          }, {\r\n            text: trm(\"maxSeals\"),\r\n            value: data => data.get(input.constellation).value >= 6\r\n              ? datamine.charged.maxSeals + datamine.c6.extraSeals\r\n              : datamine.charged.maxSeals,\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.sealDuration,\r\n            unit: \"s\"\r\n          }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1Seals,\r\n        path: condP1SealsPath,\r\n        name: trm(\"passive1.sealsConsumed\"),\r\n        // TODO: Should be changing number of seals shown based on C6\r\n        states: Object.fromEntries(range(1, 4).map(seals => [\r\n          seals, {\r\n            name: trm(`seals.${seals}`),\r\n            fields: [{\r\n              node: p1_pyro_dmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condP2ChargedCrit,\r\n        path: condP2ChargedCritPath,\r\n        name: trm(\"passive2.chargedCrit\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2.key` })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"c1.sealChargedStam_\"),\r\n          value: datamine.c1.sealStaminaRed_ * -100,\r\n          textSuffix: trm(\"perSeal\"),\r\n          unit: \"%\"\r\n        }, {\r\n          text: st(\"incInterRes\")\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2EnemyHp,\r\n        path: condC2EnemyHpPath,\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.c2.hpThresh * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c2EnemyHp_critRate_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          text: trm(\"c6.maxSealInc\"),\r\n          value: datamine.c6.extraSeals\r\n        }]\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: trm(\"burst.grantMax\")\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.sealInterval,\r\n              unit: \"s\"\r\n            }, {\r\n              node: afterBurst_charged_dmg_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.norm_shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.pyro_shield, { key: `sheet:dmgAbsorption.${elementKey}` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.c4.duration,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yelan_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Yelan\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    barb: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    resetChance: skillParam_gen.skill[s++][0],\r\n    maxDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    throwDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    hp_Arr: [0, ...skillParam_gen.passive1.map(([a]) => a)],\r\n  },\r\n  passive2: {\r\n    baseDmg_: skillParam_gen.passive2[0][0],\r\n    stackDmg_: skillParam_gen.passive2[1][0],\r\n    maxDmg_: skillParam_gen.passive2[2][0],\r\n    maxStacks: 14,\r\n  },\r\n  constellation1: {\r\n    addlCharge: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    arrowDmg_: skillParam_gen.constellation2[0],\r\n    cd: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    bonusHp_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n    maxHp_: skillParam_gen.constellation4[2],\r\n    maxStacks: 4,\r\n  },\r\n  constellation6: {\r\n    charges: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    dmg_: skillParam_gen.constellation6[2],\r\n  }\r\n}\r\n\r\nconst a1_hp_ = greaterEq(input.asc, 1, subscript(tally.ele, datamine.passive1.hp_Arr))\r\n\r\nconst [condA4StacksPath, condA4Stacks] = cond(key, \"a4Stacks\")\r\nconst a4Stacks = range(0, datamine.passive2.maxStacks)\r\nconst a4Dmg_Disp = greaterEq(input.asc, 4,\r\n  lookup(condA4Stacks, Object.fromEntries(a4Stacks.map(stacks => [\r\n    stacks,\r\n    sum(percent(datamine.passive2.baseDmg_), prod(stacks, percent(datamine.passive2.stackDmg_)))\r\n  ])),\r\n    naught)\r\n)\r\nconst a4Dmg = equal(target.charKey, input.activeCharKey, a4Dmg_Disp)\r\n\r\nconst [condC4StacksPath, condC4Stacks] = cond(key, \"c4Stacks\")\r\nconst c4Stacks = range(1, datamine.constellation4.maxStacks)\r\nconst c4Hp_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4Stacks, Object.fromEntries(c4Stacks.map(stacks => [\r\n    stacks,\r\n    prod(stacks, percent(datamine.constellation4.bonusHp_))\r\n  ])),\r\n    naught)\r\n)\r\n\r\nconst [condC6ActivePath, condC6Active] = cond(key, \"c6Active\")\r\nconst c6Active = greaterEq(input.constellation, 6, equal(condC6Active, \"on\", 1))\r\n\r\nconst hitEle = { hit: { ele: constant(elementKey) } }\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, unequal(c6Active, 1, dmgNode(\"atk\", arr, \"normal\"))])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", hitEle),\r\n    barb: dmgNode(\"hp\", datamine.charged.barb, \"charged\", hitEle),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"hp\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"hp\", datamine.burst.pressDmg, \"burst\"),\r\n    throwDmg: dmgNode(\"hp\", datamine.burst.throwDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    arrowDmg: greaterEq(input.constellation, 2, customDmgNode(\r\n      prod(\r\n        percent(datamine.constellation2.arrowDmg_),\r\n        input.total.hp\r\n      ),\r\n      \"burst\",\r\n      hitEle\r\n    ))\r\n  },\r\n  constellation6: {\r\n    barbDmg: equal(c6Active, 1, customDmgNode(\r\n      prod(\r\n        subscript(input.total.autoIndex, datamine.charged.barb, { key: \"_\" }),\r\n        percent(datamine.constellation6.dmg_),\r\n        input.total.hp\r\n      ),\r\n      \"charged\",\r\n      hitEle\r\n    )),\r\n  },\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  premod: {\r\n    hp_: a1_hp_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_: a4Dmg,\r\n      hp_: c4Hp_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        canShow: unequal(c6Active, 1, 1),\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        path: condC6ActivePath,\r\n        value: condC6Active,\r\n        name: trm(\"c6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.constellation6.barbDmg, { key: `char_${key}:c6.dmg` }),\r\n            }, {\r\n              text: st(\"charges\"),\r\n              value: datamine.constellation6.charges,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.breakthrough`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.barb, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.maxDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 1,\r\n          text: st(\"charges\"),\r\n          value: 2\r\n        }]\r\n      }, ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"addlCharge\"),\r\n          value: datamine.constellation1.addlCharge,\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        path: condC4StacksPath,\r\n        value: condC4Stacks,\r\n        teamBuff: true,\r\n        name: trm(\"c4.condName\"),\r\n        states: Object.fromEntries(c4Stacks.map(stacks => [\r\n          stacks,\r\n          {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: c4Hp_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        ]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.throwDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        path: condA4StacksPath,\r\n        value: condA4Stacks,\r\n        teamBuff: true,\r\n        name: st(\"afterUse.burst\"),\r\n        states: Object.fromEntries(a4Stacks.map(stack => [\r\n          stack,\r\n          {\r\n            name: st(\"seconds\", { count: stack }),\r\n            fields: [{\r\n              node: infoMut(a4Dmg_Disp, { key: \"all_dmg_\" }),\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.arrowDmg, { key: `char_${key}:c2.dmg` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation2.cd,\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: a1_hp_\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yoimiya_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { compareEq, constant, equal, greaterEq, infoMut, lookup, one, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/fieldDisplay'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\nconst ct = charTemplates(characterKey, data_gen.weaponTypeKey, talentAssets)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], //x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3], //x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: skillParam_gen.skill[1][0],\r\n    cd: skillParam_gen.skill[2][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0]\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condBurstPath, condBurst] = cond(characterKey, \"burst\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = compareEq(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_, { key: `char_${characterKey}:normMult_` }), one)\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = greaterEq(input.asc, 1, equal(condSkill, \"skill\", infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })))\r\nconst atk_ = greaterEq(input.asc, 4, equal(condBurst, \"on\", unequal(input.activeCharKey, characterKey,\r\n  sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) => [\r\n  i,\r\n  customDmgNode(\r\n    prod(subscript(input.total.autoIndex, arr, { key: \"_\" }), input.total.atk, normal_dmgMult),\r\n    \"normal\", {\r\n    hit: {\r\n      ele: compareEq(condSkill, \"skill\", elementKey, \"physical\")\r\n    }\r\n  })\r\n])\r\n\r\n// This might just need to be a single dmgNode of her kindling arrow, with proper scaling applied.\r\nconst kindlingEntries = datamine.normal.hitArr.map((arr, i) => [i, greaterEq(input.constellation, 6,\r\n  equal(condSkill, \"skill\",\r\n    customDmgNode(\r\n      prod(\r\n        subscript(input.total.autoIndex, arr, { key: \"_\" }),\r\n        constant(datamine.constellation6.dmg_, { key: `char_${characterKey}:c6Key_` }),\r\n        input.total.atk,\r\n        normal_dmgMult\r\n      ),\r\n      \"normal\", {\r\n      hit: {\r\n        ele: compareEq(condSkill, \"skill\", elementKey, \"physical\")\r\n      }\r\n    })\r\n  )\r\n)])\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n        }],\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        name: st(\"afterUse.skill\"),\r\n        path: condSkillPath,\r\n        value: condSkill,\r\n        states: {\r\n          skill: {\r\n            fields: [{\r\n              node: normal_dmgMult\r\n            }, {\r\n              text: trm(\"normPyroInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        // Conditional for self display\r\n        canShow: equal(condSkill, \"skill\", 1),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: tr(\"passive1.name\"),\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: `${i} stack`,\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }]\r\n        ))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: equal(condSkill, \"skill\", 1),\r\n        fields: datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: 60,\r\n        }]\r\n      }, ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation1.burst_durationInc,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation1\", {\r\n        name: trm(\"c1\"),\r\n        value: condC1,\r\n        path: condC1Path,\r\n        states: {\r\n          c1: {\r\n            fields: [{\r\n              node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: true,\r\n        // Hide for Yoimiya\r\n        canShow: unequal(input.activeCharKey, characterKey, 1),\r\n        path: condBurstPath,\r\n        value: condBurst,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        // Conditional from P1 for team buff display when P2 is activated\r\n        canShow: unequal(input.activeCharKey, characterKey,\r\n          equal(condBurst, \"on\", greaterEq(input.asc, 4, 1))\r\n        ),\r\n        teamBuff: true,\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: tr(\"passive1.name\"),\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: `${i} stack`,\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }]\r\n        ))\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        name: trm(\"c2\"),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: const3TalentInc }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: const5TalentInc }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\")\r\n    },\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, dataObj)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yun_Jin_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"def\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"def\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n          textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: data => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd * (1 - 0.18)).toFixed(2)}`\r\n            : `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2 }] }]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Zhongli_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n        }, {\r\n          text: trm(\"skill.maxStele\"),\r\n          value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n        }, {\r\n          text: st(\"pressCD\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.shileDuration,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        teamBuff: true,\r\n        name: trm(\"skill.nearShield\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesSkill).map(node => ({ node }))\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: data =>\r\n            data.get(input.constellation).value < 4 ?\r\n              datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n              `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n          fixed: 1,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1,\r\n        path: condP1Path,\r\n        teamBuff: true,\r\n        name: trm(\"p1cond\"),\r\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: p4normalDmgInc\r\n        }, {\r\n          node: p4ChargedDmgInc\r\n        }, {\r\n          node: p4PlungingDmgInc\r\n        }, {\r\n          node: p4SKillDmgInc\r\n        }, {\r\n          node: p4BurstDmgInc\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal` })\r\n        }]\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\nimport Albedo from './Albedo'\r\nimport Aloy from './Aloy'\r\nimport Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\nimport Barbara from './Barbara'\r\nimport Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\nimport Chongyun from './Chongyun'\r\nimport Collei from './Collei'\r\nimport Diluc from './Diluc'\r\nimport Diona from './Diona'\r\nimport Dori from './Dori'\r\nimport Eula from './Eula'\r\nimport Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\nimport Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\nimport Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\nimport Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport KamisatoAyato from './KamisatoAyato'\r\nimport Keqing from './Keqing'\r\nimport Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\nimport KukiShinobu from './KukiShinobu'\r\nimport Lisa from './Lisa'\r\nimport Mona from './Mona'\r\nimport Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\nimport Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\nimport Razor from './Razor'\r\nimport Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\nimport Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport ShikanoinHeizou from \"./ShikanoinHeizou\"\r\nimport Sucrose from \"./Sucrose\"\r\nimport Tartaglia from './Tartaglia'\r\nimport Thoma from './Thoma'\r\nimport Tighnari from './Tighnari'\r\nimport Traveler from './Traveler'\r\nimport Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\nimport Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\nimport Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\nimport Yanfei from './Yanfei'\r\nimport Yelan from './Yelan'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  Albedo,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Chongyun,\r\n  Collei,\r\n  Diluc,\r\n  Diona,\r\n  Dori,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  KamisatoAyato,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  KukiShinobu,\r\n  Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Shenhe,\r\n  ShikanoinHeizou,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Tighnari,\r\n  Traveler,\r\n  Venti,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yelan,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n"],"names":["talentAssets","constellation1","constellation2","constellation3","constellation4","constellation5","constellation6","skill","burst","passive1","passive2","passive3","data_gen","data_gen_src","key","trans","tr","trm","ct","charTemplates","weaponTypeKey","a","s","b","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skillDmg","blossomDmg","duration","cd","blossomCd","burstDmg","blossomAmt","enerCost","blossomDmgInc","hpThresh","eleMasInc","blossomEner","maxStacks","stackDuration","plunging_dmg_","bonus_dmg_","cond","condBurstBlossomPath","condBurstBlossom","condBurstUsedPath","condBurstUsed","p2Burst_eleMas","equal","greaterEq","input","condP1EnemyHpPath","condP1EnemyHp","p1_blossom_dmg_","condC2StacksPath","condC2Stacks","c2_burst_dmgInc","prod","lookup","Object","fromEntries","range","map","i","naught","condSkillInFieldPath","condSkillInField","c4_plunging_dmg_disp","c4_plunging_dmg_","target","condC6CrystallizePath","condC6Crystallize","c6_Crystal_all_dmg_disp","c6_Crystal_all_dmg_","dmgFormulas","arr","dmgNode","entries","value","blossom","total","skill_dmg_","skillC3","burstC5","data","dataObjForCharacterSheet","bonus","teamBuff","premod","eleMas","all_dmg_","burst_dmgInc","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","auto","talentTemplate","text","fields","_","node","infoMut","textSuffix","unit","sgt","conditionalTemplate","path","st","percent","states","belowHp","headerTemplate","fixed","skillInField","canShow","c6Crystallize","isoOnField","count","burstUsed","CharacterSheet","p1","p2","aimed","aimedCharged","freezeBombDmg","chillWaterBomblets","atkDecrease","atkDecreaseDuration","coilNormalDmgBonus1","coilNormalDmgBonus2","coilNormalDmgBonus3","rushingNormalDmgBonus","rushingDuration","atkInc","teamAtkInc","cryoDmgBonus","condCoilPath","condCoil","normal_dmg_","subscript","atk_","unequal","undefined","condA1Path","condA1","teamAtk_","condA4Path","condA4","cryo_dmg_","hit","ele","compareEq","constant","fieldsTemplate","inheritedHp","unknown","dmgPerWave","rainDmg","critRateInc","aoeInc","secArrowDmg","manualDetionationDmg","moveSpdInc","burst_critRate_","condC6Path","condC6","moveSPD_","secondAimed","secondAimedCharged","manualDetonationDmg","nodeC3","nodeC5","variant","get","on","sSlash","akSlash","akFinal","stam","ss","hp","ss_cd","atkSpd","defConv","resDec","cost","atkSPD_","def_","initialStacks","timedStacks","burstCdRed","energyRegen","charged_critDMG_","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","nodeBurstAtk","nodeBurstAtkSpd","allNodeBurstRes","allElementsWithPhy","nodeBurstInfusion","equalStr","nodeA4Bonus","nodeP1AtkSpd","nodeC2BurstRed","min","tally","nodeC2EnergyRegen","nodeC4Atk","nodeC4Def","nodeC6CritDMG","charged_dmgInc","atk","sum","infusion","nonOverridableSelf","values","cregen_hp_","cregen_hp","regen_hp_","regen_hp","hp_","ext","maxExt","cdDec","hydro_dmg_","condSkillPath","condSkill","nodeA1","nodeA1Display","condC2Path","condC2","nodeC2","nodeC2Display","regen","healNodeTalent","cregen","staminaDec_","spinningDmg","finalDmg","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","electroResShred_","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","electroShield","shieldElement","shieldNodeTalent","shield","baseDmg","dmgOneHit","dmgTwoHits","shieldNode","customDmgNode","customBonus","charged_dmg_","electro_enemyRes_","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","a1SkillCd","burstAtkRatio","burstAddlAtk","c1AtkRatio","c1AddlAtk","atkIncRatio","activeInAreaAtkDisp","condInAreaPath","condInArea","activeInArea","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","pyro_dmg_","team","enerRech_","calculateSkillCD","skillCD","cdFactor","result","spin_dmg","final_dmg","infusionDuration","fieldDuration","atk_spd","res","cdr","energy_regen","burst_dmg_","condAsc4Path","condAsc4","nodeAsc4","nodeAsc1Disp","nodeAsc1","correctWep","activeInAreaInfusion","nodeC6","cryo_enemyRes_","explosionDmg","leapDmg","sproutDmg","durationInc","maxExtension","anbarDmg","c1_enerRech_","condAfterBurstPath","condAfterBurst","c4AfterBurst_eleMasDisp","c4AfterBurst_eleMas","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","stamReduction","pyroInc","dmgInc","hpThresh_","atkSpdInc","maxStack","condC1Path","condC1","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","thirdHit","secondHitBoost","thirdHitBoost","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressCryoShield","pressShield","holdCryoShield","holdShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_Disp","nodeC6healing_","nodeC6emDisp","nodeC6em","incHeal_","lower","higher","shotDmg","roundDmg","numRounds","connectorDmg","healMult","cdRed","maxEnergyRegen","addlRounds","toopDmg","energyThresh","heal_","condC4BelowHpPath","condC4BelowHp","condC4BelowEnerPath","condC4BelowEner","c4BelowHp_incHeal_disp","c4BelowHp_incHeal_","c4BelowEner_enerRech_disp","c4BelowEner_enerRech_","condC6AfterSkillPath","condC6AfterSkill","c6AfterSkill_infusion","greaterEqStr","heal","customHealNode","burstC3","skillC5","overridableSelf","color","belowEner","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","physical_enemyRes_","physical_dmg_","lightSwordAdditional","lightFallSwordNew","objectKeyMap","shatteredLightfallSword","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","frostflake","frostflakeBloom","opCryoRes","enerRegen","cryo_dmg_disp","critRate_","fully","defInc","geo_dmg_","dmg_def","crystalDmg_def","crystalHits","skill_dmgInc","heal_def_","geo_critDMG_","condInFieldPath","condInField","skill1_defDisp","skill1_def","skill3_geo_dmg_Disp","skill3_geo_dmg_","afterBurst_def_","p2_skill_dmgInc","p2_burst_dmgInc","condAfterSkillBurstPath","condAfterSkillBurst","c6_geo_critDMG_","crystalCollapse","healNode","def","inField","afterBurst","afterSkillBurst","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","critRateTeam_1","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_disp","dmgRed_","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMasDisp","c2PEleMas","c6infusion","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","staminaSprintDec_","eleKey","c2","c2p","val","c6","healAtk_","cooldown","cryoShield","condC1Cryo","nodeC1NormalCritRate","nodeC1ChargeCritRate","normal_critRate_","charged_critRate_","sprint","sp","cutDmg","bloomDmg","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","cutting","bloom","enemyDefRed_","afterSkill","c4","afterSprint","afterApplySprint","dmgArr","stateDuration","stackHpDmgInc","illusionDmg","illusionDuration","stacksGained","enerThres_","energyRestore","oppHpThres_","shunDmg_","extraStacks","stackThresh","atkSPD","extraStrikes","condInSkillPath","condInSkill","condSkillStacksPath","condSkillStacks","skillStacks_dmgInc","stacks","condBurstInAreaPath","condBurstInArea","burst_normal_dmg_Disp","burst_normal_dmg_","condC1OppHpPath","condC1OppHp","c1Shun_dmg_","c2_hp_","condC4AfterBurstPath","condC4AfterBurst","c4_atkSPD_","shunAddl","normal_dmgInc","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","jumptyDumptyDmg1","jumptyDumptyDmg2","jumptyDumptyDmg3","mineDmg","mineDuration","dmg_","jumptyDumptyDmg","chainedReactionsDmg","sparklyExplosionDmg","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","x","skillTenguAmbush_disp","skillTenguAmbush_","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","pressDmg","ringHealHP_","ringHealFlat","ringDmg","singleDmg","maxDmgBase","maxDmgExtend","durationBase","durationExtend","emSkillHeal_","emSkillDmg_","skillDurInc","markDmg","em","a1Heal_","a4Skill_healInc","a4Skill_dmgInc","condC6TriggerPath","condC6Trigger","c6eleMas","ringHeal","healInc","totalDmg","stack0","stack1","stack2","stack3","holdCD","pressCD","tick","defShred","nodeA4DefShred","nodeC2DefIncrease","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodesC4","allElements","gemDmg","n","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC2ChargeDec","nodeC4dmg","devotionShield","staminaChargedDec_","hitRegenPercent","hitRegenFlat","contRegenPercent","contRegenFlat","tickDmg","castDmg","healPercent","nodeA1HealingBonus","nodeC2ChargedDmgInc","nodeC2NormalDmgInc","hitRegen","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","resolveStackNode","resolveInitialBonus_","resolveInfusedBonus_","burstResolve","mvArr","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","erBonus","companionDmg","atkSpdBonus","electroResBonus","enerThreshold","erInc","sprintStaminaDec","allDmgInc","defDec","electroSigilGenerated","condElectroSigilPath","condElectroSigil","condTheWolfWithinPath","condTheWolfWithin","enerRechElectroSigil_","electro_res_","enerRechA4_","companionDmg1","companionDmg2","companionDmg3","companionDmg4","fullBurstDmg1","fullBurstDmg2","fullBurstDmg3","fullBurstDmg4","c1i","crInc","crBonus","maxBonus","physShred","nodeA1CritInc","nodeA4CritBonusDisp","nodeA4CritBonus","nodeC1AtkSpd","nodeC1NormalInc","nodeC6PhysShred","isTeamBuff","nBonus_","cBonus_","sBonus_","p","heal_ratio_","c1","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c2SkillHeal","c2BurstHeal","c4AtkSpd_","c6Hydro_","spin","wheelDmg","eleWheelDmg","kickPressDmg","kickHoldDmg","eleKickDmg","cdMin","cdMax","pressBaseHeal","pressAtkHeal","darumaDmg","darumaBaseHeal","darumaAtkHeal","darumaHits","baseHeal","emHeal","nearHeal","ener","darumaDmgInc","darumaHealInc","condActiveSwirlPath","condActiveSwirl","condC2SkillStackPath","condC2SkillStack","c2_kickPressDmg_","c2_kickDmg_","stack","c6_daruma_dmg_inc","c6_daruma_heal_inc","darumaHeal","pressHeal","extraHeal","activeSwirl","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2Disp","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","field","declension_dmg_","conviction_dmg_","declension_duration","slugger_dmg","iris_dmg","atkSpd_","baseEnergy","addlEnergy","hsCritRate_","hsCritDmg_","stacksArr","condDeclensionStacksPath","condDeclensionStacks","totalStacks_dmg_","condSkillHitPath","condSkillHit","a4_eleMasDisp","a4_eleMas","condTakeFieldPath","condTakeField","c1_atkSpd_","c6_skill_critRate_","c6_skill_critDMG_","skill_critRate_","skill_critDMG_","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Disp","asc1","asc4Disp","c6Base","c6Bonus","slice","riptide","flashDmg","riptideDuration","stanceDmg","normal1","normal2","normal3","normal4","normal5","normal61","normal62","riptideSlash","chargedStamina","preemptiveCd1","preemptiveCd2","maxCd","meleeDmg","riptideBlastDmg","rangedDmg","enerReturned","durationExt","auto_boost","nodePassive","hpShield_","baseShield","maxHpShield_","maxBaseShield","collapseDmg","scorchingDuration","shield_","collapse_dmgInc","burstDuration","auto_dmg","condP1BarrierStacksPath","condP1BarrierStacks","p1_shield_","p2Collapse_dmgInc","condC6AfterBarrierPath","condC6AfterBarrier","c6_normal_dmg_","c6_charged_dmg_","c6_plunging_dmg_","minShield","minPyroShield","maxShield","maxPyroShield","pyroShield","wreathArrow","clusterArrow","penetratorDuration","primaryDmg","secondaryDmg","charged_burst_dmg_","maxDmg_","dendro_dmg_","chargeTimeRed","condA1AfterWreathPath","condA1AfterWreath","a1AfterWreath_eleMas","a4_charged_dmg_","a4_burst_dmg_","chargedShaftAddl","c1_charged_critRate_","condC2EnemyFieldPath","condC2EnemyField","c2EnemyField_dendro_dmg_","c4_eleMas","after","react","wreath","cluster","skillAssets","strKey","Translate","ns","key18","initial_dmg","initial_max","storm_dmg","storm_max","absorbDmg","nodesC6","objectKeyValueMap","absorb","talentSheet","lampDmg","unknown1","unknown2","lampDuration","condA1StacksPath","condA1Stacks","a1StacksArr","a1_eleMas_disp","a1_eleMas","a4_skill_dmg_","condC6BurstEffectPath","condC6BurstEffect","condC6BurstElePath","condC6BurstEle","c6_dendro_dmg_disp","c6_dendro_dmg_","c6_ele_dmg_disp","c6_ele_dmg_","amulets","amuletDuration","enerRech_duration","thunderDmg","thunderCd","addlAmulets","electro_enemyRes","numAttacks","thunder_dmg_","condSkillAmuletPath","condSkillAmulet","p2_enerRech_","skillAmulet_enerRech_Disp","skillAmulet_enerRech_","burstEnergyRestore","condC2ThunderPath","condC2Thunder","c2Thunder_electro_enemyRes_","condC6After2ThunderPath","condC6After2Thunder","c6_thunder_dmg_","numShockwaves","skill_cdRed","geoDmg","maxTriggers","skillDuration","condC1BurstAreaPath","condC1BurstArea","c1BurstArea_critRate_Disp","c1BurstArea_critRate_","condC4BurstHitPath","condC4BurstHit","c4Burst_energyRestore","talents","anemo","geo","electro","dendro","anemoData","geoData","electroData","dendroData","holdDmg","baseTicks","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","base","full7","reactions","full14","staminaGlidingDec_","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","antiC6","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","one","press2","healing","shieldArr","defShield_","lvl3Dmg","pressPhysDmg","dotPyroDmg","burstphysical_critRate_","charged_atkBonus","condSkillHitNumPath","condSkillHitNum","condP2ShieldPath","condP2Shield","p2Shield_physical_dmg_Disp","p2Shield_physical_dmg_","condC1CritPath","condC1Crit","c1Crit_atkSPD_","c2BurstPhysical_critRate_","condC4SkillHitPath","condC4SkillHit","c4SkillHit_physical_enemyRes_","c6_staminaChargedDec_","condC6ChargedPath","condC6Charged","c6_chargedAtkBonus","lvl","flatMap","type","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","sealStaminaRed_","maxSeals","sealDuration","sealInterval","seal_pyro_dmg_","extraSeals","afterBurst_charged_dmg_","condP1SealsPath","condP1Seals","p1_pyro_dmg_","seals","condP2ChargedCritPath","condP2ChargedCrit","condC2EnemyHpPath","condC2EnemyHp","c2EnemyHp_critRate_","pyro_shield","customShieldNode","norm_shield","barb","resetChance","maxDuration","throwDmg","hp_Arr","baseDmg_","stackDmg_","addlCharge","arrowDmg_","bonusHp_","maxHp_","charges","a1_hp_","condA4StacksPath","condA4Stacks","a4Stacks","a4Dmg_Disp","a4Dmg","condC4StacksPath","condC4Stacks","c4Stacks","c4Hp_","condC6ActivePath","condC6Active","c6Active","hitEle","arrowDmg","barbDmg","characterKey","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","const3TalentInc","const5TalentInc","normal_dmgMult","a1Stacks","c1atk_","c2pyro_dmg_","normalEntries","kindlingEntries","dataObj","includes","uiData","triggerNum","normalInc","toFixed","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","Albedo","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Chongyun","Collei","Diluc","Diona","Dori","Eula","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Keqing","Klee","KujouSara","KukiShinobu","Lisa","Mona","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","ShikanoinHeizou","Sucrose","Tartaglia","Thoma","Tighnari","Traveler","Venti","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yelan","Yoimiya","YunJin","Zhongli"],"sourceRoot":""}