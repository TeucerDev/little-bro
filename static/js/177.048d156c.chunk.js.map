{"version":3,"file":"static/js/177.048d156c.chunk.js","mappings":"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","sources":["Formula/reaction.ts","Data/Characters/dataUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/ForestRegalia/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/MakhairaAquamarine/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/KagotsurubeIsshin/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HaranGeppakuFutsu/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/KeyOfKhajNisut/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SapwoodBlade/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/XiphosMoonlight/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/MissiveWindspear/index.tsx","Data/Weapons/Polearm/Moonpiercer/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/StaffOfTheScarletSands/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/AquaSimulacra/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FadingTwilight/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/HuntersPath/index.tsx","Data/Weapons/Bow/KingsSquire/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/EndOfTheLine/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/AThousandFloatingDreams/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/FruitOfFulfillment/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WanderingEvenstar/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import KeyMap from \"../KeyMap\";\r\nimport { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../KeyMap/StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { infusionNode, input } from \"./index\";\r\nimport { constant, data, equal, frac, infoMut, lookup, naught, one, percent, prod, subscript, sum } from \"./utils\";\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers, KeyMap.info(\"crystallize_level_multi\"))\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(\r\n  infoMut(sum(one, /** + Crystallize bonus */ crystallizeElemas), { pivot: true, ...KeyMap.info(\"base_crystallize_multi\") }),\r\n  crystallizeMulti1),\r\n  KeyMap.info(\"crystallize\"))\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers, KeyMap.info(\"transformative_level_multi\"))\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap(Object.keys(transformativeReactions), reaction => {\r\n    const { multi, resist } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      prod(constant(multi, KeyMap.info(`${reaction}_multi`)), transMulti1),\r\n      sum(\r\n        infoMut(sum(one, transMulti2), { pivot: true, ...KeyMap.info(\"base_transformative_multi\") }),\r\n        input.total[`${reaction}_dmg_`]\r\n      ),\r\n      sum(one, lookup(constant(reaction), {\r\n        burning: input.total.burningBloomCritFactor_,\r\n        bloom: input.total.burningBloomCritFactor_,\r\n        hyperbloom: input.total.burningBloomCritFactor_,\r\n        burgeon: input.total.burningBloomCritFactor_\r\n      }, naught)),\r\n      input.enemy[`${resist}_resMulti`]\r\n    ), KeyMap.info(`${reaction}_hit`))\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => {\r\n    const base = prod(\r\n      prod(constant(transformativeReactions.swirl.multi, KeyMap.info(\"swirl_multi\")), transMulti1),\r\n      sum(infoMut(sum(one, transMulti2), { pivot: true, ...KeyMap.info(\"base_transformative_multi\") }), input.total.swirl_dmg_)\r\n    )\r\n    const res = input.enemy[`${ele}_resMulti`]\r\n    return infoMut(\r\n      // CAUTION:\r\n      // Add amp multiplier/additive term only to swirls that have amp/additive reactions.\r\n      // It is wasteful to add them indiscriminately, but this means\r\n      // that we need to audit and add appropriate elements here\r\n      // should amp/additive reactions be added to more swirls.\r\n      [\"pyro\", \"hydro\", \"cryo\", \"electro\"].includes(ele)\r\n        ? (ele === \"electro\"\r\n          // Additive reactions apply the additive term before resistance, but after swirl bonuses\r\n          ? data(prod(sum(base, input.hit.addTerm), res), { hit: { ele: constant(ele) } })\r\n          // Amp reaction\r\n          : data(prod(base, res, input.hit.ampMulti), { hit: { ele: constant(ele) } }))\r\n        : prod(base, res),\r\n      KeyMap.info(`${ele}_swirl_hit`))\r\n  })\r\n}\r\nconst infusionReactions = {\r\n  overloaded: equal(infusionNode, \"pyro\", trans.overloaded, KeyMap.info(\"overloaded_hit\")),\r\n  electrocharged: equal(infusionNode, \"hydro\", trans.electrocharged, KeyMap.info(\"electrocharged_hit\")),\r\n  superconduct: equal(infusionNode, \"cryo\", trans.superconduct, KeyMap.info(\"superconduct_hit\")),\r\n  burning: equal(infusionNode, \"pyro\", trans.burning, KeyMap.info(\"burning_hit\")),\r\n  bloom: equal(infusionNode, \"hydro\", trans.bloom, KeyMap.info(\"bloom_hit\")),\r\n  burgeon: equal(infusionNode, \"pyro\", trans.burgeon, KeyMap.info(\"burgeon_hit\")),\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    bloom: trans.bloom,\r\n    burgeon: trans.burgeon,\r\n    hyperbloom: trans.hyperbloom,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), KeyMap.info(`${e}_crystallize`))])),\r\n    shattered: trans.shattered,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    hyperbloom: trans.hyperbloom,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n    bloom: trans.bloom,\r\n    overloaded: infusionReactions.overloaded,\r\n    superconduct: infusionReactions.superconduct,\r\n    burning: infusionReactions.burning,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    burgeon: trans.burgeon,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    bloom: infusionReactions.bloom,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  dendro: {\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    bloom: trans.bloom,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    burgeon: infusionReactions.burgeon,\r\n  }\r\n}\r\n","import { SubstatKey } from \"pipeline\";\r\nimport { infusionNode, input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, lookup, one, percent, prod, stringPrio, subscript, sum } from \"../../Formula/utils\";\r\nimport KeyMap from \"../../KeyMap\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\n\r\nconst inferredHitEle = stringPrio(\r\n  lookup(input.hit.move, {\r\n    \"skill\": input.charEle, \"burst\": input.charEle,\r\n  }, undefined),\r\n  lookup(input.weaponType, {\r\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\r\n    catalyst: input.charEle,\r\n  }, undefined),\r\n  \"physical\"\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(one, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healInc = input.total.healInc\r\n  const healNode = prod(sum(base, healInc), sum(one, input.total.heal_, input.total.incHeal_))\r\n\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { unit: \"%\" }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { unit: \"%\" }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { unit: \"%\" }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript<number>(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  layeredAssignment(data, [\"teamBuff\", \"tally\", \"maxEleMas\"], input.premod.eleMas)\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { ...KeyMap.info(stat), prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\nimport KeyMap from \"../../KeyMap\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), KeyMap.info(mainStat.type))\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), KeyMap.info(subStat.type))\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Akuoumaru\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffSlasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DebateClub\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FerrousShadow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\r\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\r\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\r\n    // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_,\r\n        }, {\r\n          text: trm(\"resistance\")\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ForestRegalia\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 75, 90, 105, 120]\r\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\r\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(eleMas_disp, KeyMap.info(\"eleMas\")),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: skill_dmg_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { unit: \"%\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LuxuriousSeaLord\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\r\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\r\nconst dmg = equal(input.weapon.key, key, equal(condPassive, 'on',\r\n  customDmgNode(prod(\r\n    subscript(\r\n      input.weapon.refineIndex, dmg_Src, { unit: \"%\" }),\r\n      input.total.atk\r\n    ),\r\n    \"elemental\",\r\n    { hit: { ele: constant(\"physical\") }\r\n})))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }],\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st('hitOp.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { name: st(\"dmg\") })\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","\r\nimport { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MakhairaAquamarine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst atk_arr = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atkSelf = equal(input.weapon.key, key, equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }),\r\n    input.premod.eleMas\r\n  )\r\n))\r\nconst atkTeamDisp = equal(input.weapon.key, key, prod(percent(0.3), atkSelf))\r\nconst atkTeam = unequal(input.activeCharKey, input.charKey, atkTeamDisp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk: atkSelf\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      atk: atkTeam\r\n    }\r\n  }\r\n}, {\r\n  atkSelf,\r\n  atkTeamDisp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    path: condPassivePath,\r\n    value: condPassive,\r\n    teamBuff: true,\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkSelf\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }],\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(atkTeamDisp, { ...KeyMap.info(\"atk\"), isTeamBuff: true }),\r\n    }, {\r\n        text: stg(\"duration\"),\r\n        value: 12,\r\n        unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OldMercsPal\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeArchaic\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { name: st(\"dmg\") }) }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rainslasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RedhornStonethresher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { unit: \"%\" }), input.premod.def))\r\nconst charged_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { unit: \"%\" }), input.premod.def))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    def_,\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n  }\r\n}, {\r\n  normal_dmgInc,\r\n  charged_dmgInc,\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: def_\r\n    }, {\r\n      node: normal_dmgInc\r\n    }, {\r\n      node: charged_dmgInc\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"opponentsDamaged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SerpentSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { unit: \"%\" })\r\nconst all_dmg_stack = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: all_dmg_stack\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: {\r\n      ...objectKeyMap(range(1, 5), i => ({\r\n        name: st(\"seconds\", { count: i * 4 }),\r\n        fields: [{\r\n          node: all_dmg_stack\r\n        }, {\r\n          text: trm(\"takeMoreDmg\"),\r\n          value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\r\n          unit: \"%\"\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardPride\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: all_dmg_,\r\n    }, {\r\n      node: infoMut(dmg, { name: st(\"dmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SnowTombedStarsilver\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SongOfBrokenPines\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { unit: \"%\" })\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, KeyMap.info(\"atk_\")))\r\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n      atkSPD_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customShieldNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBell\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\r\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\r\nconst shield = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { unit: \"%\" }), input.total.hp))))\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst all_dmg_ = equal(condWithShield, \"protected\", subscript(input.weapon.refineIndex, allDmgSrc, { unit: \"%\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n}, {\r\n  shield\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"takeDmg\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(shield, { name: stg(`dmgAbsorption`) })\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 45,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheUnforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"WasterGreatsword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Whiteblind\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteIronGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\r\nconst heal = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { unit: \"%\" }), input.total.hp))))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('afterDefeatEnemy'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WolfsGravestone\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, KeyMap.info(\"atk_\")))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"enemyLessPercentHP\", { percent: 30 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport Akuoumaru from \"./Akuoumaru\"\r\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\r\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\r\nimport DebateClub from \"./DebateClub\"\r\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\r\nimport FerrousShadow from \"./FerrousShadow\"\r\nimport ForestRegalia from \"./ForestRegalia\"\r\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\r\nimport LithicBlade from \"./LithicBlade\"\r\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\r\nimport MakhairaAquamarine from \"./MakhairaAquamarine\"\r\nimport OldMercsPal from \"./OldMercsPal\"\r\nimport PrototypeArchaic from \"./PrototypeArchaic\"\r\nimport Rainslasher from \"./Rainslasher\"\r\nimport RedhornStonethresher from \"./RedhornStonethresher\"\r\nimport RoyalGreatsword from \"./RoyalGreatsword\"\r\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\r\nimport SerpentSpine from \"./SerpentSpine\"\r\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\r\nimport SkywardPride from \"./SkywardPride\"\r\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\r\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\r\nimport TheBell from \"./TheBell\"\r\nimport TheUnforged from \"./TheUnforged\"\r\nimport WasterGreatsword from \"./WasterGreatsword\"\r\nimport Whiteblind from \"./Whiteblind\"\r\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\r\nimport WolfsGravestone from \"./WolfsGravestone\"\r\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\r\n  Akuoumaru,\r\n  BlackcliffSlasher,\r\n  BloodtaintedGreatsword,\r\n  DebateClub,\r\n  FavoniusGreatsword,\r\n  FerrousShadow,\r\n  ForestRegalia,\r\n  KatsuragikiriNagamasa,\r\n  LithicBlade,\r\n  LuxuriousSeaLord,\r\n  MakhairaAquamarine,\r\n  OldMercsPal,\r\n  PrototypeArchaic,\r\n  Rainslasher,\r\n  RedhornStonethresher,\r\n  RoyalGreatsword,\r\n  SacrificialGreatsword,\r\n  SerpentSpine,\r\n  SkyriderGreatsword,\r\n  SkywardPride,\r\n  SnowTombedStarsilver,\r\n  SongOfBrokenPines,\r\n  TheBell,\r\n  TheUnforged,\r\n  WasterGreatsword,\r\n  Whiteblind,\r\n  WhiteIronGreatsword,\r\n  WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmenomaKageuchi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquilaFavonia\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\r\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\r\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\r\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\r\nconst heal = equal(input.weapon.key, key, equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { unit: \"%\" }), input.premod.atk)))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { unit: \"%\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n  },\r\n}, {\r\n  heal, dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('takeDmg'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\r\n        }, {\r\n          node: infoMut(dmg, { name: st(\"dmg\") })\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CinnabarSpindle\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\r\nconst skill_dmgInc = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { unit: \"%\" }), input.premod.def)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { // TODO: should be total\r\n    skill_dmgInc\r\n  }\r\n}, {\r\n  skill_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmgInc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CoolSteel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagotsurubeIsshin\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_ = equal(condPassive, \"on\", percent(0.15)) // No refinement data\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customDmgNode(prod(percent(1.8), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"hitOp.normalChargedOrPlunging\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { name: st(\"dmg\") })\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DarkIronSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.electro\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FesteringDesire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { unit: \"%\" })\r\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { unit: \"%\" })\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    skill_critRate_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_\r\n    }, {\r\n      node: skill_critRate_\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FilletBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\r\nconst cd_Src = [15, 14, 13, 12, 11]\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg_, { name: st(\"dmg\") })\r\n    }, {\r\n      text: stg(\"cd\"),\r\n      value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\r\n      unit: \"s\"\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: dmg_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"sigilsConsumed\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: normal_dmg_\r\n        }, {\r\n          node: charged_dmg_\r\n        }, {\r\n          node: plunging_dmg_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HaranGeppakuFutsu\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stack_normal_dmg_ = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPath, condNode] = cond(key, \"HonedFlow\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, KeyMap.info(`${ele}_dmg_`))]\r\n))\r\nconst normal_dmg_ = lookup(condNode,\r\n  objectKeyMap(range(1, 2), i => prod(i, subscript(input.weapon.refineIndex, stack_normal_dmg_)))\r\n  , naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...passive_dmg_,\r\n    normal_dmg_,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [ // Passive\r\n      ...allElements.map((ele) => {\r\n        return { node: passive_dmg_[`${ele}_dmg_`] }\r\n      })\r\n    ],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"consumed\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HarbingerOfDawn\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\r\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"greaterPercentHP\", { percent: 90 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: critRate_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"IronSting\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\r\nconst eleDmgDealtStack = range(1, 2)\r\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\r\n  subscript(input.weapon.refineIndex, allDmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(eleDmgDealtStack.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_,\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, stg } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KeyOfKhajNisut\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst selfEmSrc = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst teamEmSrc = [0.002, 0.0025, 0.003, 0.0035, 0.004]\r\nconst stacksArr = range(1, 3)\r\nconst hp_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hp_ = equal(input.weapon.key, key, subscript(input.weapon.refineIndex, hp_arr, { unit: \"%\" }))\r\n\r\nconst [condAfterSkillStacksPath, condAfterSkillStacks] = cond(key, \"afterSkill\")\r\nconst selfEleMas = equal(input.weapon.key, key,\r\n  lookup(condAfterSkillStacks, Object.fromEntries(stacksArr.map(stack => [\r\n    stack,\r\n    prod(\r\n      stack,\r\n      subscript(input.weapon.refineIndex, selfEmSrc, { unit: \"%\", fixed: 2 }),\r\n      input.total.hp\r\n    )\r\n  ])), naught)\r\n)\r\nconst teamEleMas = equal(input.weapon.key, key,\r\n  equal(condAfterSkillStacks, \"3\",\r\n    prod(\r\n      subscript(input.weapon.refineIndex, teamEmSrc, { unit: \"%\", fixed: 2 }),\r\n      input.total.hp\r\n    )))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    eleMas: selfEleMas\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      eleMas: teamEleMas\r\n    }\r\n  }\r\n}, {\r\n  selfEleMas, teamEleMas\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }]\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    teamBuff: true,\r\n    path: condAfterSkillStacksPath,\r\n    value: condAfterSkillStacks,\r\n    name: st(\"hitOp.skill\"),\r\n    states: Object.fromEntries(stacksArr.map(stack => [\r\n      stack,\r\n      {\r\n        name: st(\"stack\", { count: stack }),\r\n        fields: [{\r\n          node: selfEleMas\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    ]))\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    canShow: equal(condAfterSkillStacks, \"3\", 1),\r\n    teamBuff: true,\r\n    fields: [{\r\n      node: teamEleMas\r\n    }, {\r\n      text: stg(\"duration\"),\r\n      value: 20,\r\n      unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LionsRoar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MistsplitterReforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst stacks = [\"1\", \"2\", \"3\"] as const\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stacksRefine = {\r\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\r\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\r\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\r\n}\r\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, KeyMap.info(`${ele}_dmg_`))]\r\n))\r\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  equal(input.charEle, ele,\r\n    lookup(condNode, objectKeyMap(stacks, stack =>\r\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, KeyMap.info(`${ele}_dmg_`))\r\n  )]\r\n))\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\r\n))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: allElements.map(ele => (\r\n      { node: passive_dmg_[`${ele}_dmg_`] }\r\n    ))\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"emblem\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(\r\n      stacks.map(stack => [stack, {\r\n        name: st(\"stack\", { count: parseInt(stack) }),\r\n        fields: allElements.map(ele => ({\r\n          node: stacks_dmg_[`${ele}_dmg_`]\r\n        }))\r\n      }])\r\n    )\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeCutter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\r\nconst atk = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, atkSrc, { unit: \"%\" }), input.premod.hp))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk\r\n  }\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }, { node: atk }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeRancour\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"onHit\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SapwoodBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 75, 90, 105, 120]\r\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\r\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas\r\n    },\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(eleMas_disp, KeyMap.info(\"eleMas\")),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SilverSword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\r\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { unit: \"%\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    moveSPD_,\r\n    atkSPD_,\r\n  }\r\n}, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: critRate_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st('afterUse.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: moveSPD_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          node: infoMut(dmg, { name: st(\"dmg\") })\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SummitShaper\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SwordOfDescension\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = equal(\"Traveler\", input.charKey, 66)\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk\r\n  }\r\n}, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk\r\n    }, {\r\n      node: infoMut(dmg_, { name: st(\"dmg\") })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheAlleyFlash\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBlackSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { unit: \"%\" }), input.total.atk)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n}, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }, {\r\n      node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheFlute\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { name: st(\"dmg\") }) }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TravelersHandySword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { unit: \"%\" }), input.total.hp)))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"XiphosMoonlight\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst enerRech_arr = [0.00036, 0.00045, 0.00054, 0.00063, 0.00072]\r\nconst selfEnerRech_ = equal(input.weapon.key, key, equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, enerRech_arr, { unit: \"%\", fixed: 3 }),\r\n    input.premod.eleMas,\r\n  )\r\n))\r\nconst teamEnerRech_disp = equal(input.weapon.key, key, prod(percent(0.3), selfEnerRech_))\r\nconst teamEnerRech_ = unequal(input.activeCharKey, input.charKey, teamEnerRech_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    enerRech_: selfEnerRech_\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      enerRech_: teamEnerRech_\r\n    }\r\n  }\r\n}, {\r\n  selfEnerRech_,\r\n  teamEnerRech_disp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    path: condPassivePath,\r\n    value: condPassive,\r\n    name: trm(\"condName\"),\r\n    teamBuff: true,\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: selfEnerRech_,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(teamEnerRech_disp, { ...KeyMap.info(\"enerRech_\"), isTeamBuff: true }),\r\n    }, {\r\n      text: stg(\"duration\"),\r\n      value: 12,\r\n      unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponSwordKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\r\nimport AquilaFavonia from \"./AquilaFavonia\"\r\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\r\nimport CinnabarSpindle from \"./CinnabarSpindle\"\r\nimport CoolSteel from \"./CoolSteel\"\r\nimport KagotsurubeIsshin from \"./KagotsurubeIsshin\"\r\nimport DarkIronSword from \"./DarkIronSword\"\r\nimport DullBlade from \"./DullBlade\"\r\nimport FavoniusSword from \"./FavoniusSword\"\r\nimport FesteringDesire from \"./FesteringDesire\"\r\nimport FilletBlade from \"./FilletBlade\"\r\nimport FreedomSworn from \"./FreedomSworn\"\r\nimport HaranGeppakuFutsu from \"./HaranGeppakuFutsu\"\r\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\r\nimport IronSting from \"./IronSting\"\r\nimport KeyOfKhajNisut from \"./KeyOfKhajNisut\"\r\nimport LionsRoar from \"./LionsRoar\"\r\nimport MistsplitterReforged from \"./MistsplitterReforged\"\r\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\r\nimport PrototypeRancour from \"./PrototypeRancour\"\r\nimport RoyalLongsword from \"./RoyalLongsword\"\r\nimport SacrificialSword from \"./SacrificialSword\"\r\nimport SapwoodBlade from \"./SapwoodBlade\"\r\nimport SilverSword from \"./SilverSword\"\r\nimport SkyriderSword from \"./SkyriderSword\"\r\nimport SkywardBlade from \"./SkywardBlade\"\r\nimport SummitShaper from \"./SummitShaper\"\r\nimport SwordOfDescension from \"./SwordOfDescension\"\r\nimport TheAlleyFlash from \"./TheAlleyFlash\"\r\nimport TheBlackSword from \"./TheBlackSword\"\r\nimport TheFlute from \"./TheFlute\"\r\nimport TravelersHandySword from \"./TravelersHandySword\"\r\nimport XiphosMoonlight from \"./XiphosMoonlight\"\r\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\r\n  AmenomaKageuchi,\r\n  AquilaFavonia,\r\n  BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  CoolSteel,\r\n  KagotsurubeIsshin,\r\n  DarkIronSword,\r\n  DullBlade,\r\n  FavoniusSword,\r\n  FesteringDesire,\r\n  FilletBlade,\r\n  FreedomSworn,\r\n  HaranGeppakuFutsu,\r\n  HarbingerOfDawn,\r\n  IronSting,\r\n  KeyOfKhajNisut,\r\n  LionsRoar,\r\n  MistsplitterReforged,\r\n  PrimordialJadeCutter,\r\n  PrototypeRancour,\r\n  RoyalLongsword,\r\n  SacrificialSword,\r\n  SapwoodBlade,\r\n  SilverSword,\r\n  SkyriderSword,\r\n  SkywardBlade,\r\n  SummitShaper,\r\n  SwordOfDescension,\r\n  TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n  XiphosMoonlight,\r\n} as const\r\nexport default sword\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { compareEq, constant, lookup, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  compareEq(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { name: WeaponSheet.trm(key)(\"inactiveKey\") })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i, { name: st(\"stacks\") })), 0),\r\n  subscript(input.weapon.refineIndex, atk_, { unit: \"%\" }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n  }, {\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: tr(\"passiveName\"),\r\n    states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: atkInc }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = equal(input.weapon.key, key,\r\n  equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" })), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { hit })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(hit, { name: WeaponSheet.trm(key)(\"hitName\") })\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Deathmatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { unit: \"%\" }) }, naught)\r\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { unit: \"%\" }))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      \"oneOrNone\": {\r\n        name: trm(\"opponents.oneOrNone\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n      \"moreThanOne\": {\r\n        name: trm(\"opponents.moreThanOne\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonsBane\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonspineSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = equal(input.weapon.key, key,\r\n  min(prod(subscript(input.weapon.refineIndex, atk), sum(input.premod.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax)))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n}, {\r\n  atk_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusLance\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Halberd\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"IronPoint\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KitainCrossSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { unit: \"%\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MissiveWindspear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst emArr = [48, 60, 72, 84, 96]\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }))\r\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, emArr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    eleMas,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterReaction\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          node: eleMas,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Moonpiercer\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atk_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }))\r\nconst atk_ = equal(input.activeCharKey, target.charKey, atk_disp)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_disp, KeyMap.info(\"atk_\")),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\r\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), i)), naught)\r\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { unit: \"%\" }))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.none\"),\r\n    states: Object.fromEntries(range(1, 7).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: all_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeStarglitter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { unit: \"%\" }), i)), naught)\r\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { unit: \"%\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: Object.fromEntries(range(1, 2).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\r\nconst atkSPD_ = percent(0.12)\r\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    atkSPD_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critRate_,\r\n    }, {\r\n      node: atkSPD_,\r\n    }, {\r\n      node: infoMut(dmg, { name: st(\"dmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfHoma\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\r\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { unit: \"%\" })\r\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\r\nconst atk1 = prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), input.premod.hp)\r\nconst atk2 = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { unit: \"%\" }), input.premod.hp), KeyMap.info(\"atk\")))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk: sum(atk1, atk2)\r\n  }\r\n}, {\r\n  atk2_: atk2\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: hp_\r\n    }, {\r\n      node: infoMut(atk1, KeyMap.info(\"atk\"))\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: st(\"lessPercentHP\", { percent: 50 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk2, KeyMap.info(\"atk\")),\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfTheScarletSands\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\n\r\nconst baseAtkArr = [0.52, 0.65, 0.78, 0.91, 1.04]\r\nconst stacksAttArr = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst stacksArr = range(1, 3)\r\nconst baseAtk = equal(input.weapon.key, key, prod(\r\n  subscript(input.weapon.refineIndex, baseAtkArr, { unit: \"%\" }),\r\n  input.premod.eleMas\r\n), KeyMap.info(\"atk\"))\r\nconst stacksAtk = lookup(condStacks, Object.fromEntries(stacksArr.map(stack => [\r\n  stack,\r\n  prod(\r\n    stack,\r\n    subscript(input.weapon.refineIndex, stacksAttArr, { unit: \"%\" }),\r\n    input.premod.eleMas\r\n  )\r\n])), naught, KeyMap.info(\"atk\"))\r\nconst atk = equal(input.weapon.key, key, sum(baseAtk, stacksAtk))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk\r\n  },\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: baseAtk\r\n    }],\r\n  }, {\r\n    value: condStacks,\r\n    path: condStacksPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: Object.fromEntries(stacksArr.map(i =>\r\n      [i, {\r\n        name: st(\"hits\", { count: i }),\r\n        fields: [{\r\n          node: stacksAtk\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheCatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\r\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_,\r\n    burst_critRate_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"VortexVanquisher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WavebreakersFin\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponPoleArmKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\nimport Deathmatch from './Deathmatch'\r\nimport DragonsBane from './DragonsBane'\r\nimport DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\nimport FavoniusLance from './FavoniusLance'\r\nimport Halberd from './Halberd'\r\nimport IronPoint from './IronPoint'\r\nimport KitainCrossSpear from './KitainCrossSpear'\r\nimport LithicSpear from './LithicSpear'\r\nimport MissiveWindspear from './MissiveWindspear'\r\nimport Moonpiercer from './Moonpiercer'\r\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\nimport PrototypeStarglitter from './PrototypeStarglitter'\r\nimport RoyalSpear from './RoyalSpear'\r\nimport SkywardSpine from './SkywardSpine'\r\nimport StaffOfHoma from './StaffOfHoma'\r\nimport StaffOfTheScarletSands from './StaffOfTheScarletSands'\r\nimport TheCatch from './TheCatch'\r\nimport VortexVanquisher from './VortexVanquisher'\r\nimport WavebreakersFin from './WavebreakersFin'\r\nimport WhiteTassel from './WhiteTassel'\r\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  Deathmatch,\r\n  DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  FavoniusLance,\r\n  Halberd,\r\n  IronPoint,\r\n  KitainCrossSpear,\r\n  LithicSpear,\r\n  MissiveWindspear,\r\n  Moonpiercer,\r\n  PrimordialJadeWingedSpear,\r\n  PrototypeStarglitter,\r\n  RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  StaffOfTheScarletSands,\r\n  TheCatch,\r\n  VortexVanquisher,\r\n  WavebreakersFin,\r\n  WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AlleyHunter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst dmgInc = [.02, .025, .03, .035, .04]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\r\nconst all_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 10).map(c => [c, {\r\n      name: st(\"seconds\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmosBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, KeyMap.info(\"normal_dmg_\"))\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, KeyMap.info(\"charged_dmg_\"))\r\n\r\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\r\nconst normal_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, KeyMap.info(\"normal_dmg_\"))\r\nconst charged_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, KeyMap.info(\"charged_dmg_\"))\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\r\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 5), i => ({\r\n      name: st(\"seconds\", { count: i / 10 }),\r\n      fields: [{\r\n        node: normal_dmg_arrow_\r\n      }, {\r\n        node: charged_dmg_arrow_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquaSimulacra\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst hp_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst dmg_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst base_hp_ = subscript(input.weapon.refineIndex, hp_arr)\r\nconst cond_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_: base_hp_,\r\n    all_dmg_: cond_dmg_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: base_hp_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: cond_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst atkInc = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(range(1, 3).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 30,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CompoundBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.04, .05, .06, .07, .08]\r\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i))\r\n}, naught)\r\nconst atkSPD_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: atkSPD_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ElegyForTheEnd\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst eleMasInc = [60, 75, 90, 105, 120]\r\nconst eleMasInc2 = [100, 125, 150, 175, 200]\r\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\r\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, KeyMap.info(\"eleMas\"))\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, KeyMap.info(\"eleMas\")))\r\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      eleMas: eleMas2\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: eleMas,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas2\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FadingTwilight\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\nconst state_dmg_dict = {\r\n  evengleam: subscript(input.weapon.refineIndex, [0.06, 0.075, 0.09, 0.105, 0.12]),\r\n  afterglow: subscript(input.weapon.refineIndex, [0.1, 0.125, 0.15, 0.175, 0.20]),\r\n  dawnblaze: subscript(input.weapon.refineIndex, [0.14, 0.175, 0.21, 0.245, 0.28])\r\n}\r\nconst state_dmg_ = lookup(condState, state_dmg_dict, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: state_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condState,\r\n    path: condStatePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(Object.keys(state_dmg_dict).map(state => [\r\n      state,\r\n      {\r\n        name: trm(`states.${state}`),\r\n        fields: [{ node: state_dmg_ }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Hamayumi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\r\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, KeyMap.info(\"normal_dmg_\"))\r\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, KeyMap.info(\"charged_dmg_\"))\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\r\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, KeyMap.info(\"normal_dmg_\")))\r\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, KeyMap.info(\"charged_dmg_\")))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg, normal_passive),\r\n    charged_dmg_: sum(charged_dmg, charged_passive)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg\r\n    }, {\r\n      node: charged_dmg\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_passive\r\n        }, {\r\n          node: charged_passive\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"HuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HuntersPath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst allEle_dmg_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, allEle_dmg_arr, { unit: \"%\" })\r\n]))\r\n\r\nconst charged_dmgIncArr = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst charged_dmgInc = equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, charged_dmgIncArr, { unit: \"%\" }),\r\n    input.total.eleMas\r\n  ))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_,\r\n    charged_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(allEle_dmg_).map(node => ({\r\n      node\r\n    }))\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.charged\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmgInc,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }, {\r\n          text: st(\"charges\"),\r\n          value: 12\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KingsSquire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 80, 100, 120, 140]\r\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, eleMasArr))\r\nconst dmg_arr = [1, 1.2, 1.4, 1.6, 1.8]\r\nconst dmg = equal(input.weapon.key, key, customDmgNode(\r\n  prod(\r\n    subscript(input.weapon.refineIndex, dmg_arr, { unit: \"%\" }),\r\n    input.total.atk\r\n  ),\r\n  \"elemental\",\r\n))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") }),\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skillOrBurst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\",\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Messenger\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MitternachtsWaltz\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\r\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\r\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\r\n\r\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\r\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkill,\r\n    path: condSkillPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MouunsMoon\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PolarStar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\r\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\r\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst atk_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\r\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    atk_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, percent, prod } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Predator\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normalInc = percent(.1)\r\nconst chargedInc = percent(.1)\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\r\n}, naught)\r\nconst charged_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\r\n}, naught)\r\nconst atk = equal(input.activeCharKey, \"Aloy\", 66)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    atk\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.cryo\"),\r\n    states: Object.fromEntries(range(1, 2).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }, {\r\n        node: charged_dmg_\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 6,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeCrescent\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.36, .45, .54, .63, .72]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RavenBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RecurveBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healing_s = [.08, .10, .12, .14, .16]\r\nconst healing = equal(input.weapon.key, key,\r\n  customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s))))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { healing })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(healing, { name: stg(\"healing\"), variant: \"heal\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRate_s = [.08, .10, .12, .14, .16]\r\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\r\nconst critRate_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rust\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\r\n\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\r\nconst charged_dmg_ = constant(-0.1)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SeasonedHuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SharpshootersOath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\r\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    weakspotDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: weakspotDMG_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardHarp\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critd_s = [.20, .25, .30, .35, .40]\r\nconst dmgPerc = percent(1.25)\r\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critDMG_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critDMG_\r\n    }, {\r\n      node: infoMut(dmg, { name: st(\"dmg\") })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Slingshot\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmg_arr = [.36, .42, .48, .54, .60]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\r\nconst normal_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), KeyMap.info(\"normal_dmg_\"))\r\nconst charged_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), KeyMap.info(\"charged_dmg_\"))\r\nconst normal_dmg_dec = equal(condPassive, undefined, percent(-0.1, KeyMap.info(\"normal_dmg_\")))\r\nconst charged_dmg_dec = equal(condPassive, undefined, percent(-0.1, KeyMap.info(\"charged_dmg_\")))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_inc, normal_dmg_dec),\r\n    charged_dmg_: sum(charged_dmg_inc, charged_dmg_dec),\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_dec\r\n    }, {\r\n      node: charged_dmg_dec\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_inc\r\n        }, {\r\n          node: charged_dmg_inc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheStringless\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheViridescentHunt\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThunderingPulse\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    normal_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 3), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EndOfTheLine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgArr = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst dmg = equal(input.weapon.key, key, customDmgNode(\r\n  prod(\r\n    subscript(input.weapon.refineIndex, dmgArr, { unit: \"%\" }),\r\n    input.total.atk\r\n  ),\r\n  \"elemental\"\r\n))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WindblumeOde\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.16, .20, .24, .28, .32]\r\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.skill\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponBowKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\n\r\nimport AlleyHunter from './AlleyHunter'\r\nimport AmosBow from \"./AmosBow\"\r\nimport AquaSimulacra from \"./AquaSimulacra\"\r\nimport BlackcliffWarbow from './BlackcliffWarbow'\r\nimport CompoundBow from './CompoundBow'\r\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\r\nimport FadingTwilight from \"./FadingTwilight\"\r\nimport FavoniusWarbow from './FavoniusWarbow'\r\nimport Hamayumi from './Hamayumi'\r\nimport HuntersBow from \"./HuntersBow\"\r\nimport HuntersPath from './HuntersPath'\r\nimport KingsSquire from './KingsSquire'\r\nimport Messenger from './Messenger'\r\nimport MitternachtsWaltz from './MitternachtsWaltz'\r\nimport MouunsMoon from './MouunsMoon'\r\nimport PolarStar from './PolarStar'\r\nimport Predator from './Predator'\r\nimport PrototypeCrescent from './PrototypeCrescent'\r\nimport RavenBow from './RavenBow'\r\nimport RecurveBow from './RecurveBow'\r\nimport RoyalBow from './RoyalBow'\r\nimport Rust from './Rust'\r\nimport SacrificialBow from \"./SacrificialBow\"\r\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\r\nimport SharpshootersOath from './SharpshootersOath'\r\nimport SkywardHarp from './SkywardHarp'\r\nimport Slingshot from './Slingshot'\r\nimport TheStringless from './TheStringless'\r\nimport TheViridescentHunt from './TheViridescentHunt'\r\nimport ThunderingPulse from './ThunderingPulse'\r\nimport EndOfTheLine from './EndOfTheLine'\r\nimport WindblumeOde from './WindblumeOde'\r\n\r\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\r\n  AlleyHunter,\r\n  AmosBow,\r\n  AquaSimulacra,\r\n  BlackcliffWarbow,\r\n  CompoundBow,\r\n  ElegyForTheEnd,\r\n  FadingTwilight,\r\n  FavoniusWarbow,\r\n  Hamayumi,\r\n  HuntersBow,\r\n  HuntersPath,\r\n  KingsSquire,\r\n  Messenger,\r\n  MitternachtsWaltz,\r\n  MouunsMoon,\r\n  PolarStar,\r\n  Predator,\r\n  PrototypeCrescent,\r\n  RavenBow,\r\n  RecurveBow,\r\n  RoyalBow,\r\n  Rust,\r\n  SacrificialBow,\r\n  SeasonedHuntersBow,\r\n  SharpshootersOath,\r\n  SkywardHarp,\r\n  Slingshot,\r\n  TheStringless,\r\n  TheViridescentHunt,\r\n  ThunderingPulse,\r\n  EndOfTheLine,\r\n  WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"ApprenticesNotes\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input, tally, target } from '../../../../Formula'\r\nimport { equal, infoMut, lookup, naught, prod, subscript, sum, unequal } from \"../../../../Formula/utils\"\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AThousandFloatingDreams\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst self_eleMasArr = [32, 40, 48, 56, 64]\r\nconst self_eleDmg_arr = [0.10, 0.14, 0.18, 0.22, 0.26]\r\nconst team_eleMasArr = [40, 42, 44, 46, 48]\r\n\r\nconst numSameElement = lookup(input.charEle, Object.fromEntries(allElements.map(ele => [\r\n  ele,\r\n  infoMut(sum(tally[ele], -1), { asConst: true }) // Subtract wielder from count\r\n])), naught)\r\nconst partySize = sum(...allElements.map(ele => tally[ele]))\r\nconst self_eleMas = prod(\r\n  numSameElement,\r\n  subscript(input.weapon.refineIndex, self_eleMasArr)\r\n)\r\nconst self_eleDmg_ = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_dmg_`,\r\n  equal(input.charEle, ele, prod(\r\n    infoMut(sum(partySize, -1, prod(numSameElement, -1)), { asConst: true }),\r\n    subscript(input.weapon.refineIndex, self_eleDmg_arr, { unit: \"%\" })\r\n  ))\r\n]))\r\n\r\nconst team_eleMasDisp = equal(input.weapon.key, key,\r\n  subscript(input.weapon.refineIndex, team_eleMasArr),\r\n  { ...KeyMap.info(\"eleMas\"), isTeamBuff: true }\r\n)\r\nconst team_eleMas = unequal(input.charKey, target.charKey, team_eleMasDisp)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas: self_eleMas,\r\n    ...self_eleDmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: team_eleMas\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: self_eleMas\r\n    },\r\n    ...Object.values(self_eleDmg_).map(node => ({ node }))\r\n    ]\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    fields: [{\r\n      node: team_eleMasDisp\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffAgate\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_,\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 30,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DodocoTales\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\r\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\r\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\r\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_,\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    name: st(\"hitOp.normal\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condCharged,\r\n    path: condChargedPath,\r\n    name: st(\"hitOp.charged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EmeraldOrb\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.hydro\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, hp_conv, { unit: \"%\" }), input.premod.hp))\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    heal_\r\n  }\r\n}, {\r\n  normal_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EyeOfPerception\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_: dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { name: st(\"dmg\") }) }],\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusCodex\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Frostbearer\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmgAoe,\r\n  dmgOnCryoOp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FruitOfFulfillment\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleMasArr = [24, 27, 30, 33, 36]\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\nconst stacksArr = range(1, 5)\r\nconst eleMas = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\r\n  stacks,\r\n  prod(\r\n    subscript(input.weapon.refineIndex, eleMasArr),\r\n    stacks\r\n  )\r\n])), naught)\r\n\r\nconst atk_ = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\r\n  stacks,\r\n  prod(\r\n    percent(-0.05),\r\n    stacks\r\n  )\r\n])), naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n    atk_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    path: condStacksPath,\r\n    value: condStacks,\r\n    name: trm(\"stackName\"),\r\n    states: Object.fromEntries(stacksArr.map(stack => [\r\n      stack,\r\n      {\r\n        name: st(\"stack\", { count: stack }),\r\n        fields: [{\r\n          node: eleMas,\r\n        }, {\r\n          node: atk_\r\n        }]\r\n      }\r\n    ]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HakushinRing\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\r\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\r\nconst anemo_dmg_disp = equal(\"anemo\", condPassive, eleDmg)\r\nconst cryo_dmg_disp = equal(\"cryo\", condPassive, eleDmg)\r\nconst geo_dmg_disp = equal(\"geo\", condPassive, eleDmg)\r\nconst hydro_dmg_disp = equal(\"hydro\", condPassive, eleDmg)\r\nconst pyro_dmg_disp = equal(\"pyro\", condPassive, eleDmg)\r\nconst dendro_dmg_disp = equal(\"dendro\", condPassive, eleDmg)\r\nconst anemo_dmg_ = equal(\"anemo\", target.charEle, anemo_dmg_disp)\r\nconst cryo_dmg_ = equal(\"cryo\", target.charEle, cryo_dmg_disp)\r\nconst geo_dmg_ = equal(\"geo\", target.charEle, geo_dmg_disp)\r\nconst hydro_dmg_ = equal(\"hydro\", target.charEle, hydro_dmg_disp)\r\nconst pyro_dmg_ = equal(\"pyro\", target.charEle, pyro_dmg_disp)\r\nconst dendro_dmg_ = equal(\"dendro\", target.charEle, dendro_dmg_disp)\r\n\r\nconst electro_dmg_disp = unequal(condPassive, undefined, eleDmg)\r\nconst electro_dmg_ = equal(\"electro\", target.charEle, electro_dmg_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_dmg_,\r\n      cryo_dmg_,\r\n      electro_dmg_,\r\n      geo_dmg_,\r\n      hydro_dmg_,\r\n      pyro_dmg_,\r\n      dendro_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.electro\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      anemo: {\r\n        name: <ColorText color=\"swirl\">{stg(\"reaction.swirl\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(anemo_dmg_disp, { ...KeyMap.info(\"anemo_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      cryo: {\r\n        name: <ColorText color=\"superconduct\">{stg(\"reaction.superconduct\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(cryo_dmg_disp, { ...KeyMap.info(\"cryo_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      geo: {\r\n        name: <ColorText color=\"crystallize\">{stg(\"reaction.crystallize\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(geo_dmg_disp, { ...KeyMap.info(\"geo_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      pyro: {\r\n        name: <ColorText color=\"overloaded\">{stg(\"reaction.overloaded\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(pyro_dmg_disp, { ...KeyMap.info(\"pyro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      hydro: {\r\n        name: <ColorText color=\"electrocharged\">{stg(\"reaction.electrocharged\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(hydro_dmg_disp, { ...KeyMap.info(\"hydro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      dendro: {\r\n        name: <ColorText color=\"aggravate\">{stg(\"reaction.aggravate\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dendro_dmg_disp, { ...KeyMap.info(\"dendro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\nconst totems = range(1, 3)\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), KeyMap.info(\"skill_dmg_\")))\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states:\r\n      Object.fromEntries(totems.map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: skill_dmg_s[i - 1]\r\n        },\r\n        ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst ele_dmg_s = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\r\n\r\nconst moveSPD_ = percent(0.1)\r\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s, { unit: \"%\" })\r\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\r\n}, naught)]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    moveSPD_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: moveSPD_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"seconds\", { count: i * 4 }),\r\n      fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MagicGuide\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MappaMare\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\r\n\r\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\r\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\r\n}, naught)])\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: eleDmgs\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [...Object.values(eleDmgs).map(node => ({ node })), {\r\n        text: stg(\"duration\"),\r\n        value: 10,\r\n        unit: \"s\"\r\n      }]\r\n    }))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MemoryOfDust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OathswornEye\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\n\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    enerRech_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OtherworldlyStory\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { unit: \"%\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PocketGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeAmber\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\r\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\r\n\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { unit: \"%\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.burst\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{ node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" }) }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialFragments\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardAtlas\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\n\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n  }\r\n}, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\r\n      {\r\n        node: infoMut(dmg, { name: st(\"dmg\") }),\r\n      }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SolarPearl\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\r\nconst burst_dmg_ = { ...skill_dmg_ }\r\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    normal_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      normal: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          node: burst_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skillOrBurst\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"TheWidsith\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\r\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\r\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\r\nconst eleBonus_ = Object.fromEntries(allElements.map(\r\n  ele => [ele, equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))]\r\n))\r\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n    eleMas\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: tr(\"passiveName\"),\r\n    states: {\r\n      aria: {\r\n        name: trm(\"aria\"),\r\n        fields: [\r\n          ...allElements.map(ele => ({ node: eleBonus_[ele] }))\r\n        ,{\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      interlude: {\r\n        name: trm(\"interlude\"),\r\n        fields: [{\r\n          node: eleMas\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      recitative: {\r\n        name: trm(\"recitative\"),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\r\nconst atk_Disp = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc))\r\nconst atk_ = unequal(input.activeCharKey, input.charKey, // Don't apply to wielding char\r\n  equal(input.activeCharKey, target.charKey, atk_Disp) // Only apply to active char\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm('condName'),\r\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_Disp, KeyMap.info(\"atk_\"))\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TwinNephrite\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterDefeatEnemy\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WanderingEvenstar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atkArr = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst selfAtk = equal(input.weapon.key, key, equal(\"on\", condPassive, prod(\r\n  subscript(input.weapon.refineIndex, atkArr, { unit: \"%\" }),\r\n  input.premod.eleMas\r\n)))\r\nconst teamAtkDisp = equal(input.weapon.key, key, prod(percent(0.3), selfAtk))\r\nconst teamAtk = unequal(input.activeCharKey, input.charKey, teamAtkDisp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk: selfAtk\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      atk: teamAtk\r\n    }\r\n  }\r\n}, {\r\n  selfAtk,\r\n  teamAtkDisp\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: selfAtk\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(teamAtkDisp, { ...KeyMap.info(\"atk\"), isTeamBuff: true }),\r\n    }, {\r\n      text: stg(\"duration\"),\r\n      value: 12,\r\n      unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WineAndSong\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterSprint\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 5,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponCatalystKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport ApprenticesNotes from './ApprenticesNotes'\r\nimport AThousandFloatingDreams from './AThousandFloatingDreams'\r\nimport BlackcliffAgate from './BlackcliffAgate'\r\nimport DodocoTales from './DodocoTales'\r\nimport EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\nimport EyeOfPerception from './EyeOfPerception'\r\nimport FavoniusCodex from './FavoniusCodex'\r\nimport Frostbearer from './Frostbearer'\r\nimport FruitOfFulfillment from './FruitOfFulfillment'\r\nimport HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\nimport MagicGuide from './MagicGuide'\r\nimport MappaMare from './MappaMare'\r\nimport MemoryOfDust from './MemoryOfDust'\r\nimport OathswornEye from './OathswornEye'\r\nimport OtherworldlyStory from './OtherworldlyStory'\r\nimport PocketGrimoire from './PocketGrimoire'\r\nimport PrototypeAmber from './PrototypeAmber'\r\nimport RoyalGrimoire from './RoyalGrimoire'\r\nimport SacrificialFragments from './SacrificialFragments'\r\nimport SkywardAtlas from './SkywardAtlas'\r\nimport SolarPearl from './SolarPearl'\r\nimport TheWidsith from './TheWidsith'\r\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\nimport TwinNephrite from './TwinNephrite'\r\nimport WanderingEvenstar from './WanderingEvenstar'\r\nimport WineAndSong from './WineAndSong'\r\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\r\n  ApprenticesNotes,\r\n  AThousandFloatingDreams,\r\n  BlackcliffAgate,\r\n  DodocoTales,\r\n  EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  FavoniusCodex,\r\n  Frostbearer,\r\n  FruitOfFulfillment,\r\n  HakushinRing,\r\n  KagurasVerity,\r\n  LostPrayerToTheSacredWinds,\r\n  MagicGuide,\r\n  MappaMare,\r\n  MemoryOfDust,\r\n  OathswornEye,\r\n  OtherworldlyStory,\r\n  PocketGrimoire,\r\n  PrototypeAmber,\r\n  RoyalGrimoire,\r\n  SacrificialFragments,\r\n  SkywardAtlas,\r\n  SolarPearl,\r\n  TheWidsith,\r\n  ThrillingTalesOfDragonSlayers,\r\n  TwinNephrite,\r\n  WanderingEvenstar,\r\n  WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["crystallizeMulti1","subscript","input","crystallizeLevelMultipliers","KeyMap","crystallizeElemas","prod","frac","crystallizeHit","infoMut","sum","one","pivot","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","objectKeyMap","Object","keys","transformativeReactions","reaction","multi","resist","constant","lookup","burning","bloom","hyperbloom","burgeon","naught","swirl","ele","base","res","includes","data","hit","infusionReactions","overloaded","equal","infusionNode","electrocharged","superconduct","reactions","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","geo","crystallize","fromEntries","absorbableEle","e","percent","dendro","charCurves","objectMap","_charCurves","value","values","commonBasic","key","inferredHitEle","stringPrio","undefined","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","additional","mergeData","customShieldNode","shieldNode","customHealNode","healInc","healNode","dmgNode","lvlMultiplier","talentType","unit","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","variant","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","weaponCurves","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","total","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","trm","cond","condPassivePath","condPassive","energyRange","range","i","ratio","max","burst_dmg_","min","sheet","icon","iconAwaken","document","path","header","headerTemplate","st","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","c","count","text","stg","all_dmg_","on","dmg","charged_dmg_","eleMas_disp","eleMas","target","skill_dmg_","condStackPath","condStack","atkInc","critInc","critRate_","atkSelf","atkTeamDisp","atkTeam","unequal","atk","canShow","isTeamBuff","def_","normal_dmgInc","charged_dmgInc","crit_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","shield","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","ForestRegalia","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","MakhairaAquamarine","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","skill_dmgInc","skill_critRate_","cd_Src","dmg_","normal_dmg_","plunging_dmg_","passiveRefine","stack_normal_dmg_","passive_dmg_","allElements","eleDmgDealtStack","selfEmSrc","stacksArr","hp_","condAfterSkillStacksPath","condAfterSkillStacks","selfEleMas","stack","fixed","teamEleMas","stacks","stacksRefine","stacks_dmg_","allEle_dmg_","parseInt","moveSPD_","autoSrc","selfEnerRech_","teamEnerRech_disp","teamEnerRech_","enerRech_","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","KagotsurubeIsshin","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HaranGeppakuFutsu","HarbingerOfDawn","IronSting","KeyOfKhajNisut","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SapwoodBlade","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","XiphosMoonlight","tr","dmg_Nodes","compareEq","atkDefInc","atk_disp","dmgInc","atk1","atk2","atk2_","condStacksPath","condStacks","stacksAttArr","baseAtk","stacksAtk","burst_critRate_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","MissiveWindspear","Moonpiercer","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","StaffOfTheScarletSands","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","base_hp_","cond_dmg_","atk_s","atkSPD_s","eleMas2","condStatePath","condState","state_dmg_dict","evengleam","afterglow","dawnblaze","state_dmg_","state","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","allEle_dmg_arr","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","dmg_arr","normal_dmg_inc","charged_dmg_inc","normal_dmg_dec","charged_dmg_dec","refinementVals","bow","AlleyHunter","AmosBow","AquaSimulacra","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FadingTwilight","FavoniusWarbow","Hamayumi","HuntersBow","HuntersPath","KingsSquire","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","EndOfTheLine","WindblumeOde","self_eleDmg_arr","numSameElement","partySize","self_eleMas","self_eleDmg_","team_eleMasDisp","team_eleMas","condChargedPath","condCharged","heal_","eleMasArr","eleDmg","anemo_dmg_disp","cryo_dmg_disp","geo_dmg_disp","hydro_dmg_disp","pyro_dmg_disp","dendro_dmg_disp","anemo_dmg_","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","dendro_dmg_","electro_dmg_disp","electro_dmg_","color","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","atk_Disp","refineInc","selfAtk","teamAtkDisp","ApprenticesNotes","AThousandFloatingDreams","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","FruitOfFulfillment","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WanderingEvenstar","WineAndSong"],"sourceRoot":""}