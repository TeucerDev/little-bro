{"version":3,"file":"static/js/273.5148645b.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ImportExport.js","../node_modules/@mui/icons-material/esm/Upload.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/FileOpen.js","PageSettings/UploadCard.tsx","PageSettings/DatabaseCard.tsx","PageSettings/LanguageCard.tsx","PageSettings/index.tsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Download.js"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 3 5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\"\n}), 'ImportExport');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Upload');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M14 2H6c-1.1 0-2 .9-2 2v16c0 1.1.89 2 1.99 2H15v-8h5V8l-6-6zm-1 7V3.5L18.5 9H13zm4 12.66V16h5.66v2h-2.24l2.95 2.95-1.41 1.41L19 19.41v2.24h-2z\"\n}), 'FileOpen');","import { faArrowLeft, faFileCode, faFileUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { CheckBox, CheckBoxOutlineBlank, FileOpen } from '@mui/icons-material'\r\nimport { Box, Button, CardContent, Divider, Grid, styled, Tooltip, Typography } from '@mui/material'\r\nimport { useCallback, useContext, useMemo, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport { SandboxStorage } from '../Database/DBStorage'\r\nimport { ImportResult, ImportResultCounter } from '../Database/exim'\r\n\r\nconst InvisInput = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function UploadCard({ onReplace }: { onReplace: () => void }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\");\r\n  const [data, setdata] = useState(\"\")\r\n  const [filename, setfilename] = useState(\"\")\r\n  const [errorMsg, setErrorMsg] = useState(\"\") // TODO localize error msg\r\n  const [keepNotInImport, setKeepNotInImport] = useState(false)\r\n  const [ignoreDups, setIgnoreDups] = useState(false)\r\n  const { importResult, importedDatabase } = useMemo(() => {\r\n    if (!data) return\r\n    let parsed: any\r\n    try {\r\n      parsed = JSON.parse(data)\r\n      if (typeof parsed !== \"object\") {\r\n        setErrorMsg(\"uploadCard.error.jsonParse\")\r\n        return\r\n      }\r\n    } catch (e) {\r\n      setErrorMsg(\"uploadCard.error.jsonParse\")\r\n      return\r\n    }\r\n    // Figure out the file format\r\n    if (parsed.format === \"GOOD\") {\r\n      // Parse as GOOD format\r\n      const copyStorage = new SandboxStorage()\r\n      copyStorage.copyFrom(database.storage)\r\n      const importedDatabase = new ArtCharDatabase(copyStorage)\r\n      const importResult = importedDatabase.importGOOD(parsed, keepNotInImport, ignoreDups)\r\n      if (!importResult) {\r\n        setErrorMsg(\"uploadCard.error.goInvalid\")\r\n        return\r\n      }\r\n\r\n      return { importResult, importedDatabase }\r\n    }\r\n    setErrorMsg(\"uploadCard.error.unknown\")\r\n    return\r\n  }, [data, database, keepNotInImport, ignoreDups]) ?? {}\r\n  const reset = () => {\r\n    setdata(\"\")\r\n    setfilename(\"\")\r\n    onReplace()\r\n  }\r\n  const onUpload = async e => {\r\n    const file = e.target.files[0]\r\n    e.target.value = null // reset the value so the same file can be uploaded again...\r\n    if (file) setfilename(file.name)\r\n    const reader = new FileReader()\r\n    reader.onload = () => setdata(reader.result as string)\r\n    reader.readAsText(file)\r\n  }\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}><Trans t={t} i18nKey=\"settings:uploadCard.title\" /></CardContent>\r\n    <CardContent>\r\n      <Grid container spacing={2} sx={{ mb: 1 }}>\r\n        <Grid item>\r\n          <label htmlFor=\"icon-button-file\">\r\n            <InvisInput accept=\".json\" id=\"icon-button-file\" type=\"file\" onChange={onUpload} />\r\n            <Button component=\"span\" color=\"info\" startIcon={<FileOpen />}>{t`uploadCard.buttons.open`}</Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <CardDark sx={{ px: 2, py: 1 }}>\r\n            <Typography>{filename ? <span><FontAwesomeIcon icon={faFileCode} /> {filename}</span> : <span><FontAwesomeIcon icon={faArrowLeft} /> <Trans t={t} i18nKey=\"settings:uploadCard.hint\" /></span>}</Typography>\r\n          </CardDark>\r\n        </Grid>\r\n      </Grid>\r\n      <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n        <Tooltip title={<Typography>\r\n          {ignoreDups ? t`uploadCard.tooltip.ignoreDup` : t`uploadCard.tooltip.detectdup`}\r\n        </Typography>} placement='top' arrow >\r\n          <Box sx={{ flexGrow: 1, flexBasis: \"10em\" }}><Button fullWidth disabled={!data} color={ignoreDups ? \"primary\" : \"success\"} onClick={() => setIgnoreDups(!ignoreDups)} startIcon={ignoreDups ? <CheckBoxOutlineBlank /> : <CheckBox />}>\r\n            {t`uploadCard.buttons.detectDups`}\r\n          </Button></Box>\r\n        </Tooltip>\r\n        <Tooltip title={<Typography>\r\n          {keepNotInImport ? t`uploadCard.tooltip.keepNotInImport` : t`uploadCard.tooltip.delNotInImport`}\r\n        </Typography>} placement='top' arrow >\r\n          <Box sx={{ flexGrow: 1, flexBasis: \"10em\" }}><Button fullWidth disabled={!data} color={keepNotInImport ? \"primary\" : \"success\"} onClick={() => setKeepNotInImport(!keepNotInImport)} startIcon={keepNotInImport ? <CheckBoxOutlineBlank /> : <CheckBox />} >\r\n            {t`uploadCard.buttons.delNotInImport`}\r\n          </Button></Box>\r\n        </Tooltip>\r\n      </Box>\r\n      <Typography gutterBottom variant=\"caption\"><Trans t={t} i18nKey=\"settings:uploadCard.hintPaste\" /></Typography>\r\n      <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", mb: 2, resize: \"vertical\" }} value={data} onChange={e => setdata(e.target.value)} />\r\n      {(importResult && importedDatabase) ? <GOODUploadInfo importResult={importResult} importedDatabase={importedDatabase} /> : t(errorMsg)}\r\n    </CardContent>\r\n    <GOUploadAction importedDatabase={importedDatabase} reset={reset} />\r\n  </CardLight>\r\n}\r\n\r\nfunction GOODUploadInfo({ importResult: { source, artifacts, characters, weapons }, importedDatabase }: { importResult: ImportResult, importedDatabase: ArtCharDatabase }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey=\"uploadCard.dbSource\" /><strong> {source}</strong>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      <Grid container spacing={2}>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={artifacts} dbTotal={importedDatabase.arts.values.length} type=\"arts\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={weapons} dbTotal={importedDatabase.weapons.values.length} type=\"weapons\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={characters} dbTotal={importedDatabase.chars.values.length} type=\"chars\" />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\nfunction MergeResult({ result, dbTotal, type }: { result: ImportResultCounter<any>, dbTotal: number, type: string }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  const total = result.import\r\n  return <CardLight >\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey={`count.${type}`} /> {total}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Typography><Trans t={t} i18nKey=\"count.new\" /> <strong>{result.new.length}</strong> / {total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.unchanged\" /> <strong>{result.unchanged.length}</strong> / {total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.upgraded\" /> <strong>{result.upgraded.length}</strong> / {total}</Typography>\r\n      {/* <Typography><Trans t={t} i18nKey=\"count.updated\" /> <strong>{result.update.length}</strong></Typography> */}\r\n      {!!result.remove.length && <Typography color=\"warning.main\"><Trans t={t} i18nKey=\"count.removed\" /> <strong>{result.remove.length}</strong></Typography>}\r\n      {!!result.notInImport && <Typography><Trans t={t} i18nKey=\"count.notInImport\" /> <strong>{result.notInImport}</strong></Typography>}\r\n      <Typography><Trans t={t} i18nKey=\"count.dbTotal\" /> <strong>{result.beforeMerge}</strong> -&gt; <strong>{dbTotal}</strong></Typography>\r\n      {!!result.invalid?.length && <div>\r\n        <Typography color=\"error.main\"><Trans t={t} i18nKey=\"count.invalid\" /> <strong>{result.invalid.length}</strong> / {total}</Typography>\r\n        <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", resize: \"vertical\" }} value={JSON.stringify(result.invalid, undefined, 2)} disabled />\r\n      </div>}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nfunction GOUploadAction({ importedDatabase, reset }: { importedDatabase?: ArtCharDatabase, reset: () => void }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\")\r\n  const replaceDB = useCallback(() => {\r\n    if (!importedDatabase) return\r\n    database.clear()\r\n    database.storage.copyFrom(importedDatabase.storage)\r\n    setDatabase(new ArtCharDatabase(database.storage))\r\n    reset()\r\n  }, [database, importedDatabase, reset, setDatabase])\r\n\r\n\r\n  return <><Divider /><CardContent sx={{ py: 1 }}>\r\n    <Button color={importedDatabase ? \"success\" : \"error\"} disabled={!importedDatabase} onClick={replaceDB} startIcon={<FontAwesomeIcon icon={faFileUpload} />}><Trans t={t} i18nKey=\"settings:uploadCard.replaceDatabase\" /></Button>\r\n  </CardContent></>\r\n}\r\n","import { faClipboard } from '@fortawesome/free-solid-svg-icons'\r\nimport { Delete, Download, ImportExport, Upload } from '@mui/icons-material'\r\nimport { Button, CardContent, Chip, Divider, Grid, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { useCallback, useContext, useEffect, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { StyledInputBase } from '../Components/CustomNumberInput'\r\nimport FontAwesomeSvgIcon from '../Components/FontAwesomeSvgIcon'\r\nimport ModalWrapper from '../Components/ModalWrapper'\r\nimport { ArtCharDatabase, DatabaseContext, DatabaseContextObj } from \"../Database/Database\"\r\nimport { ExtraStorage } from '../Database/DBStorage'\r\nimport useBoolState from '../ReactHooks/useBoolState'\r\nimport useDBMeta from '../ReactHooks/useDBMeta'\r\nimport { range } from '../Util/Util'\r\nimport UploadCard from './UploadCard'\r\n\r\nexport default function DatabaseCard() {\r\n  const databaseContextObj = useContext(DatabaseContext)\r\n  const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\r\n  const { t } = useTranslation([\"settings\"]);\r\n\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        {t`DatabaseCard.title`}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <Grid container spacing={2} columns={{ xs: 1, md: 2, }}>\r\n        {range(1, 4).map(i => <Grid key={i} item xs={1}>\r\n          {i === dbIndex ? <DataCard index={i} /> :\r\n            <ExtraDatabaseWrapper index={i}>\r\n              <DataCard index={i} databaseContextObj={databaseContextObj} />\r\n            </ExtraDatabaseWrapper>}\r\n        </Grid>)}\r\n      </Grid>\r\n    </CardContent >\r\n  </CardLight >\r\n}\r\nfunction ExtraDatabaseWrapper({ index, children }) {\r\n  const [database, setDatabase] = useState(() => {\r\n    const dbName = `extraDatabase_${index}`\r\n    const storage = new ExtraStorage(dbName)\r\n    const dbObj = JSON.parse(localStorage.getItem(dbName) ?? `{ \"dbIndex\": \"${index}\" }`)\r\n    storage.setStorage(dbObj)\r\n\r\n    // A bit of preventive programming\r\n    storage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\r\n    const db = new ArtCharDatabase(storage)\r\n    storage.saveStorage()\r\n    return db\r\n  })\r\n\r\n  return <DatabaseContext.Provider value={{ database, setDatabase }}>\r\n    {children}\r\n  </DatabaseContext.Provider>\r\n}\r\n\r\nfunction DataCard({ index, databaseContextObj }: { index: number, databaseContextObj?: DatabaseContextObj }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const { name, lastEdit } = useDBMeta()\r\n\r\n  const current = !databaseContextObj\r\n  const [uploadOpen, onOpen, onClose] = useBoolState()\r\n  const { t } = useTranslation([\"settings\"]);\r\n  const numChar = database.chars.keys.length\r\n  const numArt = database.arts.values.length\r\n  const numWeapon = database.weapons.values.length\r\n  const hasData = Boolean(numChar || numArt || numWeapon)\r\n  const copyToClipboard = useCallback(\r\n    () => navigator.clipboard.writeText(JSON.stringify(database.exportGOOD()))\r\n      .then(() => alert(\"Copied database to clipboard.\"))\r\n      .catch(console.error),\r\n    [database],\r\n  )\r\n  const onUpload = useCallback(() => {\r\n    onClose()\r\n    if (!current) {\r\n      const storage = database.storage as ExtraStorage\r\n      storage.saveStorage()\r\n    }\r\n  }, [onClose, current, database.storage])\r\n\r\n  const onDelete = useCallback(() => {\r\n    if (!window.confirm(`Are you sure you want to delete \"${name}\"?`)) return\r\n    if (current) {\r\n      database.clear()\r\n      setDatabase(new ArtCharDatabase(database.storage))\r\n    } else {\r\n      const storage = database.storage as ExtraStorage\r\n      const dbName = storage.databaseName\r\n      const extraStorage = new ExtraStorage(dbName)\r\n      extraStorage.setStorage({})\r\n      setDatabase(new ArtCharDatabase(extraStorage))\r\n      localStorage.removeItem(dbName)\r\n    }\r\n  }, [database, current, name, setDatabase])\r\n\r\n  const download = useCallback(() => {\r\n    const date = new Date()\r\n    const dateStr = date.toISOString().split(\".\")[0].replace(\"T\", \"_\").replaceAll(\":\", \"-\")\r\n    const JSONStr = JSON.stringify(database.exportGOOD())\r\n    const filename = `${name.trim().replaceAll(\" \", \"_\")}_${dateStr}.json`\r\n    const contentType = \"application/json;charset=utf-8\"\r\n    const a = document.createElement('a');\r\n    a.download = filename\r\n    a.href = `data:${contentType},${encodeURIComponent(JSONStr)}`\r\n    a.target = \"_blank\"\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n  }, [database, name])\r\n\r\n  const onSwap = useCallback(() => {\r\n    if (!databaseContextObj) return\r\n\r\n    // save current database to appropriate slot\r\n    const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\r\n    const tempStorage = new ExtraStorage(`extraDatabase_${dbIndex}`, databaseContextObj.database.storage)\r\n    tempStorage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\r\n    tempStorage.saveStorage()\r\n\r\n    // clear this slot database\r\n    const storage = database.storage as ExtraStorage\r\n    const dbName = storage.databaseName\r\n    localStorage.removeItem(dbName)\r\n\r\n    // swap over database\r\n    databaseContextObj.database.clear()\r\n    databaseContextObj.database.storage.copyFrom(database.storage)\r\n    databaseContextObj.database.storage.set(\"dbIndex\", index)\r\n    databaseContextObj.setDatabase(new ArtCharDatabase(databaseContextObj.database.storage))\r\n\r\n  }, [databaseContextObj, database, index])\r\n\r\n  const [tempName, setTempName] = useState(name)\r\n  useEffect(() => setTempName(name), [name])\r\n\r\n  const onBlur = useCallback(() => {\r\n    database.dbMeta.set({ name: tempName })\r\n    if (!current && \"saveStorage\" in database.storage) (database.storage as ExtraStorage).saveStorage()\r\n  }, [tempName, database, current])\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n\r\n  return <CardDark sx={{ height: \"100%\", boxShadow: current ? \"0px 0px 0px 2px green inset\" : undefined }}>\r\n    <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n      < StyledInputBase value={tempName} sx={{ borderRadius: 1, px: 1, flexGrow: 1 }} onChange={(e) => setTempName(e.target.value)} onBlur={onBlur} onKeyDown={onKeyDOwn} />\r\n      {!current && <Button startIcon={<ImportExport />} onClick={onSwap} color=\"warning\">{t`DatabaseCard.button.swap`}</Button>}\r\n      <Chip color={current ? \"success\" : \"secondary\"} label={current ? t`DatabaseCard.currentDB` : `${t`DatabaseCard.title`} ${index}`} />\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Box display=\"flex\" gap={2}>\r\n        <Box flexGrow={1}>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.chars\" /> <strong>{numChar}</strong></Typography>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.arts\" /> <strong>{numArt}</strong></Typography>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.weapons\" /> <strong>{numWeapon}</strong></Typography>\r\n          {!!lastEdit && <Typography noWrap><strong>{(new Date(lastEdit).toLocaleString())}</strong></Typography>}\r\n        </Box>\r\n        <Box>\r\n          <Grid container spacing={1} columns={{ xs: 2 }} >\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeSvgIcon icon={faClipboard} />}>\r\n                <Trans t={t} i18nKey=\"DatabaseCard.button.copy\" />\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <ModalWrapper open={uploadOpen} onClose={onClose} >\r\n                <UploadCard onReplace={onUpload} />\r\n              </ModalWrapper>\r\n              <Button fullWidth component=\"span\" color=\"info\" startIcon={<Upload />} onClick={onOpen}>\r\n                {t`DatabaseCard.button.upload`}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} onClick={download} startIcon={<Download />}>\r\n                {t`DatabaseCard.button.download`}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} color=\"error\" onClick={onDelete} startIcon={<Delete />}>\r\n                {t`DatabaseCard.button.delete`}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { CardContent, Divider, MenuItem } from '@mui/material'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton'\r\nimport SqBadge from '../Components/SqBadge'\r\nimport { languageCodeList } from \"../i18n\"\r\nexport default function LanguageCard() {\r\n  const { t } = useTranslation();\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      {t(\"settings:languageCard.selectLanguage\")} <SqBadge color=\"warning\">{t(\"ui:underConstruction\")}</SqBadge>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <LanguageDropdown />\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nconst nativeLanguages = {\r\n  \"chs\": \"简体中文\",\r\n  \"cht\": \"繁體中文\",\r\n  \"de\": \"Deutsch\",\r\n  \"en\": \"English\",\r\n  \"es\": \"español\",\r\n  \"fr\": \"français\",\r\n  \"id\": \"Bahasa Indonesia\",\r\n  \"ja\": \"日本語\",\r\n  \"ko\": \"한국어\",\r\n  \"pt\": \"Português\",\r\n  \"ru\": \"Русский язык\",\r\n  \"th\": \"ภาษาไทย\",\r\n  \"vi\": \"Tiếng Việt\"\r\n}\r\nexport function LanguageDropdown() {\r\n  const { t, i18n } = useTranslation([\"ui\", \"settings\"]);\r\n  const onSetLanguage = (lang) => () => i18n.changeLanguage(lang);\r\n  const currentLang = i18n.languages[0];\r\n  return <DropdownButton fullWidth title={t('settings:languageCard.languageFormat', { language: t(`languages:${currentLang}`) })}>\r\n    {languageCodeList.map((lang) => <MenuItem key={lang} selected={currentLang === lang} disabled={currentLang === lang} onClick={onSetLanguage(lang)}>\r\n      <Trans i18nKey={`languages:${lang}`} />\r\n      {lang !== currentLang ? ` (${nativeLanguages[lang]})` : \"\"}\r\n    </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { CardContent, Divider, Typography } from '@mui/material'\r\nimport ReactGA from 'react-ga4'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport DatabaseCard from './DatabaseCard'\r\nimport LanguageCard from './LanguageCard'\r\n\r\nexport default function PageSettings() {\r\n  const { t } = useTranslation([\"settings\"]);\r\n  ReactGA.send({ hitType: \"pageview\", page: '/setting' })\r\n\r\n  return <CardDark sx={{ my: 1 }}>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"title\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <LanguageCard />\r\n      <DatabaseCard />\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');"],"names":["createSvgIcon","_jsx","d","InvisInput","styled","display","UploadCard","onReplace","database","useContext","DatabaseContext","t","useTranslation","useState","data","setdata","filename","setfilename","errorMsg","setErrorMsg","keepNotInImport","setKeepNotInImport","ignoreDups","setIgnoreDups","useMemo","parsed","JSON","parse","e","format","copyStorage","SandboxStorage","copyFrom","storage","importedDatabase","ArtCharDatabase","importResult","importGOOD","onUpload","file","target","files","value","name","reader","FileReader","onload","result","readAsText","CardLight","CardContent","sx","py","Trans","i18nKey","Grid","container","spacing","mb","item","htmlFor","accept","id","type","onChange","Button","component","color","startIcon","FileOpen","flexGrow","CardDark","px","Typography","icon","faFileCode","faArrowLeft","gap","flexWrap","Tooltip","title","placement","arrow","flexBasis","fullWidth","disabled","onClick","CheckBoxOutlineBlank","CheckBox","gutterBottom","variant","width","fontFamily","minHeight","resize","GOODUploadInfo","GOUploadAction","reset","source","artifacts","characters","weapons","Divider","MergeResult","dbTotal","arts","values","length","chars","total","import","new","unchanged","upgraded","remove","notInImport","beforeMerge","invalid","stringify","undefined","setDatabase","replaceDB","useCallback","clear","faFileUpload","DatabaseCard","databaseContextObj","dbIndex","parseInt","getString","flexDirection","columns","xs","md","range","map","i","DataCard","index","ExtraDatabaseWrapper","children","dbName","ExtraStorage","dbObj","localStorage","getItem","setStorage","removeForKeys","k","startsWith","db","saveStorage","Database","useDBMeta","lastEdit","current","useBoolState","uploadOpen","onOpen","onClose","numChar","keys","numArt","numWeapon","hasData","Boolean","copyToClipboard","navigator","clipboard","writeText","exportGOOD","then","alert","catch","console","error","onDelete","window","confirm","databaseName","extraStorage","removeItem","download","dateStr","Date","toISOString","split","replace","replaceAll","JSONStr","trim","a","document","createElement","href","encodeURIComponent","body","appendChild","click","removeChild","onSwap","tempStorage","set","tempName","setTempName","useEffect","onBlur","dbMeta","onKeyDOwn","key","height","boxShadow","justifyContent","borderRadius","onKeyDown","ImportExport","Chip","label","Box","noWrap","toLocaleString","FontAwesomeSvgIcon","faClipboard","ModalWrapper","open","Upload","Download","Delete","LanguageCard","SqBadge","LanguageDropdown","nativeLanguages","i18n","onSetLanguage","lang","changeLanguage","currentLang","languages","DropdownButton","language","languageCodeList","MenuItem","selected","PageSettings","ReactGA","hitType","page","my"],"sourceRoot":""}