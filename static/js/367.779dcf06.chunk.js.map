{"version":3,"file":"static/js/367.779dcf06.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactAutocomplete.tsx","Components/Artifact/ArtifactFilterDisplay.tsx","Components/Artifact/ArtifactLevelSlider.tsx","Util/MultiSelect.ts"],"sourcesContent":["import { Autocomplete, AutocompleteProps, AutocompleteRenderGroupParams, Box, Chip, List, ListSubheader, TextField, useTheme } from '@mui/material';\r\nimport { useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport i18n from '../../i18n';\r\nimport KeyMap from '../../KeyMap';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { allMainStatKeys, allSubstatKeys, MainStatKey, SubstatKey } from '../../Types/artifact';\r\nimport { allElementsWithPhy, ArtifactRarity, ArtifactSetKey } from '../../Types/consts';\r\nimport MenuItemWithImage from '../MenuItemWithImage';\r\nimport SolidColoredTextField from '../SolidColoredTextfield';\r\nimport { StarsDisplay } from '../StarDisplay';\r\nimport StatIcon from '../StatIcon';\r\n\r\ntype Grouper = string | number | undefined\r\n\r\ntype ArtifactMultiAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey\r\ntype ArtifactMultiAutocompleteOption<T extends ArtifactMultiAutocompleteKey, G extends Grouper> = {\r\n  key: T\r\n  label: string\r\n  grouper?: G\r\n}\r\ntype ArtifactMultiAutocompleteProps<T extends ArtifactMultiAutocompleteKey, G extends Grouper> = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<T, G>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtifactKeysWithGrouper: readonly { key: T, grouper?: G }[]\r\n  selectedArtifactKeys: T[]\r\n  setArtifactKeys: (keys: T[]) => void\r\n  getName: (key: T) => string\r\n  getImage: (key: T) => JSX.Element\r\n  label: string\r\n}\r\nfunction ArtifactMultiAutocomplete<T extends ArtifactMultiAutocompleteKey, G extends Grouper>({ allArtifactKeysWithGrouper, selectedArtifactKeys, setArtifactKeys, getName, getImage, label, ...props }:\r\n  ArtifactMultiAutocompleteProps<T, G>) {\r\n  const theme = useTheme()\r\n\r\n  const handleChange = (_, value: ArtifactMultiAutocompleteOption<T, G>[]) => {\r\n    setArtifactKeys(value.map(v => v.key))\r\n  }\r\n  const options = useMemo(() => allArtifactKeysWithGrouper.map(({ key, grouper }) => ({ key, label: getName(key), grouper })), [allArtifactKeysWithGrouper, getName])\r\n  return <Autocomplete\r\n    autoHighlight\r\n    multiple\r\n    disableCloseOnSelect\r\n    options={options}\r\n    value={selectedArtifactKeys.map(key => ({ key: key, label: getName(key) }))}\r\n    onChange={handleChange}\r\n    getOptionLabel={(option) => option.label}\r\n    isOptionEqualToValue={(option, value) => option.key === value.key}\r\n    renderInput={(params) => <TextField\r\n      {...params}\r\n      label={label}\r\n      variant=\"filled\"\r\n      InputLabelProps={{ style: { color: theme.palette.text.primary } }}\r\n      color={selectedArtifactKeys.length ? \"success\" : \"primary\"}\r\n      type=\"search\"\r\n    />}\r\n    renderOption={(props, option) => (\r\n      <MenuItemWithImage\r\n        key={option.key}\r\n        value={option.key}\r\n        image={getImage(option.key)}\r\n        text={option.label}\r\n        theme={theme}\r\n        isSelected={selectedArtifactKeys.includes(option.key)}\r\n        props={props}\r\n      />\r\n    )}\r\n    renderTags={(selected, getTagProps) => selected.map((value, index) => {\r\n      const element = allElementsWithPhy.find(ele => value.key === `${ele}_dmg_`)\r\n      const color = element ? element : undefined\r\n      return <Chip {...getTagProps({ index })} key={value.key} icon={getImage(value.key)} label={value.label} color={color} />\r\n    })}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSetMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<ArtifactSetKey, ArtifactRarity>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  artSetKeys: ArtifactSetKey[]\r\n  setArtSetKeys: (keys: ArtifactSetKey[]) => void\r\n}\r\nexport function ArtifactSetMultiAutocomplete({ artSetKeys, setArtSetKeys, ...props }: ArtifactSetMultiAutocompleteProps) {\r\n  const artifactSheets = usePromise(() => ArtifactSheet.getAll, [])\r\n  const { t } = useTranslation([\"artifact\", \"artifactNames_gen\"])\r\n  if (!artifactSheets) return null\r\n\r\n  const allArtifactSetsAndRarities = Object.entries(ArtifactSheet.setKeysByRarities(artifactSheets))\r\n    .flatMap(([rarity, sets]) => sets.map(set => ({ key: set, grouper: +rarity as ArtifactRarity })))\r\n    .sort(sortByRarityAndName)\r\n\r\n  return <ArtifactMultiAutocomplete<ArtifactSetKey, ArtifactRarity>\r\n    allArtifactKeysWithGrouper={allArtifactSetsAndRarities}\r\n    selectedArtifactKeys={artSetKeys}\r\n    setArtifactKeys={setArtSetKeys}\r\n    getName={(key: ArtifactSetKey) => artifactSheets[key].nameRaw}\r\n    getImage={(key: ArtifactSetKey) => artifactSheets[key].defIcon}\r\n    label={t(\"artifact:autocompleteLabels.sets\")}\r\n    groupBy={(option) => option.grouper?.toString() ?? \"\"}\r\n    renderGroup={(params: AutocompleteRenderGroupParams) => params.group && <List key={params.group} component={Box}>\r\n      <ListSubheader key={`${params.group}Header`} sx={{ top: \"-1em\" }}>\r\n        {params.group} <StarsDisplay stars={+params.group as ArtifactRarity} />\r\n      </ListSubheader>\r\n      {params.children}\r\n    </List>}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactMainStatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<MainStatKey, undefined>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  mainStatKeys: MainStatKey[]\r\n  setMainStatKeys: (keys: MainStatKey[]) => void\r\n}\r\nexport function ArtifactMainStatMultiAutocomplete({ mainStatKeys, setMainStatKeys, ...props }: ArtifactMainStatMultiAutocompleteProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <ArtifactMultiAutocomplete<MainStatKey, undefined>\r\n    allArtifactKeysWithGrouper={allMainStatKeys.map(key => ({ key }))}\r\n    selectedArtifactKeys={mainStatKeys}\r\n    setArtifactKeys={setMainStatKeys}\r\n    getName={(key: MainStatKey) => KeyMap.getArtStr(key)}\r\n    getImage={(key: MainStatKey) => StatIcon[key]}\r\n    label={t(\"autocompleteLabels.mainStats\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSubstatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<SubstatKey, undefined>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  substatKeys: SubstatKey[]\r\n  setSubstatKeys: (keys: SubstatKey[]) => void\r\n}\r\nexport function ArtifactSubstatMultiAutocomplete({ substatKeys, setSubstatKeys, ...props }: ArtifactSubstatMultiAutocompleteProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <ArtifactMultiAutocomplete<SubstatKey, undefined>\r\n    allArtifactKeysWithGrouper={allSubstatKeys.map(key => ({ key }))}\r\n    selectedArtifactKeys={substatKeys}\r\n    setArtifactKeys={setSubstatKeys}\r\n    getName={(key: SubstatKey) => KeyMap.getArtStr(key)}\r\n    getImage={(key: SubstatKey) => StatIcon[key]}\r\n    label={t(\"autocompleteLabels.substats\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSingleAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey | \"\"\r\ntype ArtifactSingleAutocompleteOption<T extends ArtifactSingleAutocompleteKey, G extends Grouper> = {\r\n  key: T\r\n  label: string\r\n  grouper?: G\r\n}\r\ntype ArtifactSingleAutocompleteProps<T extends ArtifactSingleAutocompleteKey, G extends Grouper> = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<T, G>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtifactKeysWithGrouper: readonly { key: T, grouper?: G }[]\r\n  selectedArtifactKey: T\r\n  setArtifactKey: (key: T | \"\") => void\r\n  getName: (key: T) => string\r\n  getImage: (key: T) => JSX.Element\r\n  label: string\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n}\r\nfunction ArtifactSingleAutocomplete<T extends ArtifactSingleAutocompleteKey, G extends Grouper>({ allArtifactKeysWithGrouper, selectedArtifactKey, setArtifactKey, getName, getImage, label, disable = () => false, showDefault = false, defaultText = \"\", defaultIcon = \"\", ...props }:\r\n  ArtifactSingleAutocompleteProps<T, G>) {\r\n  const theme = useTheme();\r\n\r\n  const options = useMemo(() =>\r\n    (showDefault\r\n      ? [{ key: \"\" as T, label: defaultText }]\r\n      : []\r\n    ).concat(allArtifactKeysWithGrouper.map(({ key, grouper }) => (\r\n      { key, label: getName(key), grouper }\r\n    ))), [allArtifactKeysWithGrouper, getName, defaultText, showDefault])\r\n\r\n  return <Autocomplete\r\n    autoHighlight\r\n    options={options}\r\n    clearIcon={selectedArtifactKey ? undefined : \"\"} // Hide the clear icon if the value is already default\r\n    value={{ key: selectedArtifactKey, label: getName(selectedArtifactKey) }}\r\n    onChange={(event, newValue, reason) => (event.type !== \"change\" || reason !== \"clear\") && setArtifactKey(newValue ? newValue.key : \"\")}\r\n    getOptionLabel={(option) => option.label ? option.label : defaultText}\r\n    isOptionEqualToValue={(option, value) => option.key === value.key}\r\n    getOptionDisabled={option => disable(option.key)}\r\n    renderInput={(props) => <SolidColoredTextField\r\n      {...props}\r\n      label={label}\r\n      startAdornment={getImage(selectedArtifactKey)}\r\n      hasValue={selectedArtifactKey ? true : false}\r\n    />}\r\n    renderOption={(props, option) => (\r\n      <MenuItemWithImage\r\n        key={option.key}\r\n        value={option.key}\r\n        image={getImage(option.key)}\r\n        text={option.label}\r\n        theme={theme}\r\n        isSelected={selectedArtifactKey === option.key}\r\n        props={props}\r\n      />\r\n    )}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSetSingleAutocompleteProps = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<ArtifactSetKey | \"\", ArtifactRarity>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  artSetKey: ArtifactSetKey | \"\"\r\n  setArtSetKey: (key: ArtifactSetKey | \"\") => void\r\n  label?: string\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n}\r\nexport function ArtifactSetSingleAutocomplete({ artSetKey, setArtSetKey, label = \"\", ...props }: ArtifactSetSingleAutocompleteProps) {\r\n  const artifactSheets = usePromise(() => ArtifactSheet.getAll, [])\r\n  const { t } = useTranslation([\"artifact\", \"artifactNames_gen\"])\r\n  label = label ? label : t(\"artifact:autocompleteLabels.set\")\r\n  if (!artifactSheets) return null\r\n\r\n  const allArtifactSetsAndRarities = Object.entries(ArtifactSheet.setKeysByRarities(artifactSheets))\r\n    .flatMap(([rarity, sets]) => sets.map(set => ({ key: set, grouper: +rarity as ArtifactRarity })))\r\n    .sort(sortByRarityAndName)\r\n\r\n  return <ArtifactSingleAutocomplete<ArtifactSetKey | \"\", ArtifactRarity>\r\n    allArtifactKeysWithGrouper={allArtifactSetsAndRarities}\r\n    selectedArtifactKey={artSetKey}\r\n    setArtifactKey={setArtSetKey}\r\n    getName={(key: ArtifactSetKey | \"\") => key && artifactSheets[key].nameRaw}\r\n    getImage={(key: ArtifactSetKey | \"\") => key ? artifactSheets[key].defIcon : <></>}\r\n    label={label}\r\n    groupBy={(option) => option.grouper?.toString() ?? \"\"}\r\n    renderGroup={(params: AutocompleteRenderGroupParams) => params.group && <List key={params.group} component={Box}>\r\n      <ListSubheader key={`${params.group}Header`} sx={{ top: \"-1em\" }}>\r\n        {params.group} <StarsDisplay stars={+params.group as ArtifactRarity} />\r\n      </ListSubheader>\r\n      {params.children}\r\n    </List>}\r\n    {...props}\r\n  />\r\n}\r\n\r\nfunction sortByRarityAndName(a: { key: ArtifactSetKey, grouper: ArtifactRarity }, b: { key: ArtifactSetKey, grouper: ArtifactRarity }) {\r\n  if (a.grouper > b.grouper) {\r\n    return -1\r\n  }\r\n  if (a.grouper < b.grouper) {\r\n    return 1\r\n  }\r\n\r\n  const aName = i18n.t(`artifactNames_gen:${a.key}`)\r\n  const bName = i18n.t(`artifactNames_gen:${b.key}`)\r\n  if (aName < bName) {\r\n    return -1\r\n  }\r\n  if (aName > bName) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n","import { faBan, faChartLine } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Grid, ToggleButton } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport { FilterOption } from \"../../PageArtifact/ArtifactSort\";\r\nimport { allArtifactRarities, allSlotKeys } from \"../../Types/consts\";\r\nimport { handleMultiSelect } from \"../../Util/MultiSelect\";\r\nimport CharacterAutocomplete from \"../Character/CharacterAutocomplete\";\r\nimport SolidToggleButtonGroup from \"../SolidToggleButtonGroup\";\r\nimport { StarsDisplay } from \"../StarDisplay\";\r\nimport { ArtifactMainStatMultiAutocomplete, ArtifactSetMultiAutocomplete, ArtifactSubstatMultiAutocomplete } from \"./ArtifactAutocomplete\";\r\nimport ArtifactLevelSlider from \"./ArtifactLevelSlider\";\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\";\r\n\r\nconst exclusionValues = [\"excluded\", \"included\"] as const\r\nconst lockedValues = [\"locked\", \"unlocked\"] as const\r\n\r\nconst rarityHandler = handleMultiSelect([...allArtifactRarities])\r\nconst slotHandler = handleMultiSelect([...allSlotKeys])\r\nconst exclusionHandler = handleMultiSelect([...exclusionValues])\r\nconst lockedHandler = handleMultiSelect([...lockedValues])\r\n\r\ninterface ArtifactFilterDisplayProps {\r\n  filterOption: FilterOption\r\n  filterOptionDispatch: (option: any) => void\r\n  disableSlotFilter?: boolean\r\n}\r\nexport default function ArtifactFilterDisplay({ filterOption, filterOptionDispatch, disableSlotFilter = false }: ArtifactFilterDisplayProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n\r\n  const { artSetKeys = [], mainStatKeys = [], rarity = [], slotKeys = [], levelLow, levelHigh, substats = [],\r\n    location = \"\", exclusion = [...exclusionValues], locked = [...lockedValues] } = filterOption\r\n\r\n  return <Grid container spacing={1}>\r\n    {/* left */}\r\n    <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      {/* Artifact stars filter */}\r\n      <SolidToggleButtonGroup fullWidth value={rarity} size=\"small\" >\r\n        {allArtifactRarities.map(star => <ToggleButton key={star} value={star} onClick={() => filterOptionDispatch({ rarity: rarityHandler(rarity, star) })}><StarsDisplay stars={star} /></ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n      {/* Artifact Slot */}\r\n      <SolidToggleButtonGroup fullWidth value={slotKeys} size=\"small\" disabled={disableSlotFilter}>\r\n        {allSlotKeys.map(slotKey => <ToggleButton key={slotKey} value={slotKey} onClick={() => filterOptionDispatch({ slotKeys: slotHandler(slotKeys, slotKey) })}>{artifactSlotIcon(slotKey)}</ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n      {/* exclusion + locked */}\r\n      <Box display=\"flex\" gap={1}>\r\n        <SolidToggleButtonGroup fullWidth value={exclusion} size=\"small\">\r\n          {exclusionValues.map((v, i) => <ToggleButton key={v} value={v} sx={{ display: \"flex\", gap: 1 }} onClick={() => filterOptionDispatch({ exclusion: exclusionHandler(exclusion, v) })}>\r\n            <FontAwesomeIcon icon={i ? faChartLine : faBan} /><Trans i18nKey={`exclusion.${v}`} t={t} />\r\n          </ToggleButton>)}\r\n        </SolidToggleButtonGroup>\r\n        <SolidToggleButtonGroup fullWidth value={locked} size=\"small\">\r\n          {lockedValues.map((v, i) => <ToggleButton key={v} value={v} sx={{ display: \"flex\", gap: 1 }} onClick={() => filterOptionDispatch({ locked: lockedHandler(locked, v) })}>\r\n            {i ? <LockOpen /> : <Lock />}<Trans i18nKey={`ui:${v}`} t={t} />\r\n          </ToggleButton>)}\r\n        </SolidToggleButtonGroup>\r\n      </Box>\r\n      {/* Artiface level filter */}\r\n      <ArtifactLevelSlider showLevelText levelLow={levelLow} levelHigh={levelHigh}\r\n        setLow={levelLow => filterOptionDispatch({ levelLow })}\r\n        setHigh={levelHigh => filterOptionDispatch({ levelHigh })}\r\n        setBoth={(levelLow, levelHigh) => filterOptionDispatch({ levelLow, levelHigh })} />\r\n      <Grid container display=\"flex\" gap={1}>\r\n        <Grid item flexGrow={1}>\r\n          {/* location */}\r\n          <CharacterAutocomplete\r\n            value={location}\r\n            onChange={location => filterOptionDispatch({ location })}\r\n            placeholderText={t(\"artifact:filterLocation.any\")}\r\n            defaultText={t(\"artifact:filterLocation.any\")}\r\n            labelText={t(\"artifact:filterLocation.location\")}\r\n            showDefault\r\n            showInventory\r\n            showEquipped\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n    {/* right */}\r\n    <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      {/* Artifact Set */}\r\n      <ArtifactSetMultiAutocomplete artSetKeys={artSetKeys} setArtSetKeys={artSetKeys => filterOptionDispatch({ artSetKeys })} />\r\n      <ArtifactMainStatMultiAutocomplete mainStatKeys={mainStatKeys} setMainStatKeys={mainStatKeys => filterOptionDispatch({ mainStatKeys })} />\r\n      <ArtifactSubstatMultiAutocomplete substatKeys={substats} setSubstatKeys={substats => filterOptionDispatch({ substats })} />\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { Card, Slider } from \"@mui/material\"\r\nimport { useCallback, useEffect, useState } from \"react\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport CustomNumberInput from \"../CustomNumberInput\"\r\n\r\nexport default function ArtifactLevelSlider({ levelLow, levelHigh, setLow, setHigh, setBoth, dark = false, disabled = false, showLevelText = false }: {\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  setLow: (low: number) => void,\r\n  setHigh: (high: number) => void,\r\n  setBoth: (low: number, high: number) => void,\r\n  dark?: boolean,\r\n  disabled?: boolean,\r\n  showLevelText?: boolean,\r\n}) {\r\n  const [sliderLow, setsliderLow] = useState(levelLow)\r\n  const [sliderHigh, setsliderHigh] = useState(levelHigh)\r\n  const setSlider = useCallback(\r\n    (e: unknown, value: number | number[]) => {\r\n      if (typeof value == \"number\") throw new TypeError()\r\n      const [l, h] = value\r\n      setsliderLow(l)\r\n      setsliderHigh(h)\r\n    },\r\n    [setsliderLow, setsliderHigh])\r\n  useEffect(() => setsliderLow(levelLow), [setsliderLow, levelLow])\r\n\r\n  useEffect(() => setsliderHigh(levelHigh), [setsliderHigh, levelHigh])\r\n  return <Card sx={{ width: \"100%\", display: \"flex\", alignItems: \"center\", bgcolor: dark ? \"contentDark.main\" : \"contentLight.main\" }}>\r\n    <CustomNumberInput\r\n      value={sliderLow}\r\n      onChange={val => setLow(clamp(val, 0, levelHigh))}\r\n      sx={{ px: 1, pl: showLevelText ? 2 : undefined, width: showLevelText ? 100 : 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      startAdornment={showLevelText ? \"Level: \" : undefined}\r\n      disabled={disabled}\r\n    />\r\n    <Slider sx={{ width: 100, flexGrow: 1, mx: 2 }}\r\n      getAriaLabel={() => 'Arifact Level Range'}\r\n      value={[sliderLow, sliderHigh]}\r\n      onChange={setSlider}\r\n      onChangeCommitted={(e, value) => setBoth(value[0], value[1])}\r\n      valueLabelDisplay=\"auto\"\r\n      min={0} max={20} step={1} marks\r\n      disabled={disabled}\r\n    />\r\n    <CustomNumberInput\r\n      value={sliderHigh}\r\n      onChange={val => setHigh(clamp(val, levelLow, 20))}\r\n      sx={{ px: 1, width: 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      disabled={disabled}\r\n    />\r\n  </Card>\r\n}\r\n","import { toggleArr } from \"./Util\"\r\n\r\nexport function handleMultiSelect<T>(allKeys: T[]) {\r\n  return (arr: T[], v: T): T[] => {\r\n    const len = arr.length\r\n    if (len === allKeys.length) return [v]\r\n    if (len === 1 && arr[0] === v) return [...allKeys]\r\n    return [...new Set(toggleArr(arr, v))]\r\n  }\r\n}\r\n"],"names":["ArtifactMultiAutocomplete","allArtifactKeysWithGrouper","selectedArtifactKeys","setArtifactKeys","getName","getImage","label","props","theme","useTheme","options","useMemo","map","key","grouper","autoHighlight","multiple","disableCloseOnSelect","value","onChange","_","v","getOptionLabel","option","isOptionEqualToValue","renderInput","params","variant","InputLabelProps","style","color","palette","text","primary","length","type","renderOption","image","isSelected","includes","renderTags","selected","getTagProps","index","element","allElementsWithPhy","ele","undefined","icon","ArtifactSetMultiAutocomplete","artSetKeys","setArtSetKeys","artifactSheets","usePromise","ArtifactSheet","t","useTranslation","allArtifactSetsAndRarities","Object","entries","flatMap","rarity","set","sort","sortByRarityAndName","nameRaw","defIcon","groupBy","toString","renderGroup","group","component","Box","sx","top","stars","children","ArtifactMainStatMultiAutocomplete","mainStatKeys","setMainStatKeys","allMainStatKeys","KeyMap","StatIcon","ArtifactSubstatMultiAutocomplete","substatKeys","setSubstatKeys","allSubstatKeys","ArtifactSingleAutocomplete","selectedArtifactKey","setArtifactKey","disable","showDefault","defaultText","defaultIcon","concat","clearIcon","event","newValue","reason","getOptionDisabled","startAdornment","hasValue","ArtifactSetSingleAutocomplete","artSetKey","setArtSetKey","a","b","aName","i18n","bName","exclusionValues","lockedValues","rarityHandler","handleMultiSelect","allArtifactRarities","slotHandler","allSlotKeys","exclusionHandler","lockedHandler","ArtifactFilterDisplay","filterOption","filterOptionDispatch","disableSlotFilter","slotKeys","levelLow","levelHigh","substats","location","exclusion","locked","container","spacing","item","xs","md","display","flexDirection","gap","fullWidth","size","star","onClick","disabled","slotKey","artifactSlotIcon","i","faChartLine","faBan","i18nKey","showLevelText","setLow","setHigh","setBoth","flexGrow","placeholderText","labelText","showInventory","showEquipped","ArtifactLevelSlider","dark","useState","sliderLow","setsliderLow","sliderHigh","setsliderHigh","setSlider","useCallback","e","TypeError","l","h","useEffect","width","alignItems","bgcolor","val","clamp","px","pl","inputProps","textAlign","mx","getAriaLabel","onChangeCommitted","valueLabelDisplay","min","max","step","marks","allKeys","arr","len","Set","toggleArr"],"sourceRoot":""}