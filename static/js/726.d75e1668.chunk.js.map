{"version":3,"file":"static/js/726.d75e1668.chunk.js","mappings":"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","sources":["Data/Characters/dataUtil.tsx","Data/Characters/Albedo/index.tsx","Data/Characters/Aloy/index.tsx","Data/Characters/Amber/index.tsx","Data/Characters/AratakiItto/index.tsx","Data/Characters/Barbara/index.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Chongyun/index.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/Gorou/index.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Kaeya/index.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/KamisatoAyato/index.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/Klee/index.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/Lisa/index.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/Qiqi/index.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Razor/index.tsx","Data/Characters/Rosaria/index.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Sayu/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Tartaglia/index.tsx","Data/Characters/Thoma/index.tsx","Data/Characters/Traveler/anemo/index.tsx","Data/Characters/Traveler/geo/index.tsx","Data/Characters/Traveler/electro/index.tsx","Data/Characters/Traveler/index.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/Xinyan/index.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yanfei/index.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx","Formula/reaction.ts"],"sourcesContent":["import { SubstatKey } from \"pipeline\";\r\nimport { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, lookup, percent, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\n\r\nexport const infusionNode = stringPrio(\r\n  input.infusion.nonOverridableSelf,\r\n  input.infusion.team,\r\n  input.infusion.overridableSelf)\r\nconst inferredHitEle = stringPrio(\r\n  lookup(input.hit.move, {\r\n    \"skill\": input.charEle, \"burst\": input.charEle,\r\n  }, undefined),\r\n  lookup(input.weaponType, {\r\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\r\n    catalyst: input.charEle,\r\n  }, undefined),\r\n  \"physical\"\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healNode = prod(base, sum(unit, input.total.heal_, input.total.incHeal_))\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, prod, greaterEq, naught } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Albedo\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    blossomDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    blossomCd: 2,\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    blossomDmg: skillParam_gen.burst[b++],\r\n    blossomAmt: 7,\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    blossomDmgInc: 0.25,\r\n    hpThresh: 50,\r\n  },\r\n  passive2: {\r\n    eleMasInc: skillParam_gen.passive2[0][0],\r\n    duration: skillParam_gen.passive2[1][0]\r\n  },\r\n  constellation1: {\r\n    blossomEner: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    blossomDmgInc: 0.30,\r\n    maxStacks: 4,\r\n    stackDuration: 30\r\n  },\r\n  constellation4: {\r\n    plunging_dmg_: 0.3,\r\n  },\r\n  constellation6: {\r\n    bonus_dmg_: 0.17\r\n  }\r\n} as const\r\n\r\nconst [condBurstBlossomPath, condBurstBlossom] = cond(key, \"burstBlossom\")\r\nconst [condBurstUsedPath, condBurstUsed] = cond(key, \"burstUsed\")\r\nconst p2Burst_eleMas = equal(condBurstUsed, \"burstUsed\", greaterEq(input.asc, 4, datamine.passive2.eleMasInc))\r\n\r\nconst [condP1EnemyHpPath, condP1EnemyHp] = cond(key, \"p1EnemyHp\")\r\nconst p1_blossom_dmg_ = equal(condP1EnemyHp, \"belowHp\", greaterEq(input.asc, 1, datamine.passive1.blossomDmgInc))\r\n\r\nconst [condC2StacksPath, condC2Stacks] = cond(key, \"c2Stacks\")\r\nconst c2_burst_dmgInc = greaterEq(input.constellation, 2,\r\n  prod(\r\n    lookup(\r\n      condC2Stacks,\r\n      Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i => \r\n        [i,\r\n        prod(i, datamine.constellation2.blossomDmgInc)]\r\n        )\r\n      ),\r\n      naught\r\n    ),\r\n    input.total.def\r\n  )\r\n)\r\n\r\nconst [condSkillInFieldPath, condSkillInField] = cond(key, \"skillInField\")\r\nconst c4_plunging_dmg_disp = greaterEq(input.constellation, 4,\r\n  equal(condSkillInField, \"skillInField\", datamine.constellation4.plunging_dmg_)\r\n)\r\nconst c4_plunging_dmg_ = equal(input.activeCharKey, target.charKey, c4_plunging_dmg_disp)\r\n\r\n// Maybe we should just have a single conditional for \"in field AND crystallize shield\"?\r\n// This is technically a nested conditional\r\nconst [condC6CrystallizePath, condC6Crystallize] = cond(key, \"c6Crystallize\")\r\nconst c6_Crystal_all_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condSkillInField, \"skillInField\",\r\n    equal(condC6Crystallize, \"c6Crystallize\", datamine.constellation6.bonus_dmg_)\r\n  )\r\n)\r\nconst c6_Crystal_all_dmg_ = equal(input.activeCharKey, target.charKey, c6_Crystal_all_dmg_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n    blossom: dmgNode(\"def\", datamine.skill.blossomDmg, \"skill\", { total: { skill_dmg_: p1_blossom_dmg_ } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    blossom: equal(\"isoOnField\", condBurstBlossom, dmgNode(\"atk\", datamine.burst.blossomDmg, \"burst\")),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: p2Burst_eleMas,\r\n      plunging_dmg_: c4_plunging_dmg_,\r\n      all_dmg_: c6_Crystal_all_dmg_,\r\n    }\r\n  },\r\n  premod: {\r\n    burst_dmgInc: c2_burst_dmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto, \r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.blossom, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: trm(\"blossomCD\"),\r\n        value: datamine.skill.blossomCd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1EnemyHp,\r\n          path: condP1EnemyHpPath,\r\n          name: st(\"enemyLessPercentHP\", { percent: datamine.passive1.hpThresh }),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          states: {\r\n            belowHp: {\r\n              fields: [{\r\n                node: infoMut(p1_blossom_dmg_, { key: `char_${key}:blossomDmg_` })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"enerPerBlossom\"),\r\n          value: datamine.constellation1.blossomEner,\r\n          fixed: 1,\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condSkillInField,\r\n          path: condSkillInFieldPath,\r\n          name: st(\"activeCharField\"),\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            skillInField: {\r\n              fields: [{\r\n                node: infoMut(c4_plunging_dmg_disp, { key: \"plunging_dmg_\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6Crystallize,\r\n          path: condC6CrystallizePath,\r\n          name: st(\"protectedByShieldCrystal\"),\r\n          canShow: greaterEq(input.constellation, 6, equal(condSkillInField, \"skillInField\", 1)),\r\n          teamBuff: true,\r\n          states: {\r\n            c6Crystallize: {\r\n              fields: [{\r\n                node: infoMut(c6_Crystal_all_dmg_disp, { key: \"all_dmg_\"}),\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstBlossom,\r\n        path: condBurstBlossomPath,\r\n        name: trm(\"isotomaOnField\"),\r\n        states: {\r\n          isoOnField: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.blossom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n              textSuffix: st(\"brHits\", { count: datamine.burst.blossomAmt })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condBurstUsed,\r\n          path: condBurstUsedPath,\r\n          name: st(\"afterUse.burst\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            burstUsed: {\r\n              fields: [{\r\n                node: p2Burst_eleMas\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive2.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2Stacks,\r\n          path: condC2StacksPath,\r\n          name: trm(\"c2Stacks\"),\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i => \r\n            [i, {\r\n              name: st(\"stack\", { count: i }),\r\n              fields: [{\r\n                node: c2_burst_dmgInc\r\n              }]\r\n            }]\r\n          ))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, naught, percent, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Aloy\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1.1\r\n      skillParam_gen.auto[a++], // 1.2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    freezeBombDmg: skillParam_gen.skill[s++],\r\n    chillWaterBomblets: skillParam_gen.skill[s++],\r\n    atkDecrease: skillParam_gen.skill[s++],\r\n    atkDecreaseDuration: skillParam_gen.skill[s++][0],\r\n    coilNormalDmgBonus1: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus2: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus3: skillParam_gen.skill[s++],\r\n    rushingNormalDmgBonus: skillParam_gen.skill[s++],\r\n    rushingDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atkInc: 0.16,\r\n    teamAtkInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condCoilPath, condCoil] = cond(key, \"coil\")\r\nconst normal_dmg_ = lookup(condCoil, {\r\n  \"coil1\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus1, { key: \"_\" }),\r\n  \"coil2\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus2, { key: \"_\" }),\r\n  \"coil3\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus3, { key: \"_\" }),\r\n  \"rush\": subscript(input.total.skillIndex, datamine.skill.rushingNormalDmgBonus, { key: \"_\" })\r\n}, naught)\r\nconst atk_ = greaterEq(input.asc, 1, unequal(condCoil, undefined, percent(datamine.passive1.atkInc)))\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst teamAtk_ = greaterEq(input.asc, 1, equal(condA1, \"on\",\r\n  unequal(input.activeCharKey, key, percent(datamine.passive1.teamAtkInc))))\r\n\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst cryo_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4, Object.fromEntries(range(1, 10).map(i => [i, percent(datamine.passive2.cryoDmgBonus * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\", {\r\n      hit: {\r\n        ele: matchFull(\"rush\", condCoil, constant(elementKey), constant(\"physical\"))\r\n      }\r\n    })])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    freezeBombDmg: dmgNode(\"atk\", datamine.skill.freezeBombDmg, \"skill\"),\r\n    chillWaterBomblets: dmgNode(\"atk\", datamine.skill.chillWaterBomblets, \"skill\"),\r\n    atkDecrease: subscript(input.total.skillIndex, datamine.skill.atkDecrease, { key: \"_\" })\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  premod: {\r\n    normal_dmg_,\r\n    atk_,\r\n    cryo_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: teamAtk_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i === 0 ? 0 : -1)}` }),\r\n            textSuffix: i === 0 ? \"(1)\" : i === 1 ? \"(2)\" : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.freezeBombDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.chillWaterBomblets, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => (datamine.skill.atkDecrease[data.get(input.total.skillIndex).value] * 100).toFixed(1),\r\n        unit: \"%\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.atkDecreaseDuration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.7\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condCoil,\r\n        path: condCoilPath,\r\n        name: trm(\"skill.coil\"),\r\n        states: {\r\n          \"coil1\": {\r\n            name: trm(\"skill.coil1\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil2\": {\r\n            name: trm(\"skill.coil2\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil3\": {\r\n            name: trm(\"skill.coil3\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"rush\": {\r\n            name: trm(\"skill.rush\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }, {\r\n              text: trm(\"normCryoInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.6\"),\r\n              value: datamine.skill.rushingDuration,\r\n              unit: \"s\"\r\n            }]\r\n          },\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: atk_\r\n      }, {\r\n        canShow: (data) => data.get(condCoil).value !== undefined && data.get(input.asc).value >= 1,\r\n        text: sgt(\"duration\"),\r\n        value: datamine.passive1.duration,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, key, 1)),\r\n        teamBuff: true,\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: infoMut(teamAtk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: greaterEq(input.asc, 4, equal(\"rush\", condCoil, 1)),\r\n        name: trm(\"skill.rushState\"),\r\n        states: Object.fromEntries(range(1, 10).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{ node: cryo_dmg_ }]\r\n        }]))\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Amber\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    unknown: skillParam_gen.skill[s++], // what is this??\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerWave: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    rainDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    aoeInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    atkInc: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    secArrowDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    manualDetionationDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    moveSpdInc: skillParam_gen.constellation6[0],\r\n    atkInc: skillParam_gen.constellation6[1],\r\n    duration: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst burst_critRate_ = greaterEq(input.asc, 1, percent(datamine.passive1.critRateInc))\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst atk_ = equal(\"on\", condA4, percent(datamine.passive2.atkInc))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst moveSPD_ = equal(\"on\", condC6, percent(datamine.constellation6.moveSpdInc))\r\nconst teamAtk_ = equal(\"on\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('pyro') } }),\r\n    secondAimed: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.secArrowDmg), dmgNode(\"atk\", datamine.charged.aimed, \"charged\"))),\r\n    secondAimedCharged: greaterEq(input.constellation, 1, prod(dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\",\r\n      { hit: { ele: constant('pyro') } }), percent(datamine.constellation1.secArrowDmg))),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    rainDmg: dmgNode(\"atk\", datamine.burst.rainDmg, \"burst\"),\r\n    dmgPerWave: dmgNode(\"atk\", datamine.burst.dmgPerWave, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    manualDetonationDmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { premod: { skill_dmg_: percent(datamine.constellation2.manualDetionationDmg) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    atk_,\r\n    burst_critRate_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      moveSPD_,\r\n      atk_: teamAtk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        },]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation2.manualDetonationDmg, { key: `char_${key}:manualDetonationDmg` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => data.get(input.constellation).value >= 4 ? datamine.skill.cd - datamine.skill.cd * 0.2 : datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        text: st(\"charges\"),\r\n        value: 2,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmgPerWave, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.rainDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6CondName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: teamAtk_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        text: trm(\"critRateBonus\"),\r\n        value: datamine.passive1.critRateInc * 100,\r\n        unit: \"%\"\r\n      }, {\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        text: trm(\"aoeRangeBonus\"),\r\n        value: datamine.passive1.aoeInc * 100,\r\n        unit: \"%\"\r\n      }, {\r\n        node: burst_critRate_\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: trm(\"a4CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, min, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\n\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    initialStacks: skillParam_gen.constellation1[0],\r\n    timedStacks: skillParam_gen.constellation1[1]\r\n  },\r\n  constellation2: {\r\n    burstCdRed: skillParam_gen.constellation2[0],\r\n    energyRegen: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC2BurstRed = prod(min(tally.geo, 3), datamine.constellation2.burstCdRed)\r\nconst nodeC2EnergyRegen = prod(min(tally.geo, 3), datamine.constellation2.energyRegen)\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.ss.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.stam,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1.name\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condP1,\r\n        path: condP1Path,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeP1AtkSpd\r\n            }]\r\n          }]\r\n        ))\r\n      }), sectionTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` })\r\n      }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n      sectionTemplate(\"constellation6\", tr, c6, [{\r\n        node: nodeC6CritDMG\r\n      }], undefined, data => data.get(input.constellation).value >= 6, false, true), {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              node: nodeBurstAtkSpd,\r\n            },\r\n            ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n            {\r\n              node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"c1.initialGain\"),\r\n          value: datamine.constellation1.initialStacks\r\n        }, {\r\n          text: trm(\"c1.timedGain\"),\r\n          value: datamine.constellation1.timedStacks\r\n        }], undefined,\r\n          data => data.get(input.constellation).value >= 1 && data.get(condBurst).value === \"on\",\r\n          false, true),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: st(\"burstCDRed\"),\r\n          value: data => data.get(nodeC2BurstRed).value,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }, {\r\n          text: st(\"energyRegen\"),\r\n          value: data => data.get(nodeC2EnergyRegen).value,\r\n        }], undefined,\r\n          data => data.get(input.constellation).value >= 2 && data.get(condBurst).value === \"on\",\r\n          false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          name: trm(\"c4.name\"),\r\n          teamBuff: true,\r\n          value: condC4,\r\n          path: condC4Path,\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeC4Atk\r\n              }, {\r\n                node: nodeC4Def\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation4.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{ node: nodeC6CritDMG }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Barbara\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    cregen_hp_: skillParam_gen.skill[s++],\r\n    cregen_hp: skillParam_gen.skill[s++],\r\n    regen_hp_: skillParam_gen.skill[s++],\r\n    regen_hp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    hp_: skillParam_gen.burst[b++],\r\n    hp: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stam: -skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    ext: skillParam_gen.passive2[0][0],\r\n    maxExt: skillParam_gen.passive2[0][1],\r\n  },\r\n  constellation2: {\r\n    cdDec: 0.15,\r\n    hydro_dmg_: 0.15\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodeA1 = greaterEq(input.asc, 1, equal(condSkill, \"on\", equal(input.activeCharKey, target.charKey, datamine.passive1.stam)))\r\nconst nodeA1Display = greaterEq(input.asc, 1, equal(condSkill, \"on\", datamine.passive1.stam))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(condC2, \"on\", equal(input.activeCharKey, target.charKey, datamine.constellation2.hydro_dmg_)))\r\nconst nodeC2Display = greaterEq(input.constellation, 2, equal(condC2, \"on\", datamine.constellation2.hydro_dmg_))\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    regen: healNodeTalent(\"hp\", datamine.skill.regen_hp_, datamine.skill.regen_hp, \"skill\"),\r\n    cregen: healNodeTalent(\"hp\", datamine.skill.cregen_hp_, datamine.skill.cregen_hp, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: healNodeTalent(\"hp\", datamine.burst.hp_, datamine.burst.hp, \"burst\"),\r\n  }\r\n}\r\n\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1,\r\n      hydro_dmg_: nodeC2,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.regen, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.cregen, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: tr(`skill.skillParams.3`),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(`skill.skillParams.4`),\r\n        value: data => data.get(input.constellation).value >= 2 ? `${datamine.skill.cd}s - ${datamine.constellation2.cdDec * 100}%` : `${datamine.skill.cd}s`,\r\n      },]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.0`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"passive1.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA1Display, { key: \"staminaDec_\" }),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"constellation2.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC2Display, { key: \"hydro_dmg_\" }),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Beidou\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    dmgBase: skillParam_gen.skill[s++],\r\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    lightningDmg: skillParam_gen.burst[b++],\r\n    damageReduction: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  //pasive 1: 2, //additional targets for lightning arc\r\n  ascension4: {\r\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\r\n    chargeDmg_: skillParam_gen.passive2[0][0],\r\n    attackSpeed: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    shieldHp_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\n//Toggable stuff:\r\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\r\n// C6: During the duration of <b>Stormbreaker</b>\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\r\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\r\n\r\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\r\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\r\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\r\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    electroShield: shieldElement(\"electro\", shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"),\r\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\r\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\r\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\r\n  },\r\n  burst: {\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0))),\r\n    shield: greaterEq(input.constellation, 1, shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)),\r\n  },\r\n  constellation4: {\r\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, customBonus: {\r\n    normal_dmg_: nodeSkillNormalDmg_,\r\n    charged_dmg_: nodeSkillChargeDmg_,\r\n    atkSPD_: nodeSkillAttackSpeed_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: nodeBurstElectroResRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        { node: infoMut(dmgFormulas.skill.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }), },\r\n        { node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }), },\r\n        {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }\r\n      ], {\r\n        teamBuff: false,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"tidecallerMaxDmg\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkillNormalDmg_,\r\n            }, {\r\n              node: nodeSkillChargeDmg_,\r\n            }, {\r\n              node: nodeSkillAttackSpeed_,\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"a4charge\"),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` }) },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.energyCost,\r\n        },\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"duringBurst\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeBurstElectroResRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [\r\n        { node: infoMut(dmgFormulas.constellation1.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }) },\r\n        { node: infoMut(dmgFormulas.constellation1.shield, { key: `char_${key}_gen:skill.skillParams.0` }) },\r\n      ]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, []),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, []),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 0.2, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 0.5, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst a1SkillCd = greaterEq(input.asc, 1, datamine.passive1.cd_red)\r\n\r\nconst c1Atk = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_` })\r\n\r\nconst atkIncRatio = sum(subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" }), c1Atk)\r\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\r\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\r\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1Atk, input.base.atk))\r\nconst activeInAreaAtkDisp = prod(atkIncRatio, input.base.atk)\r\nconst activeInAreaAtk = equal(activeInArea, 1, activeInAreaAtkDisp)\r\n\r\nconst activeInAreaA4 = greaterEq(input.asc, 4,\r\n  equal(activeInArea, 1, datamine.passive2.cd_red)\r\n)\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1,\r\n  greaterEq(input.constellation, 6, datamine.constellation6.pyro_dmg)\r\n)\r\nconst activeInAreaC6Infusion = equalStr(c6AndCorrectWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: activeInAreaAtk,\r\n  },\r\n  constellation4: {\r\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: activeInAreaC6PyroDmg,\r\n    },\r\n    total: {\r\n      // Not 100% sure if this should be in premod or total\r\n      atk: activeInAreaAtk,\r\n    },\r\n    infusion: {\r\n      team: activeInAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        // Press\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n      }, {\r\n        text: sgt(\"press.cd\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n      }, {\r\n        // Lvl 1\r\n        node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl1CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n      }, {\r\n        // Lvl 2\r\n        node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl2CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          node: infoMut(a1SkillCd, { key: \"skillCDRed_\" })\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(activeInAreaAtkDisp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: infoMut(activeInAreaA4, { key: \"skillCDRed_\" })\r\n        }], undefined,\r\n          data => data.get(input.asc).value >= 4 && data.get(condInArea).value === \"activeInArea\",\r\n          false, true),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"additionalATKRatio\"),\r\n          node: c1Atk\r\n        }, {\r\n          node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\r\n        }], undefined, data => data.get(input.constellation).value >= 2, true, true),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          node: constant(datamine.constellation6.pyro_dmg, { key: \"pyro_dmg_\", variant: \"pyro\" })\r\n        }, {\r\n          text: trm(\"c6PyroInfusion\")\r\n        }], undefined,\r\n          data => data.get(input.constellation).value >= 6 && data.get(condInArea).value === \"activeInArea\",\r\n          true, true)\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\r\n        states: {\r\n          underHP: {\r\n            fields: [{\r\n              node: underHP\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(activeInAreaA4).value);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Chongyun\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin_dmg: skillParam_gen.auto[4],\r\n    final_dmg: skillParam_gen.auto[5],\r\n    stamina: skillParam_gen.auto[6][0],\r\n    duration: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    infusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    fieldDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atk_spd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0],\r\n    res: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    cdr: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    energy_regen: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    burst_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst skillDmg = dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spin_dmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.final_dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg,\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, skillDmg),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(percent(datamine.constellation1.dmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4,\r\n  equal(condAsc4, \"hit\",\r\n    -0.10\r\n  )\r\n)\r\nconst activeInArea = equal(\"activeInArea\", condSkill, equal(input.activeCharKey, target.charKey, 1))\r\n\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1, percent(0.08))\r\nconst nodeAsc1 = equal(activeInArea, 1, nodeAsc1Disp)\r\n\r\nconst correctWep =\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0));\r\n\r\nconst activeInAreaInfusion = equalStr(correctWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.burst_dmg_))\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_enemyRes_: nodeAsc4,\r\n      atkSPD_: nodeAsc1\r\n    },\r\n    infusion: {\r\n      team: activeInAreaInfusion,\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.fieldDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: trm(\"infusion\"),\r\n              variant: elementKey\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.infusionDuration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: infoMut(nodeAsc1Disp, { key: \"atkSPD_\" })\r\n            }]\r\n          },\r\n        }\r\n      }),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.1\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.burst.enerCost,\r\n          }, {\r\n            text: trm(\"blades\"),\r\n            value: data => data.get(input.constellation).value < 6 ? 3 : 4\r\n          }]\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2` }),\r\n      }], {\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        value: condAsc4,\r\n        path: condAsc4Path,\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        description: tr(\"passive2.description\"),\r\n        name: trm(\"asc4Cond\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeAsc4\r\n            }]\r\n          },\r\n        }\r\n      }\r\n      ),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:constellation1` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\nconst [tr] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n    hpThresh_: 0.5,\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, equal(condBurst, \"on\", datamine.passive2.pyroInc))\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n  constellation4: {\r\n    secondHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional)),\r\n    thirdHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: {\r\n    // CAUTION: Technically, this infusion is overridable,\r\n    // but it should also be higher prio than `team` because\r\n    // it refreshes faster than auras. So we put it here instead.\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n          unit: 's'\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation4.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation4.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n      }], {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"afterUse.skill\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6DmgBonus,\r\n            }, {\r\n              node: nodeC6SpdBonus\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.pyro\"),\r\n              variant: \"pyro\",\r\n            }, {\r\n              node: nodeA4Bonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: st(\"enemyGreaterPercentHP\", { percent: datamine.constellation1.hpThresh_ * 100 }),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1Bonus,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: st(\"takeDmg\"),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n          [i, {\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: nodeC2AtkBonus\r\n            }, {\r\n              node: nodeC2SpdBonus\r\n            }]\r\n          }]\r\n        ))\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Diona\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    icyPawDmg: skillParam_gen.skill[s++],\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    fieldDmg: skillParam_gen.burst[b++],\r\n    healHp_: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\r\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\r\n  },\r\n  passive2: {\r\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\r\n    duration: skillParam_gen.passive1[p2++][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\r\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\r\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\r\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\r\n  },\r\n  constellation6: {\r\n    healingBonus_: skillParam_gen.constellation6[0],\r\n    emBonus: skillParam_gen.constellation6[1],\r\n  },\r\n} as const\r\n\r\nconst [condC6BelowPath, condC6Below] = cond(key, \"Constellation6Low\")\r\nconst [condC6AbovePath, condC6Above] = cond(key, \"Constellation6High\")\r\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\r\n\r\nconst holdSkillShieldStr_ = { \"customBonus\": { \"shield_\": percent(0.75) } }\r\n//C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\r\n//100% if not C2, 175% if C2 or higher\r\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\r\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\r\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\", holdSkillShieldStr_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\r\n    pressShield: nodeSkillShieldPress,\r\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\r\n    holdShield: nodeSkillShieldHold,\r\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\r\n  },\r\n  burst: {\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\r\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\r\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\r\n\r\nconst nodeC6healing_Disp = equal(condC6Below, \"on\", percent(datamine.constellation6.healingBonus_),)\r\nconst nodeC6healing_ = equal(input.activeCharKey, target.charKey, nodeC6healing_Disp)\r\nconst nodeC6emDisp = equal(condC6Above, \"on\", datamine.constellation6.emBonus,)\r\nconst nodeC6em = equal(input.activeCharKey, target.charKey, nodeC6emDisp)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, premod: {\r\n    skill_dmg_: nodeC2skillDmg_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1Stamina,\r\n      moveSPD_: nodeA1MoveSpeed,\r\n      eleMas: nodeC6em,\r\n      incHeal_: nodeC6healing_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            },\r\n            ]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ]\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        //Shield DMG Absorption\r\n        { node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.pressShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }), },\r\n        //Icy Paw DMG\r\n        { node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        {\r\n          text: trm(\"skillDuration\"),\r\n          value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        },\r\n        //Press CD\r\n        {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.cdPress,\r\n          unit: \"s\"\r\n        },\r\n        //Holding CD\r\n        {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\",\r\n        },\r\n      ],\r\n        //Cat's Tail Secret Menu (A1)\r\n        {\r\n          teamBuff: true,\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: trm(`a1shielded`),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          header: conditionalHeader(\"passive1\", tr, passive1), description: tr(`passive1.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeA1MoveSpeed,\r\n              }, {\r\n                node: nodeA1Stamina,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      ),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }), },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6Below,\r\n        path: condC6BelowPath,\r\n        name: trm(`c6below`),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC6healing_Disp, { key: \"incHeal_\" }),\r\n            }]\r\n          }\r\n        }\r\n      }, [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condC6Above,\r\n          path: condC6AbovePath,\r\n          name: trm(`c6above`),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(nodeC6emDisp, { key: \"eleMas\" }),\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, []),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2skillDmg_ }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, []),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.8\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.8\"),\r\n            value: `${datamine.skill.pressCd}`,\r\n            unit: 's'\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: `${datamine.skill.holdCd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: 2,\r\n          },],\r\n          conditional: { // Grimheart\r\n            value: condGrimheart,\r\n            path: condGrimheartPath,\r\n            name: trm(\"skillC.name\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              \"stack1\": {\r\n                name: st(\"stack\", { count: 1 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"stack2\": {\r\n                name: st(\"stack\", { count: 2 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"consumed\": {\r\n                name: \"Consumed\",\r\n                fields: [{\r\n                  node: cryo_enemyRes_,\r\n                }, {\r\n                  node: physical_enemyRes_,\r\n                }, {\r\n                  text: sgt('duration'),\r\n                  value: 7,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }]\r\n        }]\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: `${datamine.burst.cd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 7,\r\n            unit: 's'\r\n          }],\r\n          conditional: { // Lightfall Sword\r\n            value: condLightfallSword,\r\n            path: condLightfallSwordPath,\r\n            name: trm(\"burstC.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: {\r\n              ...objectKeyMap(range(1, 30), i => ({\r\n                name: st(\"stack\", { count: i }),\r\n                fields: [{\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.start5\"),\r\n                }, {\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.addStacks\"),\r\n                }]\r\n              })),\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // Lightfall Sword (C4)\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4C.name\"),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  text: trm(\"c4C.desc\")\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Fischl\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    ozDmg: skillParam_gen.skill[s++],\r\n    summonDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0]\r\n  },\r\n  constellation2: {\r\n    dmg: skillParam_gen.constellation2[0]\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n    regen: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\r\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\r\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\r\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\r\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\r\n      { hit: { ele: constant('electro') } })),\r\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\r\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"elemental\", { hit: { ele: constant('physical') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              canShow: (data) => data.get(input.asc).value >= 1,\r\n              node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value < 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2AoeIncrease\"),\r\n        value: 50,\r\n        unit: \"%\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_disp = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst cryo_dmg_ = equal(input.activeCharKey, target.charKey, cryo_dmg_disp)\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_,\r\n      cryo_enemyRes_,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"a1.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"a1.critRateInc\"),\r\n              value: datamine.passive1.critRateInc * 100,\r\n              unit: \"%\"\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.passive1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"c1.condName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: cryo_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.constellation1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: st(\"charges\"),\r\n        value: 2,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condA4,\r\n          path: condA4Path,\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4,\r\n          path: condC4Path,\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          name: st(\"opponentsField\"),\r\n          states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n          name: st(\"seconds\", { count: (i - 1) * 3 }),\r\n            fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n          }]))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Gorou\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    defInc: skillParam_gen.skill[s++],\r\n    geo_dmg_: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg_def: skillParam_gen.burst[b++],\r\n    crystalDmg_def: skillParam_gen.burst[b++],\r\n    crystalHits: 6,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    def_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    skill_dmgInc: skillParam_gen.passive2[0][0],\r\n    burst_dmgInc: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation4: {\r\n    heal_def_: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    geo_critDMG_: [\r\n      skillParam_gen.constellation6[0],\r\n      skillParam_gen.constellation6[1],\r\n      skillParam_gen.constellation6[2],\r\n      skillParam_gen.constellation6[2],\r\n    ] as number[],\r\n    duration: skillParam_gen.constellation6[3]\r\n  }\r\n} as const\r\n\r\nconst [condInFieldPath, condInField] = cond(key, \"inField\")\r\nconst skill1_defDisp = equal(condInField, \"inField\", \r\n  greaterEq(tally[\"geo\"], 1, \r\n    subscript(input.total.skillIndex, datamine.skill.defInc)\r\n  )\r\n)\r\nconst skill1_def = equal(input.activeCharKey, target.charKey, skill1_defDisp)\r\nconst skill3_geo_dmg_Disp = equal(condInField, \"inField\", \r\n  greaterEq(tally[\"geo\"], 3, datamine.skill.geo_dmg_)\r\n)\r\nconst skill3_geo_dmg_ = equal(input.activeCharKey, target.charKey, skill3_geo_dmg_Disp)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_def_ = greaterEq(input.asc, 1, equal(condAfterBurst, \"afterBurst\", datamine.passive1.def_))\r\n\r\nconst p2_skill_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.skill_dmgInc))\r\nconst p2_burst_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.burst_dmgInc))\r\n\r\nconst [condAfterSkillBurstPath, condAfterSkillBurst] = cond(key, \"afterSkillBurst\")\r\nconst c6_geo_critDMG_ = greaterEq(input.constellation, 6, \r\n  equal(condAfterSkillBurst, \"afterSkillBurst\", \r\n    subscript(sum(tally[\"geo\"], -1), datamine.constellation6.geo_critDMG_)\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n  [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"def\", datamine.burst.dmg_def, \"burst\"),\r\n    crystalCollapse: dmgNode(\"def\", datamine.burst.crystalDmg_def, \"burst\")\r\n  },\r\n  constellation4: {\r\n    heal: greaterEq(input.constellation, 4, greaterEq(tally[\"geo\"], 2, healNode(\"def\", datamine.constellation4.heal_def_, 0)))\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      def: skill1_def,\r\n      geo_dmg_: skill3_geo_dmg_,\r\n      def_: afterBurst_def_,\r\n      geo_critDMG_: c6_geo_critDMG_,\r\n    }\r\n  },\r\n  premod: {\r\n    skill_dmgInc: p2_skill_dmgInc,\r\n    burst_dmgInc: p2_burst_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n            node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condInField,\r\n        path: condInFieldPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inField: {\r\n            fields: [{\r\n              node: infoMut(skill1_defDisp, { key: \"def\" }),\r\n            }, {\r\n              canShow: data => data.get(tally[\"geo\"]).value >= 2,\r\n              text: st(\"incInterRes\")\r\n            }, {\r\n              node: infoMut(skill3_geo_dmg_Disp, { key: \"geo_dmg_\", variant: \"geo\" }),\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: p2_skill_dmgInc\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, [{\r\n          node: infoMut(dmgFormulas.constellation4.heal, { key: \"sheet_gen:healing\", variant: \"success\" }),\r\n        }], undefined, data => data.get(input.constellation).value >=4 && data.get(tally[\"geo\"]).value >= 2, true, true)\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.crystalCollapse, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.crystalHits })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condAfterBurst,\r\n          path: condAfterBurstPath,\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          name: st(\"afterUse.burst\"),\r\n          teamBuff: true,\r\n          states: {\r\n            afterBurst: {\r\n              fields: [{\r\n                node: afterBurst_def_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: p2_burst_dmgInc\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condAfterSkillBurst,\r\n        path: condAfterSkillBurstPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: st(\"afterUse.skillOrBurst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterSkillBurst: {\r\n            fields: [{\r\n              node: c6_geo_critDMG_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, customHealNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.bloodBlossomDuration,\r\n        unit: 's'\r\n      }], {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value > 1,\r\n        text: trm(\"constellation2.applyBloodBlossom\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n                node: critRate_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: 's'\r\n              }, {\r\n                text: sgt(\"cd\"),\r\n                value: 60,\r\n                unit: 's'\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Jean\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    stamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    enterExitDmg: skillParam_gen.burst[b++],\r\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\r\n    burstActionFlatModifier: skillParam_gen.burst[b++],\r\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\r\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    chance: skillParam_gen.passive1[p1++][0],\r\n    atkPercentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    increaseDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    moveSpd: skillParam_gen.constellation2[0],\r\n    atkSpd: skillParam_gen.constellation2[1],\r\n    duration: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation4: {\r\n    anemoRes: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    dmgReduction: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\r\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\r\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\r\n\r\nconst [condC1Path, condC1] = cond(key, \"c1\")\r\nconst skill_dmg_ = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.increaseDmg))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\r\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst dmgRed_disp = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\r\nconst dmgRed_ = equal(input.activeCharKey, target.charKey, dmgRed_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\r\n    regen,\r\n    contRegen\r\n  },\r\n  passive1: {\r\n    a1Regen\r\n  },\r\n  constellation2: {\r\n    atkSPD_,\r\n    moveSPD_\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atkSPD_,\r\n      moveSPD_,\r\n      anemo_enemyRes_,\r\n      dmgRed_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: `${datamine.skill.stamina}`,\r\n        unit: \"/s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n          canShow: greaterEq(input.constellation, 1, 1),\r\n          value: condC1,\r\n          path: condC1Path,\r\n          name: trm(\"c1CondName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                text: trm(\"c1PullSpeed\")\r\n              }, {\r\n                node: skill_dmg_\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 11,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          value: condC4,\r\n          path: condC4Path,\r\n          teamBuff: true,\r\n          name: st(\"opponentsField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: anemo_enemyRes_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          value: condC6,\r\n          path: condC6Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(dmgRed_disp, {key: \"dmgRed_\" })\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: (data) => data.get(input.asc).value >= 4,\r\n        text: st(\"energyRegen\"),\r\n        value: datamine.passive2.energyRegen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atkSPD_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(\"swirl\", condSwirls[ele],\r\n      // Use premod since this is a percentage-based effect\r\n      prod(percent(datamine.passive2.elemas_dmg_, { fixed: 2 }), input.premod.eleMas)\r\n    ))]))\r\n\r\n// 2 C2 conds for the 2 parts of his C2\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMasDisp = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P, datamine.constellation2.elemas)\r\n)\r\nconst c2PEleMas = equal(input.activeCharKey, target.charKey, // Apply to active character\r\n  unequal(target.charKey, key, c2PEleMasDisp) // But not to Kazuha\r\n)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  // Not sure if this should be premod or total. I am guessing premod\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      staminaSprintDec_: passive,\r\n      eleMas: c2PEleMas,\r\n    },\r\n    total: {\r\n      // Should be in total, since other character abilities should not scale off this\r\n      // if those abilities are percentage-based (e.g. XQ skill dmg red.)\r\n      ...asc4,\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: c6infusion,\r\n  },\r\n  total: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  premod: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd * (1 - 0.10)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cdHold} - 10% = ${datamine.skill.cdHold * (1 - 0.10)}`\r\n          : `${datamine.skill.cdHold}`,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        {\r\n          ...sectionTemplate(\"skill\", tr, skill, [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]),\r\n          fieldsHeader: { ...conditionalHeader(\"skill\", tr, skill), title: trm(\"skillPlunge\") }\r\n        },\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          node: infoMut(greaterEq(input.constellation, 1, percent(0.1)), { key: \"skillCDRed_\" })\r\n        }, {\r\n          text: trm(\"c1\"),\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // Burst absorption\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        header: conditionalHeader(\"burst\", tr, burst),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          value: condC2,\r\n          path: condC2Path,\r\n          name: trm(\"c2\"),\r\n          header: conditionalHeader(\"constellation2\", tr, c2),\r\n          states: {\r\n            c2: {\r\n              fields: [{\r\n                node: c2EleMas\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation2\", tr, c2, undefined, { // C2 Party\r\n          canShow: greaterEq(input.constellation, 2, unequal(input.activeCharKey, key, 1)),\r\n          value: condC2P,\r\n          path: condC2PPath,\r\n          teamBuff: true,\r\n          description: tr(\"constellation2.description\"),\r\n          name: st(\"activeCharField\"),\r\n          header: conditionalHeader(\"constellation2\", tr, c2),\r\n          states: {\r\n            c2p: {\r\n              fields: [{\r\n                node: infoMut(c2PEleMasDisp, { key: \"eleMas\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, undefined, absorbableEle.map(eleKey =>\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, { // Poetics of Fuubutsu\r\n          value: condSwirls[eleKey],\r\n          path: condSwirlPaths[eleKey],\r\n          teamBuff: true,\r\n          // Only show the description once. Can't be truly blank or it will be filled in with a default.\r\n          description: eleKey === \"hydro\" ? tr(\"passive2.description\") : \" \",\r\n          name: trm(`a4.name_${eleKey}`),\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            swirl: {\r\n              fields: [{\r\n                node: asc4[`${eleKey}_dmg_`]\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive2.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      )),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, undefined, undefined, [\r\n        sectionTemplate(\"passive3\", tr, passive3, [{\r\n          node: passive\r\n        }], undefined, undefined, true, true),\r\n      ]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        // Crimson Momiji\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [\r\n              // { // TODO:\r\n              //   node: c6infusion\r\n              // },\r\n              {\r\n                canShow: data => data.get(c6infusion).value === elementKey,\r\n                text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n              }, {\r\n                node: c6NormDmg_\r\n              }, {\r\n                node: c6ChargedDmg_\r\n              }, {\r\n                node: c6PlungingDmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: \"s\",\r\n              }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode, shieldElement, shieldNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Kaeya\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region:Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: { \r\n    healAtk_: .15,\r\n  },\r\n  constellation1: {\r\n    critRate_: .15,\r\n  },\r\n  constellation4: {\r\n    shieldHp_: 0.30,\r\n    duration: 20,\r\n    cooldown: 60,\r\n  },\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    heal: healNode(\"atk\", percent(datamine.passive2.healAtk_), 0),\r\n  },\r\n  constellation4: {\r\n    cryoShield: shieldElement(\"cryo\", shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0)),\r\n    shield: shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\n//Conditional C1: Oppo affected by Cryo\r\nconst [condC1Path, condC1Cryo] = cond(key, \"CryoC1\")\r\nconst nodeC1NormalCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\nconst nodeC1ChargeCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, premod: {\r\n    normal_critRate_: nodeC1NormalCritRate,\r\n    charged_critRate_: nodeC1ChargeCritRate,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        { node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }), }, \r\n        {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }, \r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 2,\r\n          text: trm(\"c2burstDuration\"),\r\n        }\r\n      ],\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        { \r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.passive1.heal, { key: `char_${key}:p1heal`, variant:\"success\" }), \r\n        },\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [], {\r\n        value: condC1Cryo,\r\n        path: condC1Path,\r\n        name: trm(\"c1cond\"),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        teamBuff: false,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalCritRate\r\n            }, {\r\n              node: nodeC1ChargeCritRate\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, []),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.constellation4.cryoShield, { key: `char_${key}:c4shield` }),\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.constellation4.shield, { key: `char_${key}:c4shield` }),\r\n      }, {\r\n        //Duration\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.constellation4.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        //Cooldown\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.constellation4.cooldown,\r\n        unit: \"s\"\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    cutDmg: skillParam_gen.burst[b++],\r\n    bloomDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.cutDmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.bloomDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(\r\n      subscript(input.total.burstIndex, datamine.burst.cutDmg, { key: \"_\" }),\r\n      percent(datamine.constellation2.snowflake),\r\n      input.total.atk,\r\n    ), \"burst\", { hit: { ele: constant(elementKey) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterSprintInfusion,\r\n  },\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: st(\"brHits\", { count: 3 })\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        // A1 - After using Kamisato Art: Hyouka\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        // C4 - Hit by burst\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        description: st(\"constellation4.description\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"sprint.name\"),\r\n        img: sprint,\r\n        sections: [{\r\n          text: tr(\"sprint.description\"),\r\n          fields: [{\r\n            text: \"Activation Stamina Consumption\",\r\n            value: datamine.sprint.active_stam,\r\n          }, {\r\n            text: \"Stamina Drain\",\r\n            value: datamine.sprint.drain_stam,\r\n            unit: \"/s\",\r\n          }],\r\n          conditional: { //sprint\r\n            value: condAfterSprint,\r\n            path: condAfterSprintPath,\r\n            name: trm(\"afterSprint\"),\r\n            header: conditionalHeader(\"sprint\", tr, sprint),\r\n            states: {\r\n              afterSprint: {\r\n                fields: [{\r\n                  canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n                  text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.sprint.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: {\r\n            // A4 - After sprint hit\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAfterApplySprint,\r\n            path: condAfterApplySprintPath,\r\n            name: trm(\"afterSprintCryo\"),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            states: {\r\n              afterApplySprint: {\r\n                fields: [{\r\n                  text: trm(\"staminaRestore\"),\r\n                  value: datamine.passive2.stamina,\r\n                }, {\r\n                  node: afterApplySprintCryo\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n      },]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6Active\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }\r\n      ),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"KamisatoAyato\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmgArr:[\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n    ],\r\n    stateDuration: skillParam_gen.skill[s++][0],\r\n    stackHpDmgInc: skillParam_gen.skill[s++],\r\n    maxStacks: 4,\r\n    illusionDmg: skillParam_gen.skill[s++],\r\n    illusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    normal_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stacksGained: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerThres_: skillParam_gen.passive2[0][0],\r\n    cd: skillParam_gen.passive2[1][0],\r\n    energyRestore: skillParam_gen.passive2[2][0]\r\n  },\r\n  constellation1: {\r\n    oppHpThres_: skillParam_gen.constellation1[0],\r\n    shunDmg_: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    extraStacks: skillParam_gen.constellation2[0],\r\n    stackThresh: 3,\r\n    hp_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    atkSPD: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    extraStrikes: 2,\r\n    dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condInSkillPath, condInSkill] = cond(key, \"inSkill\")\r\n\r\nconst [condSkillStacksPath, condSkillStacks] = cond(key, \"skillStacks\")\r\nconst skillStacks_dmgInc = equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(1, 5).map(stacks => [\r\n    stacks,\r\n    prod(\r\n      stacks,\r\n      subscript(input.total.skillIndex, datamine.skill.stackHpDmgInc, { key: \"_\" }),\r\n      input.total.hp,\r\n    )\r\n  ])), naught)\r\n)\r\n\r\nconst [condBurstInAreaPath, condBurstInArea] = cond(key, \"burstInArea\")\r\nconst burst_normal_dmg_Disp = equal(condBurstInArea, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.normal_dmg_)\r\n)\r\nconst burst_normal_dmg_ = equal(input.activeCharKey, target.charKey, burst_normal_dmg_Disp)\r\n\r\nconst [condC1OppHpPath, condC1OppHp] = cond(key, \"c1OppHp\")\r\nconst c1Shun_dmg_ = greaterEq(input.constellation, 1, equal(condC1OppHp, \"on\", datamine.constellation1.shunDmg_))\r\n\r\n// Not sure what \"Max HP increased by 50%\" means\r\nconst c2_hp_ = greaterEq(input.constellation, 2, equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(datamine.constellation2.stackThresh, 5).map(stacks => [\r\n    stacks,\r\n    percent(datamine.constellation2.hp_)\r\n  ])), naught)\r\n))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\nconst c4_atkSPD_ = greaterEq(input.constellation, 4, equal(condC4AfterBurst, \"on\", datamine.constellation4.atkSPD))\r\n\r\nconst shunAddl: Data = {\r\n  hit: {\r\n    ele: constant(elementKey)\r\n  },\r\n  premod: {\r\n    normal_dmgInc: skillStacks_dmgInc,\r\n    normal_dmg_: c1Shun_dmg_\r\n  }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ...Object.fromEntries(datamine.skill.dmgArr.map((arr, i) =>\r\n      [`dmg${i}`, equal(condInSkill, \"on\", customDmgNode(prod(\r\n      subscript(input.total.skillIndex, arr, { key: \"_\" }),\r\n      input.total.atk,\r\n    ), \"normal\", shunAddl))])),\r\n    illusionDmg: dmgNode(\"atk\", datamine.skill.illusionDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation6: {\r\n    // Not sure if this benefits from C1 or not\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"normal\", { hit: { ele: constant(elementKey) }, premod: { normal_dmg_: c1Shun_dmg_ } }))\r\n  }\r\n}\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmg_: burst_normal_dmg_,\r\n      atkSPD_: c4_atkSPD_,\r\n    }\r\n  },\r\n  premod: {\r\n    hp_: c2_hp_,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.illusionDmg, { key: `char_${key}_gen:skill.skillParams.5` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.6\"),\r\n        value: datamine.skill.illusionDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        value: condInSkill,\r\n        path: condInSkillPath,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n            ...datamine.skill.dmgArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.skill[`dmg${i}`], { key: `char_${key}_gen:skill.skillParams.${i}` })\r\n            })), {\r\n              text: st(\"incInterRes\"),\r\n            }, {\r\n              text: trm(\"skill.unableToAuto\"),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.skill.stateDuration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"skill\", tr, skill, undefined, {\r\n          value: condSkillStacks,\r\n          path: condSkillStacksPath,\r\n          name: trm(\"skill.namisenStacks\"),\r\n          canShow: equal(condInSkill, \"on\", 1),\r\n          states: Object.fromEntries(range(1, 5).map(stacks => [\r\n            stacks, {\r\n              name: st(\"stack\", { count: stacks }),\r\n              fields: [{\r\n                node: infoMut(skillStacks_dmgInc, { key: `char_${key}:skill.shun_dmgInc` })\r\n              }, {\r\n                text: st(\"maxStacks\"),\r\n                value: data => data.get(input.constellation).value >= 2\r\n                  ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n                  : datamine.skill.maxStacks\r\n              }]\r\n            }\r\n          ]))\r\n        }),\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"passive1.afterUse\"),\r\n          value: datamine.passive1.stacksGained,\r\n        }, {\r\n          text: trm(\"passive1.afterExplode\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n            : datamine.skill.maxStacks\r\n        }], undefined, data => data.get(input.asc).value >= 1 && data.get(condInSkill).value === \"on\",\r\n        false, true),\r\n        sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n          value: condC1OppHp,\r\n          path: condC1OppHpPath,\r\n          name: st(\"enemyLessEqPercentHP\", { percent: datamine.constellation1.oppHpThres_ * 100 }),\r\n          canShow: greaterEq(input.constellation, 1, equal(condInSkill, \"on\", 1)),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(c1Shun_dmg_, { key: `char_${key}:c1.shun_dmg_` }),\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: trm(\"c2.addlStacks\"),\r\n          value: datamine.constellation2.extraStacks,\r\n        }, {\r\n          canShow: data => data.get(c2_hp_).value !== 0,\r\n          node: c2_hp_,\r\n        }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: `char_${key}:c6.dmg` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.constellation6.extraStrikes })\r\n        }], undefined, data => data.get(input.constellation).value >= 6 && data.get(condInSkill).value === \"on\",\r\n        false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstInArea,\r\n        path: condBurstInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(burst_normal_dmg_Disp, { key: \"normal_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4AfterBurst,\r\n          path: condC4AfterBurstPath,\r\n          name: st(\"afterUse.burst\"),\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c4_atkSPD_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation4.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterRecastInfusion,\r\n  },\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i],\r\n              { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n            ),\r\n            textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], { // Recast (A1)\r\n        value: condAfterRecast,\r\n        path: condAfterRecastPath,\r\n        name: trm(\"recast\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterRecast: {\r\n            fields: [{\r\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n              text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: 8 })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.cost,\r\n      }], { // Cast (A4)\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurstCritRate_\r\n            }, {\r\n              node: afterBurstEnerRech_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condAfterReact,\r\n        path: condAfterReactPath,\r\n        name: trm(\"electroReact\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          afterReact: {\r\n            fields: [{\r\n              node: afterReactAtk_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6Stack,\r\n        path: condC6StackPath,\r\n        name: trm(\"effectTriggers\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: objectKeyMap(range(1, 4), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c6Electro_dmg_\r\n          }]\r\n        }))\r\n      }),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Klee\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    jumptyDumptyDmg1: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg2: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg3: skillParam_gen.skill[s++],\r\n    mineDmg: skillParam_gen.skill[s++],\r\n    mineDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++], // what is this??\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    charged_dmg_: 0.5\r\n  },\r\n  constellation1: {\r\n    dmg_: 1.2\r\n  },\r\n  constellation2: {\r\n    enemyDefRed_: 0.23\r\n  },\r\n  constellation4: {\r\n    dmg: 5.55\r\n  },\r\n  constellation6: {\r\n    pyro_dmg_: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"PoundingSurprise\")\r\nconst charged_dmg_ = equal(\"on\", condA1, greaterEq(input.asc, 1, percent(datamine.passive1.charged_dmg_)))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"ExplosiveFrags\")\r\nconst enemyDefRed_ = equal(\"on\", condC2, greaterEq(input.constellation, 2, percent(datamine.constellation2.enemyDefRed_)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"BlazingDelight\")\r\nconst pyro_dmg_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.pyro_dmg_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    jumptyDumptyDmg: dmgNode(\"atk\", datamine.skill.jumptyDumptyDmg1, \"skill\"),\r\n    mineDmg: dmgNode(\"atk\", datamine.skill.mineDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    chainedReactionsDmg: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.dmg_), dmgNode(\"atk\", datamine.burst.dmg, \"burst\")))\r\n  },\r\n  constellation4: {\r\n    sparklyExplosionDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.dmg), input.total.atk), \"elemental\", { hit: { ele: constant('pyro') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_,\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n            }, {\r\n              text: tr(\"auto.skillParams.4\"),\r\n              value: datamine.charged.stamina\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" })\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" })\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" })\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.jumptyDumptyDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.mineDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.mineDuration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: charged_dmg_\r\n            }, {\r\n              text: trm(\"a1CondName2\")\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.chainedReactionsDmg, { key: `sheet:dmg` }),\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.sparklyExplosionDmg, { key: `sheet:dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        teamBuff: true,\r\n        name: trm(\"c6CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 25,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst atkIncRatio = subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' })\r\nconst skillTenguAmbush_disp = equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, atkIncRatio)\r\n)\r\nconst skillTenguAmbush_ = equal(input.activeCharKey, target.charKey, skillTenguAmbush_disp)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = equal(\"c6\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }], {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(skillTenguAmbush_disp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Lisa\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stack0: skillParam_gen.skill[s++],\r\n    stack1: skillParam_gen.skill[s++],\r\n    stack2: skillParam_gen.skill[s++],\r\n    stack3: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    press: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    tick: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    unknown: skillParam_gen.passive1[0][0] // I have no idea what this is\r\n  },\r\n  passive2: {\r\n    defShred: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"LisaA4\")\r\nconst [condC2Path, condC2] = cond(key, \"LisaC2\")\r\n\r\nconst nodeA4DefShred = equal(condA4, \"on\", greaterEq(input.asc, 1, datamine.passive2.defShred))\r\nconst nodeC2DefIncrease = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.25))) // Doesn't exist in skillParam_gen\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    stack0: dmgNode(\"atk\", datamine.skill.stack0, \"skill\"),\r\n    stack1: dmgNode(\"atk\", datamine.skill.stack1, \"skill\"),\r\n    stack2: dmgNode(\"atk\", datamine.skill.stack2, \"skill\"),\r\n    stack3: dmgNode(\"atk\", datamine.skill.stack3, \"skill\"),\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    tick: dmgNode(\"atk\", datamine.burst.tick, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    def_: nodeC2DefIncrease,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: nodeA4DefShred\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        {\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        },\r\n        ...range(0, 3).map(i => ({\r\n          node: infoMut(dmgFormulas.skill[`stack${i}`], { key: `char_${key}_gen:skill.skillParams.${2 + i}` })\r\n        })), {\r\n          text: sgt(\"press.cd\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"hold.cd\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: 's'\r\n        }\r\n      ]),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.tick, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.1\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cost,\r\n          }]\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        name: trm(\"a4C\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4DefShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2DefIncrease\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: trm(\"bubbleDuration\"),\r\n        value: datamine.burst.bubbleDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: talentTemplate(\"sprint\", tr, sprint, [{\r\n        text: \"Activation Stamina Consumption\",\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: \"Stamina Drain\",\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        text: trm(\"phantomDuration\"),\r\n        value: datamine.passive1.phantomDuration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: hydro_dmg_\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ningguang\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    jadeDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerGem: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { \r\n    //Nothing\r\n  },\r\n  passive2: {\r\n    geoDmgBonus_ : skillParam_gen.passive2[p1++][0],\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  },\r\n  passive3: {\r\n    //Nothing\r\n  },\r\n  constellation1: {\r\n    //Nothing\r\n  },\r\n  constellation2: {\r\n    //Nothing\r\n  },\r\n  constellation4: {\r\n    //Nothing\r\n  },\r\n  constellation6: {\r\n    //Nothing\r\n  },\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\r\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\r\n\r\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\r\n\r\nconst nodeC4CryoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4GeoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4PyroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4AnemoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4HydroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4ElecResBonus_ = equal(condC4, \"on\", percent(0.10))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),    \r\n  },\r\n  burst: {\r\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      geo_dmg_  :nodeA4GeoDmgBonus_,\r\n      geo_res_  :nodeC4GeoResBonus_,\r\n      cryo_res_ :nodeC4CryoResBonus_,\r\n      pyro_res_ :nodeC4PyroResBonus_,\r\n      anemo_res_:nodeC4AnemoResBonus_,\r\n      hydro_res_:nodeC4HydroResBonus_,\r\n      electro_res_ :nodeC4ElecResBonus_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` }) } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 1,\r\n              text: trm(\"aoeGems\"),\r\n            }]\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\r\n          }, {\r\n            canShow: data => data.get(input.asc).value < 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            canShow: data => data.get(input.asc).value >= 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: trm(\"starJadeStaminaCost\"),\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple conditionals.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }), }, \r\n            { node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }), }, \r\n            {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.burst.cd,\r\n              unit: \"s\"\r\n            } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 2,\r\n              text: trm(\"skillReset\"),\r\n            }\r\n          ],\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condA4,\r\n            path: condA4Path,\r\n            name: trm(\"a4toggle\"),\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`passive2.description`),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeA4GeoDmgBonus_\r\n                }, {\r\n                  text: trm(\"a4duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          } \r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4toggle\"),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            header: conditionalHeader(\"constellation4\", tr, c4), description: tr(`constellation4.description`),\r\n            states: {\r\n              on: {\r\n                fields: [\r\n                  { node:nodeC4CryoResBonus_ },\r\n                  { node:nodeC4GeoResBonus_ } ,\r\n                  { node:nodeC4PyroResBonus_ } ,\r\n                  { node:nodeC4AnemoResBonus_ } ,\r\n                  { node:nodeC4HydroResBonus_ } ,\r\n                  { node:nodeC4ElecResBonus_ } ,\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: trm(\"c6bonus\"),\r\n          value: 7,\r\n        }\r\n      ],\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC2ChargeDec = greaterEq(input.constellation, 2, percent(-datamine.constellation2.chargeStamina))\r\nconst nodeC4dmg = greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\")),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: greaterEq(input.asc, 1, shieldElement(\"geo\", shieldNode(\"def\", percent(datamine.passive1.shield), 0)))\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n    staminaChargedDec_: nodeC2ChargeDec,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" }),\r\n        }, { //Heal trigger chance\r\n          canShow: data => data.get(input.constellation).value === 0,\r\n          node: nodeSkillHealChanceBase,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOff,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOn,\r\n        }, { //Shield Duration\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, { //Cooldown\r\n          canShow: data => data.get(input.asc).value < 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: trm(`p4cd`),\r\n        }\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        {\r\n          canShow: data => data.get(input.constellation).value < 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: trm(`c6duration`),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              text: trm(\"qlarger\")\r\n            }, {\r\n              node: nodeBurstAtk\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        {\r\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.passive1.cooldown,\r\n          unit: \"s\"\r\n        }\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: nodeC2ChargeDec\r\n      }, {\r\n        node: nodeC2ChargeDMG\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Qiqi\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hitRegenPercent: skillParam_gen.skill[s++],\r\n    hitRegenFlat: skillParam_gen.skill[s++],\r\n    contRegenPercent: skillParam_gen.skill[s++],\r\n    contRegenFlat: skillParam_gen.skill[s++],\r\n    tickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    castDmg: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    healPercent: skillParam_gen.burst[b++],\r\n    healFlat: skillParam_gen.burst[b++],\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"QiqiA1\")\r\nconst [condC2Path, condC2] = cond(key, \"QiqiC2\")\r\n\r\n// Values here doesn't exist in skillParam_gen\r\nconst nodeA1HealingBonus = equal(condA1, \"on\", greaterEq(input.asc, 1, constant(0.2)))\r\nconst nodeC2ChargedDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.15)))\r\nconst nodeC2NormalDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.15)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    castDmg: dmgNode(\"atk\", datamine.skill.castDmg, \"skill\"),\r\n    tickDmg: dmgNode(\"atk\", datamine.skill.tickDmg, \"skill\"),\r\n    hitRegen: healNodeTalent(\"atk\", datamine.skill.hitRegenPercent, datamine.skill.hitRegenFlat, \"skill\"),\r\n    contRegen: healNodeTalent(\"atk\", datamine.skill.contRegenPercent, datamine.skill.contRegenFlat, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"atk\", datamine.burst.healPercent, datamine.burst.healFlat, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_: nodeC2NormalDmgInc,\r\n    charged_dmg_: nodeC2ChargedDmgInc,\r\n    incHeal_: nodeA1HealingBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n              textSuffix: st(\"brHits\", { count: 2 })\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.castDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hitRegen, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.contRegen, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.tickDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }]),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.skill.duration,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.skill.cd,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cost,\r\n          }]\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1C\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1HealingBonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 8,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2NormalDmgInc\r\n            }, {\r\n              node: nodeC2ChargedDmgInc\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(datamine.burst.enerCost, subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus.map(x => x), { key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i)), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nfunction burstResolve(atkType: number[], initial = false) {\r\n  let resolveBonus = initial ? datamine.burst.resolveBonus1 : datamine.burst.resolveBonus2\r\n\r\n  return customDmgNode(prod(sum(subscript(input.total.burstIndex, atkType, { key: '_' }),\r\n    prod(subscript(input.total.burstIndex, resolveBonus.map(x => x), { key: '_' }),\r\n      lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0))), input.total.atk), 'burst', {\r\n    hit: {\r\n      ele: constant('electro')\r\n    }, enemy: {\r\n      // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n      defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n    }\r\n  })\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n              textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: `${datamine.skill.duration}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.cd}s`,\r\n          }],\r\n          conditional: {\r\n            value: condSkillEye,\r\n            path: condSkillEyePath,\r\n            name: trm(\"skill.eye\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              skillEye: {\r\n                fields: [{\r\n                  node: skillEye_\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: {\r\n            value: condSkillEyeTeam,\r\n            path: condSkillEyeTeamPath,\r\n            description: tr(\"skill.description\"),\r\n            teamBuff: true,\r\n            canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n            name: trm(\"skill.partyCost\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: Object.fromEntries(energyCosts.map(c => [c, {\r\n              name: `${c}`,\r\n              fields: [{\r\n                node: skillEyeTeamBurstDmgInc,\r\n              }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.9\"),\r\n        value: `${datamine.burst.stam}`,\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.12\"),\r\n        value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.13\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.14\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.15\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: []\r\n        }]))\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: (data) => {\r\n          return (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100)\r\n        },\r\n        unit: \"%\"\r\n      }, {\r\n          node: passive2ElecDmgBonus,\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Razor\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++]\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    erBonus: skillParam_gen.skill[s++][0],\r\n    enerRegen: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    companionDmg: skillParam_gen.burst[b++],\r\n    atkSpdBonus: skillParam_gen.burst[b++],\r\n    electroResBonus: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: 0.18\r\n  },\r\n  passive2: {\r\n    enerThreshold: 0.5,\r\n    erInc: 0.3\r\n  },\r\n  passive3: {\r\n    sprintStaminaDec: 0.2\r\n  },\r\n  constellation1: {\r\n    allDmgInc: 0.1,\r\n    duration: 8\r\n  },\r\n  constellation2: {\r\n    hpThreshold: 0.3,\r\n    critRateInc: 0.1\r\n  },\r\n  constellation4: {\r\n    defDec: 0.15,\r\n    duration: 7\r\n  },\r\n  constellation6: {\r\n    dmg: 1,\r\n    electroSigilGenerated: 1,\r\n    cd: 10\r\n  }\r\n} as const\r\n\r\nconst [condElectroSigilPath, condElectroSigil] = cond(key, \"ElectroSigil\")\r\nconst [condTheWolfWithinPath, condTheWolfWithin] = cond(key, \"TheWolfWithin\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC2Path, condC2] = cond(key, \"C2\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\n\r\nconst enerRechElectroSigil_ = lookup(condElectroSigil, objectKeyMap(range(1, 3), i => prod(i, percent(datamine.skill.erBonus))),\r\n  naught, { key: \"enerRech_\" })\r\nconst electro_res_ = equal(\"on\", condTheWolfWithin, percent(datamine.burst.electroResBonus))\r\nconst atkSPD_ = equal(\"on\", condTheWolfWithin, subscript(input.total.burstIndex, datamine.burst.atkSpdBonus, { key: \"_\" }))\r\nconst enerRechA4_ = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.erInc, { key: \"enerRech_\" })))\r\nconst all_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.allDmgInc)))\r\nconst critRate_ = greaterEq(input.constellation, 2, equal(\"on\", condC2, percent(datamine.constellation2.critRateInc)))\r\nconst enemyDefRed_ = greaterEq(input.constellation, 4, equal(\"on\", condC4, percent(datamine.constellation4.defDec)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    companionDmg1: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg2: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg3: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg4: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    // TODO: this is for the additional section to calculate the full burst dmg where the full burst dmg = sum of normal dmg and burst companion dmg\r\n    // However, the final dmg then defaults to Electro text color which is sort of incorrect?\r\n    // Is there a way to disable the electro text color and default it to just normal color instead?\r\n    fullBurstDmg1: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg2: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg3: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg4: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"))\r\n  },\r\n  constellation6: {\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: sum(enerRechElectroSigil_, enerRechA4_),\r\n    electro_res_,\r\n    atkSPD_,\r\n    all_dmg_,\r\n    critRate_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: (data) => data.get(input.asc).value >= 1 ? datamine.skill.pressCd - (datamine.skill.pressCd * datamine.passive1.cdRed) :\r\n          datamine.skill.pressCd,\r\n        unit: 's'\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.6\"),\r\n        value: (data) => data.get(input.asc).value >= 1 ? datamine.skill.holdCd - (datamine.skill.holdCd * datamine.passive1.cdRed) :\r\n          datamine.skill.holdCd,\r\n        unit: 's'\r\n      }], { // Electro Sigil\r\n        value: condElectroSigil,\r\n        path: condElectroSigilPath,\r\n        name: trm(\"electroSigil\"),\r\n        header: conditionalHeader(\"skill\", tr, skill),\r\n        states: {\r\n          ...objectKeyMap(range(1, 3), i => ({\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: enerRechElectroSigil_\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"electroSigilAbsorbed\"),\r\n              value: datamine.skill.enerRegen * i,\r\n            }]\r\n          })),\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg1, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.0\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg2, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.1\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg3, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.2\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg4, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.3\")\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.duration,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // The Wolf Within\r\n        value: condTheWolfWithin,\r\n        path: condTheWolfWithinPath,\r\n        name: tr(\"burst.description.3\"),\r\n        header: conditionalHeader(\"burst\", tr, burst),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: electro_res_\r\n            }, {\r\n              node: atkSPD_\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      }, [{\r\n        ...sectionTemplate(\"burst\", tr, burst, [{\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg1, { key: `char_${key}:fullBurstDMG.dmg1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg2, { key: `char_${key}:fullBurstDMG.dmg2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg3, { key: `char_${key}:fullBurstDMG.dmg3` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg4, { key: `char_${key}:fullBurstDMG.dmg4` })\r\n        }], undefined, undefined, false, true),\r\n        text: trm(\"fullBurstDMG.description\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: st(\"lessPercentEnergy\", { percent: datamine.passive2.enerThreshold * 100 }),\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enerRechA4_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"pickUpElementalOrbParticle\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: all_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.constellation2.hpThreshold * 100 }),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: critRate_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"opHitWithClawAndThunder\"),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        node: infoMut(dmgFormulas.constellation6.dmg, { key: \"sheet:dmg\" })\r\n      }, {\r\n        text: trm(\"electroSigilPerProc\"),\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        value: datamine.constellation6.electroSigilGenerated\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        text: st(\"cooldown\"),\r\n        value: datamine.constellation6.cd,\r\n        unit: \"s\"\r\n      }]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, min, unequal, percent } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Rosaria\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c1i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hit1: skillParam_gen.skill[s++],\r\n    hit2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    crInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    crBonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    maxBonus: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    atkSpdInc: skillParam_gen.constellation1[c1i++],\r\n    dmgInc: skillParam_gen.constellation1[c1i++],\r\n    duration: skillParam_gen.constellation1[c1i++],\r\n  },\r\n  constellation6: {\r\n    physShred: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"RosariaA1\")\r\nconst [condA4Path, condA4] = cond(key, \"RosariaA4\")\r\nconst [condC1Path, condC1] = cond(key, \"RosariaC1\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeA1CritInc = equal(condA1, \"on\", greaterEq(input.asc, 1, datamine.passive1.crInc))\r\nconst nodeA4CritBonusDisp = equal(condA4, \"on\",\r\n  greaterEq(input.asc, 4, min(\r\n    prod(percent(datamine.passive2.crBonus), input.premod.critRate_),\r\n    percent(datamine.passive2.maxBonus)\r\n  ))\r\n)\r\nconst nodeA4CritBonus = unequal(target.charKey, key, nodeA4CritBonusDisp)\r\n\r\nconst nodeC1AtkSpd = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.atkSpdInc))\r\nconst nodeC1NormalInc = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC6PhysShred = equal(condC6, \"on\", greaterEq(input.constellation, 6, -datamine.constellation6.physShred))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    hit1: dmgNode(\"atk\", datamine.skill.hit1, \"skill\"),\r\n    hit2: dmgNode(\"atk\", datamine.skill.hit2, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: dmgNode(\"atk\", datamine.burst.hit1, \"burst\"),\r\n    hit2: dmgNode(\"atk\", datamine.burst.hit2, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    critRate_: nodeA1CritInc,\r\n    atkSPD_: nodeC1AtkSpd,\r\n    normal_dmg_: nodeC1NormalInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_enemyRes_: nodeC6PhysShred\r\n    },\r\n    total: {\r\n      critRate_: nodeA4CritBonus\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.hit1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hit2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cost,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6,\r\n          path: condC6Path,\r\n          name: st(\"hitOp.skill\"),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeC6PhysShred\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: 's'\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        name: st(\"afterUse.skill\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        // Hide for Rosaria\r\n        canShow: greaterEq(input.asc, 4, unequal(input.activeCharKey, key, 1)),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA4CritBonusDisp, { key: \"critRate_\", isTeamBuff: true }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: st(\"hitOp.crit\"),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalInc\r\n            }, {\r\n              node: nodeC1AtkSpd,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, constant(datamine.c4.atkSPD_))\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", constant(datamine.c6.hydro_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.skillIndex, datamine.skill.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.s_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.skillIndex, datamine.skill.heal)\r\n    )),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"hp\", datamine.burst.dmg, \"burst\"),\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.burstIndex, datamine.burst.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.nc_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.burstIndex, datamine.burst.heal)\r\n    )),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.4\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.7\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive: talentTemplate(\"passive\", tr, passive, [{\r\n        node: passiveHeal_\r\n      }, {\r\n        node: passiveCritRate_\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {}\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{ node: c4AtkSpd_ }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, percent, prod, lookup, naught, sum, min, subscript } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Sayu\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3x2\r\n      skillParam_gen.auto[4], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[5],\r\n    final: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n    duration: skillParam_gen.auto[8][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[9],\r\n    low: skillParam_gen.auto[10],\r\n    high: skillParam_gen.auto[11],\r\n  },\r\n  skill: {\r\n    wheelDmg: skillParam_gen.skill[s++],\r\n    eleWheelDmg: skillParam_gen.skill[s++],\r\n    kickPressDmg: skillParam_gen.skill[s++],\r\n    kickHoldDmg: skillParam_gen.skill[s++],\r\n    eleKickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cdMin: skillParam_gen.skill[s++][0],\r\n    cdMax: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    pressBaseHeal: skillParam_gen.burst[b++],\r\n    pressAtkHeal: skillParam_gen.burst[b++],\r\n    darumaDmg: skillParam_gen.burst[b++],\r\n    darumaBaseHeal: skillParam_gen.burst[b++],\r\n    darumaAtkHeal: skillParam_gen.burst[b++],\r\n    darumaHits: 7,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    baseHeal: skillParam_gen.passive1[0][0],\r\n    emHeal: skillParam_gen.passive1[1][0],\r\n    cd: skillParam_gen.passive1[2][0]\r\n  },\r\n  passive2: {\r\n    nearHeal: skillParam_gen.passive2[0][0]\r\n  },\r\n  constellation2: {\r\n    dmgInc: skillParam_gen.constellation2[0],\r\n    maxStacks: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    ener: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    darumaDmgInc: skillParam_gen.constellation6[0],\r\n    maxStacks: skillParam_gen.constellation6[1] / skillParam_gen.constellation6[0],\r\n    darumaHealInc: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst [condActiveSwirlPath, condActiveSwirl] = cond(key, \"activeSwirl\")\r\n\r\nconst [condC2SkillStackPath, condC2SkillStack] = cond(key, \"c2SkillStack\")\r\nconst c2_kickPressDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.dmgInc))\r\nconst c2_kickDmg_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2SkillStack,\r\n    Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [\r\n      stack,\r\n      prod(stack, percent(datamine.constellation2.dmgInc))\r\n    ])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c6_daruma_dmg_inc = greaterEq(input.constellation, 6,\r\n  prod(\r\n    min(input.total.eleMas, datamine.constellation6.maxStacks),\r\n    datamine.constellation6.darumaDmgInc,\r\n    input.total.atk\r\n  )\r\n)\r\nconst c6_daruma_heal_inc = greaterEq(input.constellation, 6,\r\n  prod(min(input.total.eleMas, datamine.constellation6.maxStacks), datamine.constellation6.darumaHealInc)\r\n)\r\n// Using customHealNode so I can have healInc\r\nconst darumaHeal = customHealNode(sum(\r\n  prod(\r\n    subscript(input.total.burstIndex, datamine.burst.darumaAtkHeal, { key: \"_\" }),\r\n    input.total.atk,\r\n  ),\r\n  subscript(input.total.burstIndex, datamine.burst.darumaBaseHeal),\r\n  c6_daruma_heal_inc,\r\n))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    wheelDmg: dmgNode(\"atk\", datamine.skill.wheelDmg, \"skill\"),\r\n    kickPressDmg: dmgNode(\"atk\", datamine.skill.kickPressDmg, \"skill\",\r\n      { premod: { skill_dmg_: sum(c2_kickDmg_, c2_kickPressDmg_) } }),\r\n    kickHoldDmg: dmgNode(\"atk\", datamine.skill.kickHoldDmg, \"skill\",\r\n      { premod: { skill_dmg_: c2_kickDmg_ } }),\r\n    eleWheelDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleWheelDmg, \"skill\", { hit: { ele: constant(eleKey) } })\r\n    ])), naught),\r\n    eleKickDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleKickDmg, \"skill\",\r\n        { hit: { ele: constant(eleKey) }, premod: { skill_dmg_: c2_kickDmg_ } })\r\n    ])), naught)\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    pressHeal: healNodeTalent(\"atk\", datamine.burst.pressAtkHeal, datamine.burst.pressBaseHeal, \"burst\"),\r\n    darumaDmg: dmgNode(\"atk\", datamine.burst.darumaDmg, \"burst\",\r\n      { premod: { burst_dmgInc: c6_daruma_dmg_inc } }),\r\n    darumaHeal\r\n  },\r\n  passive1: {\r\n    heal: greaterEq(input.asc, 1, sum(datamine.passive1.baseHeal, prod(datamine.passive1.emHeal, input.total.eleMas)))\r\n  },\r\n  passive2: {\r\n    extraHeal: greaterEq(input.asc, 4, prod(darumaHeal, percent(datamine.passive2.nearHeal)))\r\n  }\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.wheelDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.kickPressDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.kickHoldDmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: `${datamine.skill.cdMin}s ~ ${datamine.skill.cdMax}`,\r\n        unit: \"s\",\r\n      }], {\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.eleWheelDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.eleKickDmg, { key: `char_${key}_gen:skill.skillParams.4` })\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          node: infoMut(c2_kickPressDmg_, { key: `char_${key}:c2KickPressDmg_` })\r\n        }], {\r\n          value: condC2SkillStack,\r\n          path: condC2SkillStackPath,\r\n          name: trm(\"c2Cond\"),\r\n          states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [stack, {\r\n            name: st(\"seconds\", { count: stack * 0.5 }),\r\n            fields: [{\r\n              node: infoMut(c2_kickDmg_, { key: `char_${key}:c2KickDmg_` })\r\n            }]\r\n          }]))\r\n        }, data => data.get(input.constellation).value >= 2, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.pressHeal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.darumaDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.darumaHeal, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: trm(\"burstHits\"),\r\n        value: datamine.burst.darumaHits,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: infoMut(dmgFormulas.passive2.extraHeal, { key: `char_${key}:p2Heal`, variant: \"success\" })\r\n        }, {\r\n          text: trm(\"p2Aoe\")\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"c1Text\")\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          node: infoMut(c6_daruma_dmg_inc,\r\n            { key: `char_${key}:c6DarumaDmgInc`, variant: \"anemo\" })\r\n        }, {\r\n          node: infoMut(c6_daruma_heal_inc,\r\n            { key: `char_${key}:c6DarumaHealInc`, variant: \"success\" })\r\n        }], undefined, data => data.get(input.constellation).value >= 6, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condActiveSwirl,\r\n        path: condActiveSwirlPath,\r\n        name: trm(\"p1Swirl\"),\r\n        states: {\r\n          activeSwirl: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.passive1.heal, { key: `sheet_gen:healing`, variant: \"success\" })\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.passive1.cd,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: burstC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, undefined, [\r\n        sectionTemplate(\"constellation4\", tr, c4, [{\r\n          text: trm(\"c4Ener\"),\r\n          value: datamine.constellation4.ener,\r\n          fixed: 1\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation4.cd,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.constellation).value >= 4)\r\n      ]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: skillC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6)\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, percent, prod, subscript, greaterEq } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.total.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeAsc1 = equal(input.activeCharKey, target.charKey, nodeAsc1Disp)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2Disp = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeC2 = equal(input.activeCharKey, target.charKey, nodeC2Disp)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(`auto.fields.plunging`),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: trm(\"pressDuration\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: trm(\"pressQuota\"),\r\n        value: datamine.skill.trigger,\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: trm(\"holdDuration\"),\r\n        value: datamine.skill.durationHold,\r\n        unit: \"s\"\r\n      }, {\r\n        text: trm(\"holdQuota\"),\r\n        value: datamine.skill.triggerHold,\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.cdHold,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 1,\r\n        text: st(\"charges\"),\r\n        value: 2\r\n      }], {\r\n        teamBuff: true,\r\n        value: condQuill,\r\n        path: condQuillPath,\r\n        name: trm(\"quill\"),\r\n        states: {\r\n          quill: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          value: condAsc4,\r\n          path: condAsc4Path,\r\n          teamBuff: true,\r\n          name: trm(\"asc4Cond\"),\r\n          states: {\r\n            press: {\r\n              name: \"Press\",\r\n              fields: [{\r\n                node: nodeAsc4Press_skill_dmg_\r\n              }, {\r\n                node: nodeAsc4Press_burst_dmg_\r\n              }]\r\n            },\r\n            hold: {\r\n              name: \"Hold\",\r\n              fields: [{\r\n                node: nodeAsc4Hold_normal_dmg_\r\n              }, {\r\n                node: nodeAsc4Hold_charged_dmg_\r\n              }, {\r\n                node: nodeAsc4Hold_plunging_dmg_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: st(\"addlCharges\"),\r\n          value: 1\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          value: condC4,\r\n          path: condC4Path,\r\n          name: trm(\"c4\"),\r\n          states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n            name: i.toString(),\r\n            fields: [{ node: c4Inc }]\r\n          }))\r\n        }), {\r\n        ...sectionTemplate(\"constellation6\", tr, c6, [{\r\n          text: tr(\"constellation6.description\")\r\n        }], undefined, data => data.get(input.constellation).value >= 6, true, true),\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          burst: {\r\n            fields: [{\r\n              node: nodeBurstCryo_enemyRes_\r\n            }, {\r\n              node: nodeBurstPhysical_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          value: condAsc1,\r\n          path: condAsc1Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            field: {\r\n              fields: [{\r\n                node: infoMut(nodeAsc1Disp, { key: \"cryo_dmg_\", variant: \"cryo\" }) // Jank\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.durationInc,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(nodeC2Disp, { key: \"cryo_critDMG_\", variant: \"cryo\" })\r\n        }], undefined, data => data.get(input.constellation).value >= 2, true, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\nconst key: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(key, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(key, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(key, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Disp = greaterEq(input.asc, 1, datamine.passive1.eleMas)\r\nconst asc1 = unequal(target.charKey, key, // Not applying to Sucrose\r\n    equal(target.charEle, condSwirlReaction, asc1Disp)) // And element matches the swirl\r\nconst asc4Disp = equal(\"hit\", condSkillHitOpponent,\r\n    greaterEq(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas)))\r\nconst asc4 = unequal(target.charKey, key, asc4Disp)\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 1,\r\n        text: st(\"charges\"),\r\n        value: 2\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // Absorption\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condAbsorption,\r\n          path: condAbsorptionPath,\r\n          name: st(\"eleAbsor\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n            name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n            fields: [{\r\n              node: c6Bonus[`${eleKey}_dmg_`],\r\n            }],\r\n          }]))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        // Hide for Sucrose\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, key, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(asc1Disp, { key: \"eleMas\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: greaterEq(input.asc, 4, unequal(input.activeCharKey, key, 1)),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: infoMut(asc4Disp, { key: \"eleMas\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tartaglia\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst region: Region = \"snezhnaya\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  riptide: {\r\n    flashDmg: skillParam_gen.auto[a++],\r\n    burstDmg: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  riptideDuration: skillParam_gen.auto[a++][0],\r\n  skill: {\r\n    stanceDmg: skillParam_gen.skill[s++],\r\n    normal1: skillParam_gen.skill[s++],\r\n    normal2: skillParam_gen.skill[s++],\r\n    normal3: skillParam_gen.skill[s++],\r\n    normal4: skillParam_gen.skill[s++],\r\n    normal5: skillParam_gen.skill[s++],\r\n    normal61: skillParam_gen.skill[s++], // 6.1\r\n    normal62: skillParam_gen.skill[s++], // 6.2\r\n    charged1: skillParam_gen.skill[s++],\r\n    charged2: skillParam_gen.skill[s++],\r\n    riptideSlash: skillParam_gen.skill[s++],\r\n    chargedStamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    preemptiveCd1: skillParam_gen.skill[s++][0],\r\n    preemptiveCd2: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    meleeDmg: skillParam_gen.burst[b++],\r\n    riptideBlastDmg: skillParam_gen.burst[b++],\r\n    rangedDmg: skillParam_gen.burst[b++],\r\n    enerReturned: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    durationExt: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive: {\r\n    auto_boost: 1,\r\n  },\r\n  constellation1: {\r\n    cdRed: 0.2\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('hydro') } }),\r\n    flashDmg: dmgNode(\"atk\", datamine.riptide.flashDmg, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    burstDmg: dmgNode(\"atk\", datamine.riptide.burstDmg, \"normal\", { hit: { ele: constant('hydro') } })\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stanceDmg: dmgNode(\"atk\", datamine.skill.stanceDmg, \"skill\"),\r\n    normal1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal1), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal2), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal3: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal3), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal4: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal4), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal5: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal5), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal61: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal61), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal62: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal62), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    charged1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged1), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    charged2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged2), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    riptideSlash: dmgNode(\"atk\", datamine.skill.riptideSlash, \"skill\")\r\n  },\r\n  burst: {\r\n    meleeDmg: dmgNode(\"atk\", datamine.burst.meleeDmg, \"burst\"),\r\n    rangedDmg: dmgNode(\"atk\", datamine.burst.rangedDmg, \"burst\"),\r\n    riptideBlastDmg: dmgNode(\"atk\", datamine.burst.riptideBlastDmg, \"burst\")\r\n  }\r\n}\r\n\r\nconst nodePassive = constant(1)\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    bonus: {\r\n      auto: nodePassive,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.riptide\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.flashDmg, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n              textSuffix: st(\"brHits\", { count: 3 })\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.burstDmg, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.10\"),\r\n              value: (data) => data.get(input.asc).value >= 1 ? datamine.passive1.durationExt + datamine.riptideDuration : datamine.riptideDuration,\r\n              unit: \"s\"\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stanceDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal3, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal4, { key: `char_${key}_gen:skill.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal5, { key: `char_${key}_gen:skill.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal61, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal62, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.charged1, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.charged2, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(constant(datamine.skill.chargedStamina), { key: `char_${key}_gen:skill.skillParams.8` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.riptideSlash, { key: `char_${key}_gen:skill.skillParams.9` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.10\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.11\"),\r\n        value: (data) => data.get(input.constellation).value >= 1 ? `${datamine.skill.preemptiveCd1 -\r\n          (datamine.skill.preemptiveCd1 * datamine.constellation1.cdRed)} - ${datamine.skill.preemptiveCd2 -\r\n          (datamine.skill.preemptiveCd2 * datamine.constellation1.cdRed)}` : `${datamine.skill.preemptiveCd1} -\r\n          ${datamine.skill.preemptiveCd2}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.12\"),\r\n        value: (data) => data.get(input.constellation).value >= 1 ? `${datamine.skill.maxCd - (datamine.skill.maxCd *\r\n          datamine.constellation1.cdRed)}` : `${datamine.skill.maxCd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.meleeDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.rangedDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.riptideBlastDmg, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerReturned}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, undefined, undefined,\r\n        [sectionTemplate(\"passive3\", tr, passive3, [{ node: nodePassive }], undefined, undefined, true, true)]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Thoma\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    hpShield_: skillParam_gen.skill[s++],\r\n    baseShield: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    maxHpShield_: skillParam_gen.skill[s++],\r\n    maxBaseShield: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    collapseDmg: skillParam_gen.burst[b++],\r\n    hpShield_: skillParam_gen.burst[b++],\r\n    baseShield: skillParam_gen.burst[b++],\r\n    shieldDuration: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++][0],\r\n    scorchingDuration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: skillParam_gen.passive1[2][0],\r\n    cd: skillParam_gen.passive1[3][0]\r\n  },\r\n  passive2: {\r\n    collapse_dmgInc: skillParam_gen.passive2[0][0],\r\n  },\r\n  c2: {\r\n    burstDuration: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    energyRestore: skillParam_gen.constellation4[0],\r\n  },\r\n  c6: {\r\n    auto_dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condP1BarrierStacksPath, condP1BarrierStacks] = cond(key, \"p1BarrierStacks\")\r\n// This should technically only apply to the active character, but I am trying\r\n// to minimize the amount of jank active character fixes.\r\nconst p1_shield_ = greaterEq(input.asc, 1,\r\n  lookup(condP1BarrierStacks, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n    stacks,\r\n    constant(stacks * datamine.passive1.shield_)\r\n  ])), naught)\r\n)\r\n\r\nconst p2Collapse_dmgInc = greaterEq(input.asc, 4, prod(input.total.hp, datamine.passive2.collapse_dmgInc))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\n\r\nconst [condC6AfterBarrierPath, condC6AfterBarrier] = cond(key, \"c6AfterBarrier\")\r\nconst c6_normal_dmg_ = greaterEq(input.constellation, 6,\r\n  equal(condC6AfterBarrier, \"on\", datamine.c6.auto_dmg)\r\n)\r\nconst c6_charged_dmg_ = { ...c6_normal_dmg_ }\r\nconst c6_plunging_dmg_ = { ...c6_normal_dmg_ }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    minShield: shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\"),\r\n    minPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\")),\r\n    maxShield: shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\"),\r\n    maxPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\")),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    collapseDmg: dmgNode(\"atk\", datamine.burst.collapseDmg, \"burst\",\r\n      { premod: { burst_dmgInc: p2Collapse_dmgInc } }\r\n    ),\r\n    shield: shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\"),\r\n    pyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\")),\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: p1_shield_,\r\n      normal_dmg_: c6_normal_dmg_,\r\n      charged_dmg_: c6_charged_dmg_,\r\n      plunging_dmg_: c6_plunging_dmg_,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.minShield, { key: \"sheet_gen:dmgAbsorption\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.minPyroShield,\r\n          { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.maxShield, { key: `char_${key}:maxShield` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.maxPyroShield,\r\n          { key: `char_${key}:maxPyroShield`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.skill.shieldDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.pyroShield,\r\n          { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.shieldDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.collapseDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.scorchingDuration}s + ${datamine.c2.burstDuration}s = ${datamine.burst.scorchingDuration + datamine.c2.burstDuration}`\r\n          : datamine.burst.scorchingDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1BarrierStacks,\r\n          path: condP1BarrierStacksPath,\r\n          name: trm(\"a1\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n            stacks,\r\n            {\r\n              name: st(\"stack\", { count: stacks }),\r\n              fields: [{\r\n                node: p1_shield_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }, {\r\n                text: st(\"triggerCD\"),\r\n                value: datamine.passive1.cd,\r\n                unit: \"s\",\r\n                fixed: 1\r\n              }]\r\n            }\r\n          ]))\r\n        }),\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: infoMut(p2Collapse_dmgInc, { key: `char_${key}:a2`, variant: elementKey }),\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: trm(\"c2\"),\r\n          value: datamine.c2.burstDuration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4AfterBurst,\r\n          path: condC4AfterBurstPath,\r\n          name: st(\"afterUse.burst\"),\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                text: st(\"energyRegen\"),\r\n                value: datamine.c4.energyRestore,\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6AfterBarrier,\r\n          path: condC6AfterBarrierPath,\r\n          name: trm(\"c6\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c6_normal_dmg_,\r\n              }, {\r\n                node: c6_charged_dmg_,\r\n              }, {\r\n                node: c6_plunging_dmg_,\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../../Formula/utils'\r\nimport { input, target } from '../../../../Formula'\r\nimport { normalSrc, sectionTemplate, talentTemplate } from '../../CharacterSheet'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { objectKeyValueMap } from '../../../../Util/Util'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"anemo\"\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    initial_dmg: skillParam_gen.skill[s++],\r\n    initial_max: skillParam_gen.skill[s++],\r\n    storm_dmg: skillParam_gen.skill[s++],\r\n    storm_max: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: 0.6,\r\n  },\r\n  passive2: {\r\n    heal_: 0.02,\r\n  },\r\n  constellation2: {\r\n    enerRech_: 0.16,\r\n  },\r\n  constellation6: {\r\n    enemyRes_: -0.2\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, `${elementKey}BurstAbsorption`)\r\nconst nodeC2 = greaterEq(input.constellation, 2, datamine.constellation2.enerRech_)\r\nconst [condC6Path, condC6] = cond(key, `${elementKey}C6Hit`)\r\nconst nodeC6 = equal(condC6, \"on\", datamine.constellation6.enemyRes_)\r\nconst nodesC6 = objectKeyValueMap(absorbableEle, ele => [`${ele}_enemyRes_`, equal(condC6, \"on\", equal(condBurstAbsorption, ele, datamine.constellation6.enemyRes_))])\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    initial_dmg: dmgNode(\"atk\", datamine.skill.initial_dmg, \"skill\"),\r\n    initial_max: dmgNode(\"atk\", datamine.skill.initial_max, \"skill\"),\r\n    storm_dmg: dmgNode(\"atk\", datamine.skill.storm_dmg, \"skill\"),\r\n    storm_max: dmgNode(\"atk\", datamine.skill.storm_max, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(input.total.atk, datamine.passive1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n  passive2: {\r\n    heal: greaterEq(input.asc, 2, customHealNode(prod(percent(datamine.passive2.heal_), input.total.hp))),\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: nodeC2,\r\n    ...nodesC6,\r\n    anemo_enemyRes_: nodeC6,\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n      ...sectionTemplate(\"auto\", tr, auto,\r\n        datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n        }))\r\n      ),\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }]),\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.initial_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.initial_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.storm_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.2` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.storm_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.3` }),\r\n    }, {\r\n      text: tr(\"skill.skillParams.4\"),\r\n      value: datamine.skill.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"skill.skillParams.5\"),\r\n      value: datamine.skill.maxCd,\r\n      unit: \"s\"\r\n    }, {\r\n      canShow: data => data.get(input.constellation).value >= 4,\r\n      text: trm(\"c1\"),\r\n      value: 10,\r\n      unit: \"%\"\r\n    }]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }),\r\n    }, {\r\n      text: tr(\"burst.skillParams.2\"),\r\n      value: datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"burst.skillParams.3\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"burst.skillParams.4\"),\r\n      value: datamine.burst.enerCost,\r\n    }], {\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }),\r\n        }]\r\n      }]))\r\n    }, [\r\n      // C6 anemo\r\n      sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        description: tr(\"constellation6.description.0\"),\r\n        teamBuff: true,\r\n        name: trm(\"c6\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC6, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      // C6 elemental self-display\r\n      sectionTemplate(\"constellation6\", tr, c6, absorbableEle.map(eleKey => (\r\n          { node: nodesC6[`${eleKey}_enemyRes_`] }\r\n        )),\r\n        undefined,\r\n        data => data.get(input.constellation).value >= 6\r\n          && data.get(condBurstAbsorption).value !== undefined\r\n          && data.get(equal(target.charKey, key, 1)).value === 1,\r\n        false,\r\n        true\r\n      ),\r\n      // C6 elemental team-display\r\n      sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        description: tr(\"constellation6.description.1\"),\r\n        name: st(\"eleAbsor\"),\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, unequal(input.activeCharKey, key, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: nodesC6[`${eleKey}_enemyRes_`]\r\n          }]\r\n        }]))\r\n      })\r\n    ]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n      node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:${elementKey}.p1` })\r\n    }]),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n      node: infoMut(dmgFormulas.passive2.heal, { key: `sheet_gen:healing`, variant: \"success\" })\r\n    }]),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  },\r\n}\r\nexport default talentSheet\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../../Formula/utils'\r\nimport { input, target } from '../../../../Formula'\r\nimport { normalSrc, talentTemplate, sectionTemplate } from '../../CharacterSheet'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { range } from '../../../../Util/Util'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"geo\"\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    numShockwaves: 4,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    skill_cdRed: 2\r\n  },\r\n  passive2: {\r\n    geoDmg: percent(0.6),\r\n  },\r\n  constellation1: {\r\n    critRate_: percent(0.1),\r\n  },\r\n  constellation4: {\r\n    energyRestore: 5,\r\n    maxTriggers: 5\r\n  },\r\n  constellation6: {\r\n    burstDuration: 5,\r\n    skillDuration: 10\r\n  }\r\n} as const\r\n\r\nconst [condC1BurstAreaPath, condC1BurstArea] = cond(key, `${elementKey}C1BurstArea`)\r\nconst c1BurstArea_critRate_Disp = greaterEq(input.constellation, 1,\r\n  equal(condC1BurstArea, \"on\", datamine.constellation1.critRate_)\r\n)\r\nconst c1BurstArea_critRate_ = equal(input.activeCharKey, target.charKey, c1BurstArea_critRate_Disp)\r\n\r\nconst [condC4BurstHitPath, condC4BurstHit] = cond(key, `${elementKey}C4BurstHit`)\r\nconst c4Burst_energyRestore = lookup(condC4BurstHit,\r\n  Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n    stack,\r\n    constant(stack * datamine.constellation4.energyRestore)\r\n  ])),\r\n  naught\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: customDmgNode(\r\n      prod(input.total.atk, datamine.passive2.geoDmg), \"elemental\", { hit: { ele: constant(\"geo\") } }\r\n    )\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: c1BurstArea_critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n      ...sectionTemplate(\"auto\", tr, auto,\r\n        datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n        }))\r\n      ),\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }]),\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n    }, {\r\n      text: tr(\"skill.skillParams.1\"),\r\n      value: data => data.get(input.constellation).value >= 6\r\n        ? `${datamine.skill.duration}s + ${datamine.constellation6.skillDuration}s = ${datamine.skill.duration + datamine.constellation6.skillDuration}`\r\n        : datamine.skill.duration,\r\n      unit: \"s\",\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: data => data.get(input.asc).value >= 1\r\n        ? `${datamine.skill.cd}s - ${datamine.passive1.skill_cdRed}s = ${datamine.skill.cd - datamine.passive1.skill_cdRed}`\r\n        : datamine.skill.cd,\r\n      unit: \"s\",\r\n    }], undefined, [\r\n      sectionTemplate(\"passive1\", tr, passive1, [{\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.skill_cdRed,\r\n        unit: \"s\"\r\n      }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n      sectionTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:${elementKey}.c2.key` }),\r\n      }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n      sectionTemplate(\"constellation6\", tr, c6, [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.skillDuration,\r\n        unit: \"s\"\r\n      }], undefined, data => data.get(input.constellation).value >= 6, false, true),\r\n    ]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.dmg,\r\n        { key: `sheet_gen:skillDMG` }\r\n      ),\r\n      textSuffix: st(\"brHits\", { count: datamine.burst.numShockwaves })\r\n    }, {\r\n      text: tr(\"burst.skillParams.1\"),\r\n      value: data => data.get(input.constellation).value >= 6\r\n        ? `${datamine.burst.duration}s + ${datamine.constellation6.burstDuration}s = ${datamine.burst.duration + datamine.constellation6.burstDuration}`\r\n        : datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"energyCost\"),\r\n      value: datamine.burst.enerCost,\r\n    }], undefined, [\r\n      sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1BurstArea,\r\n        path: condC1BurstAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c1BurstArea_critRate_Disp, { key: \"critRate_\" }),\r\n            }, {\r\n              text: st(\"incInterRes\"),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4BurstHit,\r\n        path: condC4BurstHitPath,\r\n        name: st(\"hitOp.burst\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n          stack,\r\n          {\r\n            name: st(\"hits\", { count: stack }),\r\n            fields: [{\r\n              node: infoMut(c4Burst_energyRestore, { key: \"sheet:energyRegen\" }),\r\n            }]\r\n          }\r\n        ]))\r\n      }),\r\n      sectionTemplate(\"constellation6\", tr, c6, [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.burstDuration,\r\n        unit: \"s\"\r\n      }], undefined, data => data.get(input.constellation).value >= 6, false, true),\r\n    ]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n      node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:${elementKey}.passive2.key` })\r\n    }]),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: burstC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: skillC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { cond, sgt } from '../../../SheetUtil'\r\nimport { normalSrc, sectionTemplate, talentTemplate } from '../../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"electro\"\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    energyRestore: skillParam_gen.skill[s++],\r\n    amulets: 2,\r\n    amuletDuration: skillParam_gen.skill[s++][0],\r\n    enerRech_: skillParam_gen.skill[s++][0],\r\n    enerRech_duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    thunderDmg: skillParam_gen.burst[b++],\r\n    thunderCd: 0.5,\r\n    energyRestore: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerRech_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    addlAmulets: 1\r\n  },\r\n  constellation2: {\r\n    duration: skillParam_gen.constellation2[0],\r\n    electro_enemyRes: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation6: {\r\n    numAttacks: skillParam_gen.constellation6[0],\r\n    thunder_dmg_: skillParam_gen.constellation6[0],\r\n    energyRestore: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAmuletPath, condSkillAmulet] = cond(key, `${elementKey}SkillAmulet`)\r\nconst p2_enerRech_ = greaterEq(input.asc, 4,\r\n  prod(input.premod.enerRech_, percent(datamine.passive2.enerRech_))\r\n)\r\nconst skillAmulet_enerRech_Disp = equal(condSkillAmulet, \"on\",\r\n  sum(\r\n    percent(datamine.skill.enerRech_),\r\n    p2_enerRech_\r\n  )\r\n)\r\nconst skillAmulet_enerRech_ = equal(input.activeCharKey, target.charKey, skillAmulet_enerRech_Disp)\r\n\r\nconst burstEnergyRestore = subscript(input.total.burstIndex, datamine.burst.energyRestore,\r\n  { key: `char_${key}_gen:${elementKey}.burst.skillParmas.2` }\r\n)\r\n\r\nconst [condC2ThunderPath, condC2Thunder] = cond(key, `${elementKey}C2Thunder`)\r\nconst c2Thunder_electro_enemyRes_ = greaterEq(input.constellation, 2,\r\n  equal(condC2Thunder, \"on\", datamine.constellation2.electro_enemyRes)\r\n)\r\n\r\nconst [condC6After2ThunderPath, condC6After2Thunder] = cond(key, `${elementKey}C6After2Thunder`)\r\nconst c6_thunder_dmg_ = greaterEq(input.constellation, 6, equal(condC6After2Thunder, \"on\", datamine.constellation6.thunder_dmg_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    thunderDmg: dmgNode(\"atk\", datamine.burst.thunderDmg, \"burst\",\r\n      { premod: { burst_dmg_: c6_thunder_dmg_ } })\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: c2Thunder_electro_enemyRes_,\r\n    },\r\n    total: {\r\n      enerRech_: skillAmulet_enerRech_ // In total to avoid loops\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n      ...sectionTemplate(\"auto\", tr, auto,\r\n        datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n        }))\r\n      ),\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }]),\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` })\r\n    }, {\r\n      text: trm(\"skill.amuletGenAmt\"),\r\n      value: data => data.get(input.constellation).value >= 1\r\n        ? datamine.skill.amulets + datamine.constellation1.addlAmulets\r\n        : datamine.skill.amulets\r\n    }, {\r\n      text: tr(\"skill.skillParams.4\"),\r\n      value: datamine.skill.amuletDuration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: datamine.skill.cd,\r\n      unit: \"s\",\r\n      fixed: 1\r\n    }], {\r\n      value: condSkillAmulet,\r\n      path: condSkillAmuletPath,\r\n      name: trm(\"skill.absorb\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: subscript(input.total.skillIndex, datamine.skill.energyRestore,\r\n              { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }\r\n            )\r\n          }, {\r\n            node: infoMut(skillAmulet_enerRech_Disp, { key: \"enerRech_\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.skill.enerRech_duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }, [\r\n      sectionTemplate(\"passive1\", tr, passive1, [{\r\n        text: tr(\"passive1.description\")\r\n      }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n      sectionTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(p2_enerRech_, { key: `char_${key}:${elementKey}.passive2.enerRech_` })\r\n      }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n    ]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.pressDmg,\r\n        { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }\r\n      )\r\n    }, {\r\n      node: infoMut(dmgFormulas.burst.thunderDmg,\r\n        { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }\r\n      )\r\n    }, {\r\n      text: trm(\"burst.thunderCd\"),\r\n      value: datamine.burst.thunderCd,\r\n      unit: \"s\",\r\n      fixed: 1\r\n    }, {\r\n      node: infoMut(burstEnergyRestore, { key: `char_${key}_gen:${elementKey}.burst.skillParams.2` })\r\n    }, {\r\n      text: sgt(\"duration\"),\r\n      value: datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"energyCost\"),\r\n      value: datamine.burst.enerCost,\r\n    }], undefined, [\r\n      sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2Thunder,\r\n        path: condC2ThunderPath,\r\n        name: trm(\"c2.thunderHit\"),\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c2Thunder_electro_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6After2Thunder,\r\n        path: condC6After2ThunderPath,\r\n        name: trm(\"c6.fallingThunder3\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c6_thunder_dmg_,\r\n                { key: `char_${key}:${elementKey}.c6.fallingThunderBonus_`, variant: \"electro\" }\r\n              )\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.constellation6.energyRestore\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    ]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: burstC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: skillC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import card from './Traveler_Female_Card.jpg'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport anemo, { data as anemoData } from './anemo'\r\nimport geo, { data as geoData } from './geo'\r\nimport electro, { data as electroData} from './electro'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts';\r\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\r\nimport data_gen_src from './data_gen.json'\r\nimport { CharacterData } from 'pipeline'\r\nimport { trans } from '../../SheetUtil'\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Traveler\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  rarity: data_gen.star,\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"F/M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talents: {\r\n    anemo,\r\n    geo,\r\n    electro,\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, {\r\n  anemo: anemoData,\r\n  geo: geoData,\r\n  electro: electroData,\r\n});\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { reactions } from '../../../Formula/reaction'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport {  customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Venti\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1x2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDmg: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    baseDmg: skillParam_gen.burst[b++],\r\n    baseTicks: 20,\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    absorbTicks: 15,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0]\r\n  },\r\n  // No real p3/constellation datamine values :(\r\n  passive3: {\r\n    stam_: 0.20,\r\n  },\r\n  constellation1: {\r\n    dmgRatio: 0.33,\r\n  },\r\n  constellation2: {\r\n    res_: -0.12,\r\n    duration: 10,\r\n  },\r\n  constellation4: {\r\n    anemo_dmg_: 0.25,\r\n    duration: 10,\r\n  },\r\n  constellation6: {\r\n    res_: -0.20,\r\n    duration: 10, // From KQM\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2, {\r\n    \"hit\": constant(datamine.constellation2.res_),\r\n    \"launched\": prod(datamine.constellation2.res_, 2) },\r\n    naught\r\n  )\r\n)\r\nconst c2Hit_phys_enemyRes__ = {...c2Hit_anemo_enemyRes_}\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\r\n  datamine.constellation4.anemo_dmg_))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6_anemo_enemyRes_ = equal(condC6, \"takeDmg\", datamine.constellation6.res_)\r\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\r\n  `${ele}_enemyRes_`,\r\n  greaterEq(input.constellation, 6, equal(ele, condBurstAbsorption, constant(datamine.constellation6.res_)))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n  [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\r\n    absorb: unequal(condBurstAbsorption, undefined, dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }})),\r\n    full7: unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }}), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 7)\r\n    )),\r\n    full14: unequal(condBurstAbsorption, \"hydro\", unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }}), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 14)\r\n    )))\r\n  },\r\n  constellation1: {\r\n    aimed: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\"\r\n      )\r\n    ),\r\n    fully: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\", { hit: { ele: constant(elementKey) } }\r\n      )\r\n    ),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    anemo_dmg_: c4_anemo_dmg_,\r\n    staminaGlidingDec_: p3_staminaGlidingDec_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\r\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\r\n      ...c6_ele_enemyRes_arr,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }],\r\n      undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"upcurrentDuration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true\r\n        ), sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2,\r\n          path: condC2Path,\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          name: tr(\"constellation2.name\"),\r\n          states: {\r\n            hit: {\r\n              name: trm(\"c2.hit\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            },\r\n            launched: {\r\n              name: trm(\"c2.launched\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n            textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\r\n          }]\r\n        }]))\r\n      }, [{\r\n        // Custom burst formula\r\n        ...sectionTemplate(\"burst\", tr, burst, [{\r\n          node: infoMut(dmgFormulas.burst.full7, { key: `char_${key}:fullBurstDMG.dmg7`, variant: \"physical\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.full14, { key: `char_${key}:fullBurstDMG.dmg14`, variant: \"physical\" }),\r\n        }], undefined, data => data.get(condBurstAbsorption).value !== undefined, undefined, true),\r\n        text: trm(\"fullBurstDMG.description\"),\r\n        }, sectionTemplate(\"passive2\", tr, passive2, [{\r\n            text: trm(\"regenEner\"),\r\n          }, {\r\n            text: trm(\"q\"),\r\n          }], undefined, data => data.get(input.asc).value >= 4, false, true\r\n        ), \r\n        // C6 anemo team-display\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6,\r\n          path: condC6Path,\r\n          description: tr(\"constellation6.description.0\"),\r\n          teamBuff: true,\r\n          name: trm(\"c6\"),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: {\r\n            takeDmg: {\r\n              fields: [{\r\n                node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), \r\n        // C6 elemental self-display\r\n        sectionTemplate(\"constellation6\", tr, c6, absorbableEle.map(eleKey => (\r\n            { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\r\n          )),\r\n          undefined,\r\n          data => data.get(input.constellation).value >= 6\r\n            && data.get(condBurstAbsorption).value !== undefined\r\n            && data.get(equal(target.charKey, key, 1)).value === 1,\r\n          false,\r\n          true\r\n        ),\r\n        // C6 elemental team-display\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condBurstAbsorption,\r\n          path: condBurstAbsorptionPath,\r\n          description: tr(\"constellation6.description.1\"),\r\n          name: st(\"eleAbsor\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, unequal(input.activeCharKey, key, 1)),\r\n          states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n            name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n            fields: [{\r\n              node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\r\n            }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, [{ node: p3_staminaGlidingDec_ }]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          pickup: {\r\n            fields: [{\r\n              node: c4_anemo_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg))\r\n)\r\nconst antiC6 = prod(duringPyronado, -1)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        description: tr(\"constellation1.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        header: conditionalHeader(\"constellation6\", tr, c6),\r\n        description: tr(\"constellation6.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              text: trm(\"c6Exception\"),\r\n              canShow: data => data.get(input.constellation).value >= 6\r\n                && data.get(condDuringPyronado).value === \"duringPyronado\"\r\n            }, {\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        canShow: greaterEq(input.asc, 2, 1),\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        value: datamine.constellation2.dmg,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiao\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[2], // 2\r\n      skillParam_gen.auto[3], // 3\r\n      skillParam_gen.auto[4], // 4\r\n      skillParam_gen.auto[6], // 5\r\n      skillParam_gen.auto[7], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[8], // 1\r\n    stamina: skillParam_gen.auto[9][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[10],\r\n    low: skillParam_gen.auto[11],\r\n    high: skillParam_gen.auto[12],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n    drain: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmgBonus: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[0][0],\r\n    skillDmgBonus: skillParam_gen.passive2[1][0],\r\n    maxStacks: skillParam_gen.passive2[2][0],\r\n  },\r\n  passive3: {\r\n    staminaClimbingDec_: 0.20,\r\n  },\r\n  constellation2: {\r\n    enerRech_: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: skillParam_gen.constellation4[0],\r\n    def_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\r\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\r\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\r\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\r\n\r\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\r\nconst a1BurstStackArr = range(0, 4)\r\nconst all_dmg_ = equal(\"inBurst\", condInBurst,\r\n  lookup(condA1BurstStack,\r\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\r\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\r\nconst skill_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4SkillStack,\r\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c2Inactive = greaterEq(input.constellation, 2,\r\n  unequal(input.activeCharKey, key, 1)\r\n)\r\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\r\n\r\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\r\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    plunging_dmg_,\r\n    all_dmg_,\r\n    skill_dmg_,\r\n    enerRech_: c2Inactive_enerRech_,\r\n    def_: c4BelowHP_def_,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: st(\"charges\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\r\n      }], undefined, [ // A4\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          path: condA4SkillStackPath,\r\n          value: condA4SkillStack,\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          description: tr(\"passive2.description\"),\r\n          name: trm(\"skillStack\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\r\n            name: st(\"uses\", { count: i }),\r\n            fields: [{ node: skill_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\r\n      }, {\r\n        node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\r\n        textSuffix: trm(\"burst.currentHPPerSec\"),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        path: condInBurstPath,\r\n        value: condInBurst,\r\n        name: trm(\"burst.inBurst\"),\r\n        states: {\r\n          inBurst: {\r\n            fields: [{\r\n              node: normal_dmg_,\r\n            }, {\r\n              node: charged_dmg_,\r\n            }, {\r\n              node: plunging_dmg_,\r\n            }, {\r\n              text: trm(\"burst.incJump\"),\r\n            }, {\r\n              text: trm(\"burst.incAtkAoe\"),\r\n            }, {\r\n              canShow: data => data.get(infusion).value === elementKey,\r\n              text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }, [ // A1\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          path: condA1BurstStackPath,\r\n          value: condA1BurstStack,\r\n          name: trm(\"burst.stack\"),\r\n          canShow: greaterEq(input.asc, 1, equal(\"inBurst\", condInBurst, 1)),\r\n          states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\r\n            name: st(\"seconds\", { count: i * 3 }),\r\n            fields: [{ node: all_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, undefined, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{ node: c2Inactive_enerRech_ }], undefined,\r\n          data => data.get(c2Inactive).value === 1,\r\n          true,\r\n          true\r\n        )\r\n      ]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        path: condC4BelowHPPath,\r\n        value: condC4BelowHP,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          c4BelowHP: {\r\n            fields: [{ node: c4BelowHP_def_ }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum, unit } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.premod.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    // Multiplicative DMG increase requires customDmgNode\r\n    press1: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit1, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(unit, nodeC4)\r\n    ), \"skill\"),\r\n    press2: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit2, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(unit, nodeC4)\r\n    ), \"skill\"),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n          : `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: nodeA4\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, percent, prod, equal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Xinyan\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[a++],\r\n    final: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    shieldArr: [\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n    ],\r\n    lvl3Dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressPhysDmg: skillParam_gen.burst[b++],\r\n    dotPyroDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    physical_dmg_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    atkSPD_: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    cd: skillParam_gen.constellation1[1],\r\n  },\r\n  c2: {\r\n    burstphysical_critRate_: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    physical_enemyRes_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  c6: {\r\n    staminaChargedDec_: -skillParam_gen.constellation6[0],\r\n    charged_atkBonus: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillHitNumPath, condSkillHitNum] = cond(key, \"skillHitNum\")\r\n\r\nconst [condP2ShieldPath, condP2Shield] = cond(key, \"p2Shield\")\r\nconst p2Shield_physical_dmg_Disp = greaterEq(input.asc, 4, equal(condP2Shield, \"on\", datamine.passive2.physical_dmg_))\r\nconst p2Shield_physical_dmg_ = equal(input.activeCharKey, target.charKey, p2Shield_physical_dmg_Disp)\r\n\r\nconst [condC1CritPath, condC1Crit] = cond(key, \"c1Crit\")\r\nconst c1Crit_atkSPD_ = greaterEq(input.constellation, 1, equal(condC1Crit, \"on\", datamine.c1.atkSPD_))\r\n\r\nconst c2BurstPhysical_critRate_ = greaterEq(input.constellation, 2, datamine.c2.burstphysical_critRate_)\r\n\r\nconst [condC4SkillHitPath, condC4SkillHit] = cond(key, \"c4Burst\")\r\nconst c4SkillHit_physical_enemyRes_ = greaterEq(input.constellation, 4, equal(condC4SkillHit, \"on\", datamine.c4.physical_enemyRes_))\r\n\r\nconst c6_staminaChargedDec_ = greaterEq(input.constellation, 6, datamine.c6.staminaChargedDec_)\r\nconst [condC6ChargedPath, condC6Charged] = cond(key, \"c6Charged\")\r\nconst c6_chargedAtkBonus = greaterEq(input.constellation, 6,\r\n  equal(condC6Charged, \"on\",\r\n    prod(input.total.def, percent(datamine.c6.charged_atkBonus))\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `normShield${i + 1}`,\r\n      shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"),\r\n    ])),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `pyroShield${i + 1}`,\r\n      shieldElement(elementKey, shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"))\r\n    ])),\r\n    lvl3Dmg: dmgNode(\"atk\", datamine.skill.lvl3Dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressPhysDmg: dmgNode(\"atk\", datamine.burst.pressPhysDmg, \"burst\", {\r\n      hit: { ele: constant(\"physical\") },\r\n      premod: {\r\n        burst_critRate_: c2BurstPhysical_critRate_,\r\n      }\r\n    }),\r\n    dotPyroDmg: dmgNode(\"atk\", datamine.burst.dotPyroDmg, \"burst\"),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_dmg_: p2Shield_physical_dmg_,\r\n      physical_enemyRes_: c4SkillHit_physical_enemyRes_,\r\n    }\r\n  },\r\n  premod: {\r\n    atkSPD_: c1Crit_atkSPD_,\r\n    staminaChargedDec_: c6_staminaChargedDec_,\r\n    atk: c6_chargedAtkBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"constellation6\", tr, c6, [{\r\n        node: c6_staminaChargedDec_\r\n      }], {\r\n        value: condC6Charged,\r\n        path: condC6ChargedPath,\r\n        name: trm(\"c6.duringCharge\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6_chargedAtkBonus\r\n            }]\r\n          }\r\n        }\r\n      }, data => data.get(input.constellation).value >= 6, false, true), {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condSkillHitNum,\r\n        path: condSkillHitNumPath,\r\n        name: trm(\"skill.shieldLevel\"),\r\n        states: Object.fromEntries(range(1, 3).map(lvl => [ // For each level\r\n          lvl, {\r\n            name: trm(`skill.shieldLevels.${lvl}`),\r\n            fields: [\r\n              ...([\"norm\", \"pyro\"] as const).flatMap(type => ([{ // For each type of shield\r\n              node: infoMut(dmgFormulas.skill[`${type}Shield${lvl}`], // Make the node\r\n                { key: type === \"norm\" // And change the key to match\r\n                  ? `char_${key}_gen:skill.skillParams.${lvl}`\r\n                  : `char_${key}:skill.pyroShield.${lvl}`\r\n                }\r\n              )},\r\n            ])), {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\",\r\n            },\r\n            // Level 3 damage\r\n            ...lvl === 3 ? [{node: infoMut(dmgFormulas.skill.lvl3Dmg, { key: `char_${key}_gen:skill.skillParams.4` })}] : [],\r\n          ]}\r\n        ]))\r\n      }, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"p1.desc\"),\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condP2Shield,\r\n          path: condP2ShieldPath,\r\n          name: trm(\"p2.activeShield\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(p2Shield_physical_dmg_Disp, { key: \"physical_dmg_\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4SkillHit,\r\n          path: condC4SkillHitPath,\r\n          name: trm(\"c4.swingHit\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c4SkillHit_physical_enemyRes_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.c4.duration,\r\n                unit: \"s\",\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.pressPhysDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotPyroDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          node: infoMut(c2BurstPhysical_critRate_, { key: `char_${key}:c2.key_` }),\r\n        }, {\r\n          text: trm(\"c2.shield\"),\r\n        }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1Crit,\r\n        path: condC1CritPath,\r\n        name: st(\"hitOp.crit\"),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c1Crit_atkSPD_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.c1.duration,\r\n              unit: \"s\",\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.c1.cd,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_, { fixed: 2 })))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.4\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: nodeAsc4 }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customShieldNode, dataObjForCharacterSheet, dmgNode, shieldElement } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Yanfei\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmgArr: [\r\n      skillParam_gen.auto[a++], // 0 seals\r\n      skillParam_gen.auto[a++], // 1 seal\r\n      skillParam_gen.auto[a++], // 2 seals\r\n      skillParam_gen.auto[a++], // 3 seals\r\n      skillParam_gen.auto[a++], // 4 seals\r\n    ],\r\n    unknown: {\r\n      arr: [\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n      ]\r\n    },\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    sealStaminaRed_: skillParam_gen.auto[a++][0],\r\n    maxSeals: 3,\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  sealDuration: skillParam_gen.auto[a++][0],\r\n  // There is another unknown here for auto\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    cd: skillParam_gen.skill[1][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    charged_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    sealInterval: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    seal_pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    dmg: percent(skillParam_gen.passive2[0][0])\r\n  },\r\n  c1: {\r\n    sealStaminaRed_: skillParam_gen.constellation1[0]\r\n  },\r\n  c2: {\r\n    hpThresh: skillParam_gen.constellation2[0],\r\n    charged_critRate_: skillParam_gen.constellation2[1]\r\n  },\r\n  c4: {\r\n    hpShield_: skillParam_gen.constellation4[0],\r\n    duration: 15,\r\n  },\r\n  c6: {\r\n    extraSeals: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_charged_dmg_ = equal(condAfterBurst, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.charged_dmg_)\r\n)\r\n\r\nconst [condP1SealsPath, condP1Seals] = cond(key, \"p1Seals\")\r\nconst p1_pyro_dmg_ = greaterEq(input.asc, 1,\r\n  // TODO: Should be changing number of seals shown based on C6\r\n  lookup(condP1Seals, Object.fromEntries(range(1, 4).map(seals => [\r\n    seals,\r\n    prod(seals, datamine.passive1.seal_pyro_dmg_)\r\n  ])), naught)\r\n)\r\n\r\nconst [condP2ChargedCritPath, condP2ChargedCrit] = cond(key, \"p2ChargedCrit\")\r\n\r\nconst [condC2EnemyHpPath, condC2EnemyHp] = cond(key, \"c2EnemyHp\")\r\nconst c2EnemyHp_critRate_ = greaterEq(input.constellation, 2,\r\n  equal(condC2EnemyHp, \"on\", datamine.c2.charged_critRate_)\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: Object.fromEntries(datamine.charged.dmgArr.map((arr, i) =>\r\n    [i, i < 4\r\n      ? dmgNode(\"atk\", arr, \"charged\")\r\n      : greaterEq(input.constellation, 6, dmgNode(\"atk\", arr, \"charged\"))\r\n    ])),\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, equal(condP2ChargedCrit, \"on\",\r\n      customDmgNode(prod(input.total.atk, datamine.passive2.dmg), \"charged\")\r\n    ))\r\n  },\r\n  constellation4: {\r\n    pyro_shield: greaterEq(input.constellation, 4,\r\n      shieldElement(elementKey, customShieldNode(prod(input.total.hp, datamine.c4.hpShield_)))\r\n    ),\r\n    norm_shield: greaterEq(input.constellation, 4,\r\n      customShieldNode(prod(input.total.hp, datamine.c4.hpShield_))\r\n    ),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: afterBurst_charged_dmg_,\r\n    charged_critRate_: c2EnemyHp_critRate_,\r\n    pyro_dmg_: p1_pyro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [\r\n          // TODO: Would probably be better as a conditional,\r\n          // but can't make conditional states based on constellation value\r\n          ...datamine.charged.dmgArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.charged[i], { key: `char_${key}:charged.${i}` }),\r\n          })), {\r\n            text: tr(\"auto.skillParams.4\"),\r\n            // TODO: Should change this value based on how many seals, but can't do without conditional\r\n            // charged attack. And its a bit execssive.\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            text: st(\"staminaDec_\"),\r\n            value: datamine.charged.sealStaminaRed_ * 100,\r\n            textSuffix: trm(\"perSeal\"),\r\n            unit: \"%\",\r\n          }, {\r\n            text: trm(\"maxSeals\"),\r\n            value: data => data.get(input.constellation).value >= 6\r\n              ? datamine.charged.maxSeals + datamine.c6.extraSeals\r\n              : datamine.charged.maxSeals,\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.sealDuration,\r\n            unit: \"s\"\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      },\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1Seals,\r\n          path: condP1SealsPath,\r\n          name: trm(\"passive1.sealsConsumed\"),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          // TODO: Should be changing number of seals shown based on C6\r\n          states: Object.fromEntries(range(1, 4).map(seals => [\r\n            seals, {\r\n              name: trm(`seals.${seals}`),\r\n              fields: [{\r\n                node: p1_pyro_dmg_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          ]))\r\n        }),\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condP2ChargedCrit,\r\n          path: condP2ChargedCritPath,\r\n          name: trm(\"passive2.chargedCrit\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2.key` })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"c1.sealChargedStam_\"),\r\n          value: datamine.c1.sealStaminaRed_ * -100,\r\n          textSuffix: trm(\"perSeal\"),\r\n          unit: \"%\"\r\n        }, {\r\n          text: st(\"incInterRes\")\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2EnemyHp,\r\n          path: condC2EnemyHpPath,\r\n          name: st(\"enemyLessPercentHP\", { percent: datamine.c2.hpThresh * 100 }),\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c2EnemyHp_critRate_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          text: trm(\"c6.maxSealInc\"),\r\n          value: datamine.c6.extraSeals\r\n        }], undefined, data => data.get(input.constellation).value >= 6, false, true), {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: trm(\"burst.grantMax\")\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.sealInterval,\r\n              unit: \"s\"\r\n            }, {\r\n              node: afterBurst_charged_dmg_\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"constellation4\", tr, c4, [{\r\n          node: infoMut(dmgFormulas.constellation4.norm_shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.pyro_shield, { key: `sheet:dmgAbsorption.${elementKey}` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.c4.duration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.constellation).value >= 4, false, true)\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, percent, prod, subscript, sum, unequal, unit } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/IFieldDisplay'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\nconst [tr, charTr] = trans(\"char\", characterKey)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], //x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3], //x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: skillParam_gen.skill[1][0],\r\n    cd: skillParam_gen.skill[2][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0]\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condBurstPath, condBurst] = cond(characterKey, \"burst\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = matchFull(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_, { key: \"_\" }), unit)\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = greaterEq(input.asc, 1, equal(condSkill, \"skill\", infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })))\r\nconst atk_ = greaterEq(input.asc, 4, equal(condBurst, \"on\", unequal(input.activeCharKey, characterKey,\r\n  sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst canShowC6 = data => data.get(input.constellation).value >= 6 && data.get(condSkill).value === 'skill'\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) => [\r\n  i,\r\n  customDmgNode(\r\n    prod(subscript(input.total.autoIndex, arr, { key: \"_\" }), input.total.atk, normal_dmgMult),\r\n    \"normal\", {\r\n      hit: {\r\n        ele: matchFull(condSkill, \"skill\", constant(elementKey), constant(\"physical\"))\r\n      }\r\n    }\r\n  )\r\n])\r\n\r\n// This might just need to be a single dmgNode of her kindling arrow, with proper scaling applied.\r\nconst kindlingEntries = normalEntries.map(([_, node], i) => [i, greaterEq(input.constellation, 6, equal(condSkill, \"skill\", prod(percent(datamine.constellation6.dmg_), node)))])\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto , [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(`auto.fields.plunging`),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }], {\r\n        name: st(\"afterUse.skill\"),\r\n        path: condSkillPath,\r\n        value: condSkill,\r\n        states: {\r\n          skill: {\r\n            fields: [{\r\n              text: charTr(\"normMult\"),\r\n              value: data => data.get(normal_dmgMult).value * 100,\r\n              fixed: 1,\r\n              unit: \"%\",\r\n            }, {\r\n              text: charTr(\"normPyroInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          // Conditional for self display\r\n          canShow: greaterEq(input.asc, 1, equal(condSkill, \"skill\", 1)),\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: tr(\"passive1.name\"),\r\n          states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n            [i, {\r\n              name: `${i} stack`,\r\n              fields: [{\r\n                node: pyro_dmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }]\r\n          ))\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6,\r\n        datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n          canShow: canShowC6,\r\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        })),\r\n        undefined, data => data.get(input.constellation).value >= 6 && data.get(condSkill).value === \"skill\",\r\n        false, true)\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: 60,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation1.burst_durationInc,\r\n          unit: \"s\"\r\n        }], {\r\n          canShow: greaterEq(input.constellation, 1, 1),\r\n          name: charTr(\"c1\"),\r\n          value: condC1,\r\n          path: condC1Path,\r\n          states: {\r\n            c1: {\r\n              fields: [{\r\n                node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation1.duration,\r\n                unit: 's'\r\n              }]\r\n            }\r\n          }\r\n        }, data => data.get(input.constellation).value >= 1, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        teamBuff: true,\r\n        // Hide for Yoimiya\r\n        canShow: greaterEq(input.asc, 4, unequal(input.activeCharKey, characterKey, 1)),\r\n        path: condBurstPath,\r\n        value: condBurst,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        // Conditional from P1 for team buff display when P2 is activated\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          canShow: unequal(input.activeCharKey, characterKey, greaterEq(input.asc, 4, equal(condBurst, \"on\", 1))),\r\n          teamBuff: true,\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: tr(\"passive1.name\"),\r\n          states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n            [i, {\r\n              name: `${i} stack`,\r\n              fields: [{\r\n                node: pyro_dmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }]\r\n          ))\r\n        })\r\n      ]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: charTr(\"c2\"),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: const3TalentInc }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: const5TalentInc }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6,\r\n      )\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, dataObj);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"def\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"def\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n            textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd * (1 - 0.18)).toFixed(2)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          },]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n      }, {\r\n        text: trm(\"skill.maxStele\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.shileDuration,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        teamBuff: true,\r\n        name: trm(\"skill.nearShield\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesSkill).map(node => ({ node }))\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data =>\r\n          data.get(input.constellation).value < 4 ?\r\n            datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n            `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n        fixed: 1,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condP1,\r\n        path: condP1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"p1cond\"),\r\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: p4normalDmgInc\r\n      }, {\r\n        node: p4ChargedDmgInc\r\n      }, {\r\n        node: p4PlungingDmgInc\r\n      }, {\r\n        node: p4SKillDmgInc\r\n      }, {\r\n        node: p4BurstDmgInc\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{\r\n        node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal`, variant: \"success\" })\r\n      }]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\nimport Albedo from './Albedo'\r\nimport Aloy from './Aloy'\r\nimport Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\nimport Barbara from './Barbara'\r\nimport Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\nimport Chongyun from './Chongyun'\r\nimport Diluc from './Diluc'\r\nimport Diona from './Diona'\r\nimport Eula from './Eula'\r\nimport Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\nimport Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\nimport Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\nimport Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport KamisatoAyato from './KamisatoAyato'\r\nimport Keqing from './Keqing'\r\nimport Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\nimport Lisa from './Lisa'\r\nimport Mona from './Mona'\r\nimport Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\nimport Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\nimport Razor from './Razor'\r\nimport Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\nimport Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\nimport Tartaglia from './Tartaglia'\r\nimport Thoma from './Thoma'\r\nimport Traveler from './Traveler'\r\nimport Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\nimport Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\nimport Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\nimport Yanfei from './Yanfei'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  Albedo,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Chongyun,\r\n  Diluc,\r\n  Diona,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  KamisatoAyato,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Traveler,\r\n  Venti,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import { transformativeReactions } from \"../KeyMap/StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, percent, prod, subscript, sum, unit } from \"./utils\";\r\n\r\n// https://github.com/Dimbreath/GenshinData/blob/72c9112a7c5e8e5014f61009a1a2764e266aeab7/ExcelBinOutput/ElementCoeffExcelConfigData.json\r\n//   or if the permalink is dead,\r\n// https://github.com/Dimbreath/GenshinData/blob/master/ExcelBinOutput/ElementCoeffExcelConfigData.json\r\n//\r\n// PlayerElementLevelCo\r\nexport const transformativeReactionLevelMultipliers = [-1.0, // lvl 0\r\n  17.165606, 18.535048, 19.904854, 21.274902, 22.6454, 24.649612, 26.640642, 28.868587, 31.36768, 34.143345, 37.201, 40.66, 44.446667, 48.56352, 53.74848, 59.081898, 64.420044, 69.72446, 75.12314, 80.58478, 86.11203, 91.70374, 97.24463, 102.812645, 108.40956, 113.20169, 118.102905, 122.97932, 129.72733, 136.29291, 142.67085, 149.02902, 155.41699, 161.8255, 169.10631, 176.51808, 184.07274, 191.70952, 199.55692, 207.38205, 215.3989, 224.16566, 233.50217, 243.35057, 256.06308, 268.5435, 281.52606, 295.01364, 309.0672, 323.6016, 336.75754, 350.5303, 364.4827, 378.61917, 398.6004, 416.39825, 434.387, 452.95105, 472.60623, 492.8849, 513.56854, 539.1032, 565.51056, 592.53876, 624.4434, 651.47015, 679.4968, 707.79407, 736.67145, 765.64026, 794.7734, 824.67737, 851.1578, 877.74207, 914.2291, 946.74677, 979.4114, 1011.223, 1044.7917, 1077.4437, 1109.9976, 1142.9766, 1176.3695, 1210.1844, 1253.8357, 1288.9528, 1325.4841, 1363.4569, 1405.0974, 1446.8535]\r\n// PlayerShieldLevelCo\r\nexport const crystallizeLevelMultipliers = [-1.0, // lvl 0\r\n  91.1791, 98.707664, 106.23622, 113.76477, 121.29332, 128.82188, 136.35042, 143.87898, 151.40752, 158.93608, 169.99149, 181.07625, 192.19037, 204.0482, 215.939, 227.86275, 247.68594, 267.5421, 287.4312, 303.82642, 320.22522, 336.62762, 352.31927, 368.01093, 383.70255, 394.43237, 405.18146, 415.94992, 426.73764, 437.5447, 450.6, 463.7003, 476.84558, 491.1275, 502.55457, 514.0121, 531.4096, 549.9796, 568.5849, 584.9965, 605.67035, 626.3862, 646.0523, 665.7556, 685.4961, 700.8394, 723.3331, 745.8653, 768.4357, 786.79193, 809.5388, 832.32904, 855.16266, 878.0396, 899.4848, 919.362, 946.0396, 974.7642, 1003.5786, 1030.077, 1056.635, 1085.2463, 1113.9244, 1149.2587, 1178.0648, 1200.2238, 1227.6603, 1257.243, 1284.9174, 1314.7529, 1342.6652, 1372.7524, 1396.321, 1427.3124, 1458.3745, 1482.3358, 1511.9109, 1541.5493, 1569.1537, 1596.8143, 1622.4197, 1648.074, 1666.3761, 1684.6782, 1702.9803, 1726.1047, 1754.6715, 1785.8666, 1817.1375, 1851.0603]\r\n\r\n\r\nconst asConst = true as const\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(sum(unit, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n"],"names":["charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","key","input","infusionNode","stringPrio","inferredHitEle","lookup","undefined","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","base","additional","data","mergeData","hit","constant","ele","customShieldNode","shieldNode","prod","sum","unit","customHealNode","healNode","dmgNode","lvlMultiplier","talentType","subscript","percent","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","infoMut","variant","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","data_gen","data_gen_src","trans","tr","trm","auto","normalSrc","a","s","b","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skill","skillDmg","blossomDmg","duration","cd","blossomCd","burst","burstDmg","blossomAmt","enerCost","passive1","blossomDmgInc","hpThresh","passive2","eleMasInc","constellation1","blossomEner","constellation2","maxStacks","stackDuration","constellation4","plunging_dmg_","constellation6","bonus_dmg_","cond","condBurstBlossomPath","condBurstBlossom","condBurstUsedPath","condBurstUsed","p2Burst_eleMas","equal","greaterEq","condP1EnemyHpPath","condP1EnemyHp","p1_blossom_dmg_","condC2StacksPath","condC2Stacks","c2_burst_dmgInc","fromEntries","range","i","naught","condSkillInFieldPath","condSkillInField","c4_plunging_dmg_disp","c4_plunging_dmg_","target","condC6CrystallizePath","condC6Crystallize","c6_Crystal_all_dmg_disp","c6_Crystal_all_dmg_","dmgFormulas","arr","entries","blossom","total","skill_dmg_","skillC3","burstC5","bonus","eleMas","all_dmg_","burst_dmgInc","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","talentTemplate","sectionTemplate","_","node","text","textSuffix","sgt","path","st","canShow","states","belowHp","fields","c1","fixed","get","c4","skillInField","c6","c6Crystallize","isoOnField","count","burstUsed","c2","passive3","constellation3","c3","constellation5","c5","CharacterSheet","p1","p2","aimed","aimedCharged","freezeBombDmg","chillWaterBomblets","atkDecrease","atkDecreaseDuration","coilNormalDmgBonus1","coilNormalDmgBonus2","coilNormalDmgBonus3","rushingNormalDmgBonus","rushingDuration","atkInc","teamAtkInc","cryoDmgBonus","condCoilPath","condCoil","normal_dmg_","atk_","unequal","condA1Path","condA1","teamAtk_","condA4Path","condA4","cryo_dmg_","matchFull","toFixed","inheritedHp","unknown","dmgPerWave","rainDmg","critRateInc","aoeInc","secArrowDmg","manualDetionationDmg","moveSpdInc","burst_critRate_","condC6Path","condC6","moveSPD_","secondAimed","secondAimedCharged","manualDetonationDmg","nodeC3","nodeC5","on","sSlash","akSlash","akFinal","stam","ss","hp","ss_cd","atkSpd","defConv","resDec","cost","atkSPD_","def_","initialStacks","timedStacks","burstCdRed","energyRegen","charged_critDMG_","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","nodeBurstAtk","nodeBurstAtkSpd","allNodeBurstRes","allElementsWithPhy","nodeBurstInfusion","equalStr","nodeA4Bonus","nodeP1AtkSpd","nodeC2BurstRed","min","nodeC2EnergyRegen","nodeC4Atk","nodeC4Def","nodeC6CritDMG","charged_dmgInc","atk","infusion","nonOverridableSelf","cregen_hp_","cregen_hp","regen_hp_","regen_hp","hp_","ext","maxExt","cdDec","hydro_dmg_","condSkillPath","condSkill","nodeA1","nodeA1Display","condC2Path","condC2","nodeC2","nodeC2Display","regen","cregen","staminaDec_","spinningDmg","finalDmg","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","electroResShred_","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","electroShield","shield","baseDmg","dmgOneHit","dmgTwoHits","customBonus","charged_dmg_","electro_enemyRes_","img","sections","header","conditionalHeader","description","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","a1SkillCd","c1Atk","atkIncRatio","condInAreaPath","condInArea","activeInArea","c1AddlAtk","activeInAreaAtkDisp","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","pyro_dmg_","team","enerRech_","calculateSkillCD","skillCD","cdFactor","spin_dmg","final_dmg","infusionDuration","fieldDuration","atk_spd","res","cdr","energy_regen","burst_dmg_","condAsc4Path","condAsc4","nodeAsc4","nodeAsc1Disp","nodeAsc1","correctWep","activeInAreaInfusion","nodeC6","cryo_enemyRes_","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","explosionDmg","stamReduction","durationInc","pyroInc","dmgInc","hpThresh_","atkSpdInc","maxStack","condC1Path","condC1","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","thirdHit","secondHitBoost","thirdHitBoost","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","condC6BelowPath","condC6Below","condC6AbovePath","condC6Above","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressCryoShield","pressShield","holdCryoShield","holdShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_Disp","nodeC6healing_","nodeC6emDisp","nodeC6em","incHeal_","conditional","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","physical_enemyRes_","lightSwordAdditional","lightFallSwordNew","shatteredLightfallSword","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","frostflake","frostflakeBloom","opCryoRes","enerRegen","cryo_dmg_disp","critRate_","fully","defInc","geo_dmg_","dmg_def","crystalDmg_def","crystalHits","skill_dmgInc","heal_def_","geo_critDMG_","condInFieldPath","condInField","skill1_defDisp","skill1_def","skill3_geo_dmg_Disp","skill3_geo_dmg_","condAfterBurstPath","condAfterBurst","afterBurst_def_","p2_skill_dmgInc","p2_burst_dmgInc","condAfterSkillBurstPath","condAfterSkillBurst","c6_geo_critDMG_","crystalCollapse","heal","def","inField","afterBurst","afterSkillBurst","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","critRateTeam_1","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","color","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_disp","dmgRed_","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMasDisp","c2PEleMas","c6infusion","greaterEqStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","staminaSprintDec_","overridableSelf","fieldsHeader","eleKey","c2p","swirl","healAtk_","cooldown","cryoShield","condC1Cryo","nodeC1NormalCritRate","nodeC1ChargeCritRate","normal_critRate_","charged_critRate_","sp","cutDmg","bloomDmg","sprint","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","cutting","bloom","enemyDefRed_","afterSkill","afterSprint","afterApplySprint","dmgArr","stateDuration","stackHpDmgInc","illusionDmg","illusionDuration","stacksGained","enerThres_","energyRestore","oppHpThres_","shunDmg_","extraStacks","stackThresh","atkSPD","extraStrikes","condInSkillPath","condInSkill","condSkillStacksPath","condSkillStacks","skillStacks_dmgInc","stacks","condBurstInAreaPath","condBurstInArea","burst_normal_dmg_Disp","burst_normal_dmg_","condC1OppHpPath","condC1OppHp","c1Shun_dmg_","c2_hp_","condC4AfterBurstPath","condC4AfterBurst","c4_atkSPD_","shunAddl","normal_dmgInc","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","jumptyDumptyDmg1","jumptyDumptyDmg2","jumptyDumptyDmg3","mineDmg","mineDuration","dmg_","jumptyDumptyDmg","chainedReactionsDmg","sparklyExplosionDmg","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","skillTenguAmbush_disp","skillTenguAmbush_","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","stack0","stack1","stack2","stack3","holdCD","pressCD","tick","defShred","nodeA4DefShred","nodeC2DefIncrease","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodeC4CryoResBonus_","nodeC4GeoResBonus_","nodeC4PyroResBonus_","nodeC4AnemoResBonus_","nodeC4HydroResBonus_","nodeC4ElecResBonus_","gemDmg","geo_res_","cryo_res_","pyro_res_","anemo_res_","hydro_res_","electro_res_","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC2ChargeDec","nodeC4dmg","devotionShield","staminaChargedDec_","hitRegenPercent","hitRegenFlat","contRegenPercent","contRegenFlat","tickDmg","castDmg","healPercent","nodeA1HealingBonus","nodeC2ChargedDmgInc","nodeC2NormalDmgInc","hitRegen","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","burstResolve","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","erBonus","companionDmg","atkSpdBonus","electroResBonus","cdRed","enerThreshold","erInc","sprintStaminaDec","allDmgInc","defDec","electroSigilGenerated","condElectroSigilPath","condElectroSigil","condTheWolfWithinPath","condTheWolfWithin","enerRechElectroSigil_","enerRechA4_","companionDmg1","companionDmg2","companionDmg3","companionDmg4","fullBurstDmg1","fullBurstDmg2","fullBurstDmg3","fullBurstDmg4","c1i","crInc","crBonus","maxBonus","physShred","nodeA1CritInc","nodeA4CritBonusDisp","nodeA4CritBonus","nodeC1AtkSpd","nodeC1NormalInc","nodeC6PhysShred","isTeamBuff","heal_","nBonus_","cBonus_","sBonus_","p","heal_ratio_","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c4AtkSpd_","c6Hydro_","spin","wheelDmg","eleWheelDmg","kickPressDmg","kickHoldDmg","eleKickDmg","cdMin","cdMax","pressDmg","pressBaseHeal","pressAtkHeal","darumaDmg","darumaBaseHeal","darumaAtkHeal","darumaHits","baseHeal","emHeal","nearHeal","ener","darumaDmgInc","darumaHealInc","condActiveSwirlPath","condActiveSwirl","condC2SkillStackPath","condC2SkillStack","c2_kickPressDmg_","c2_kickDmg_","stack","c6_daruma_dmg_inc","c6_daruma_heal_inc","darumaHeal","pressHeal","extraHeal","burstC3","skillC5","activeSwirl","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2Disp","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","field","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Disp","asc1","asc4Disp","c6Base","c6Bonus","riptide","flashDmg","riptideDuration","stanceDmg","normal1","normal2","normal3","normal4","normal5","normal61","normal62","riptideSlash","chargedStamina","preemptiveCd1","preemptiveCd2","maxCd","meleeDmg","riptideBlastDmg","rangedDmg","enerReturned","durationExt","auto_boost","nodePassive","hpShield_","baseShield","maxHpShield_","maxBaseShield","collapseDmg","scorchingDuration","shield_","collapse_dmgInc","burstDuration","auto_dmg","condP1BarrierStacksPath","condP1BarrierStacks","p1_shield_","p2Collapse_dmgInc","condC6AfterBarrierPath","condC6AfterBarrier","c6_normal_dmg_","c6_charged_dmg_","c6_plunging_dmg_","minShield","minPyroShield","maxShield","maxPyroShield","pyroShield","strKey","Translate","ns","key18","initial_dmg","initial_max","storm_dmg","storm_max","absorbDmg","nodesC6","objectKeyValueMap","absorb","talentSheet","numShockwaves","skill_cdRed","geoDmg","maxTriggers","skillDuration","condC1BurstAreaPath","condC1BurstArea","c1BurstArea_critRate_Disp","c1BurstArea_critRate_","condC4BurstHitPath","condC4BurstHit","c4Burst_energyRestore","amulets","amuletDuration","enerRech_duration","thunderDmg","thunderCd","addlAmulets","electro_enemyRes","numAttacks","thunder_dmg_","condSkillAmuletPath","condSkillAmulet","p2_enerRech_","skillAmulet_enerRech_Disp","skillAmulet_enerRech_","burstEnergyRestore","condC2ThunderPath","condC2Thunder","c2Thunder_electro_enemyRes_","condC6After2ThunderPath","condC6After2Thunder","c6_thunder_dmg_","talents","anemo","geo","electro","anemoData","geoData","electroData","holdDmg","baseTicks","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","full7","full14","staminaGlidingDec_","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","antiC6","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","press2","healing","shieldArr","defShield_","lvl3Dmg","pressPhysDmg","dotPyroDmg","burstphysical_critRate_","charged_atkBonus","condSkillHitNumPath","condSkillHitNum","condP2ShieldPath","condP2Shield","p2Shield_physical_dmg_Disp","p2Shield_physical_dmg_","condC1CritPath","condC1Crit","c1Crit_atkSPD_","c2BurstPhysical_critRate_","condC4SkillHitPath","condC4SkillHit","c4SkillHit_physical_enemyRes_","c6_staminaChargedDec_","condC6ChargedPath","condC6Charged","c6_chargedAtkBonus","lvl","flatMap","type","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","sealStaminaRed_","maxSeals","sealDuration","sealInterval","seal_pyro_dmg_","extraSeals","afterBurst_charged_dmg_","condP1SealsPath","condP1Seals","p1_pyro_dmg_","seals","condP2ChargedCritPath","condP2ChargedCrit","condC2EnemyHpPath","condC2EnemyHp","c2EnemyHp_critRate_","pyro_shield","norm_shield","characterKey","charTr","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","const3TalentInc","const5TalentInc","normal_dmgMult","a1Stacks","c1atk_","c2pyro_dmg_","canShowC6","normalEntries","kindlingEntries","dataObj","includes","uiData","triggerNum","normalInc","allElements","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","Albedo","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Chongyun","Diluc","Diona","Eula","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Keqing","Klee","KujouSara","Lisa","Mona","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","Sucrose","Tartaglia","Thoma","Traveler","Venti","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yoimiya","YunJin","Zhongli","customStringRead","subKey","typeKey","crystallizeMulti1","crystallizeElemas","frac","crystallizeHit","transMulti1","transMulti2","transformativeReactions","multi","variants","electroSwirl","pyroSwirl","pyro","cryoSwirl","hydroSwirl","hydro","shattered","crystallize","overloaded","electrocharged","superconduct"],"sourceRoot":""}