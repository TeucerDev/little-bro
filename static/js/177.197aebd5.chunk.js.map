{"version":3,"file":"static/js/177.197aebd5.chunk.js","mappings":"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","sources":["Formula/reaction.ts","Data/Characters/dataUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/ForestRegalia/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/MakhairaAquamarine/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/KagotsurubeIsshin/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HaranGeppakuFutsu/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/KeyOfKhajNisut/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SapwoodBlade/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/XiphosMoonlight/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/MissiveWindspear/index.tsx","Data/Weapons/Polearm/Moonpiercer/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/StaffOfTheScarletSands/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/AquaSimulacra/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FadingTwilight/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/HuntersPath/index.tsx","Data/Weapons/Bow/KingsSquire/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/EndOfTheLine/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/AThousandFloatingDreams/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/FruitOfFulfillment/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WanderingEvenstar/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../KeyMap/StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { infusionNode, input } from \"./index\";\r\nimport { constant, data, equal, frac, infoMut, lookup, naught, one, percent, prod, subscript, sum } from \"./utils\";\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers, { key: \"crystallize_level_multi\" })\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(\r\n  infoMut(sum(one, /** + Crystallize bonus */ crystallizeElemas), { pivot: true, key: \"base_crystallize_multi\" }),\r\n  crystallizeMulti1),\r\n  { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers, { key: \"transformative_level_multi\" })\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap(Object.keys(transformativeReactions), reaction => {\r\n    const { multi, resist } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      prod(constant(multi, { key: `${reaction}_multi` }), transMulti1),\r\n      sum(\r\n        infoMut(sum(one, transMulti2), { pivot: true, key: \"base_transformative_multi\" }),\r\n        input.total[`${reaction}_dmg_`]\r\n      ),\r\n      sum(one, lookup(constant(reaction), {\r\n        burning: input.total.burningBloomCritFactor_,\r\n        bloom: input.total.burningBloomCritFactor_,\r\n        hyperbloom: input.total.burningBloomCritFactor_,\r\n        burgeon: input.total.burningBloomCritFactor_\r\n      }, naught)),\r\n      input.enemy[`${resist}_resMulti`]\r\n    ), { key: `${reaction}_hit` })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => {\r\n    const base = prod(\r\n      prod(constant(transformativeReactions.swirl.multi, { key: \"swirl_multi\" }), transMulti1),\r\n      sum(infoMut(sum(one, transMulti2), { pivot: true, key: \"base_transformative_multi\" }), input.total.swirl_dmg_)\r\n    )\r\n    const res = input.enemy[`${ele}_resMulti`]\r\n    return infoMut(\r\n      // CAUTION:\r\n      // Add amp multiplier/additive term only to swirls that have amp/additive reactions.\r\n      // It is wasteful to add them indiscriminately, but this means\r\n      // that we need to audit and add appropriate elements here\r\n      // should amp/additive reactions be added to more swirls.\r\n      [\"pyro\", \"hydro\", \"cryo\", \"electro\"].includes(ele)\r\n        ? (ele === \"electro\"\r\n          // Additive reactions apply the additive term before resistance, but after swirl bonuses\r\n          ? data(prod(sum(base, input.hit.addTerm), res), { hit: { ele: constant(ele) } })\r\n          // Amp reaction\r\n          : data(prod(base, res, input.hit.ampMulti), { hit: { ele: constant(ele) } }))\r\n        : prod(base, res),\r\n      { key: `${ele}_swirl_hit` })\r\n  })\r\n}\r\nconst infusionReactions = {\r\n  overloaded: equal(infusionNode, \"pyro\", trans.overloaded, { key: \"overloaded_hit\" }),\r\n  electrocharged: equal(infusionNode, \"hydro\", trans.electrocharged, { key: \"electrocharged_hit\" }),\r\n  superconduct: equal(infusionNode, \"cryo\", trans.superconduct, { key: \"superconduct_hit\" }),\r\n  burning: equal(infusionNode, \"pyro\", trans.burning, { key: \"burning_hit\" }),\r\n  bloom: equal(infusionNode, \"hydro\", trans.bloom, { key: \"bloom_hit\" }),\r\n  burgeon: equal(infusionNode, \"pyro\", trans.burgeon, { key: \"burgeon_hit\" }),\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    bloom: trans.bloom,\r\n    burgeon: trans.burgeon,\r\n    hyperbloom: trans.hyperbloom,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    hyperbloom: trans.hyperbloom,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n    bloom: trans.bloom,\r\n    overloaded: infusionReactions.overloaded,\r\n    superconduct: infusionReactions.superconduct,\r\n    burning: infusionReactions.burning,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    burgeon: trans.burgeon,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    bloom: infusionReactions.bloom,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  dendro: {\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    bloom: trans.bloom,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    burgeon: infusionReactions.burgeon,\r\n  }\r\n}\r\n","import { SubstatKey } from \"pipeline\";\r\nimport { infusionNode, input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, lookup, one, percent, prod, stringPrio, subscript, sum } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\n\r\nconst inferredHitEle = stringPrio(\r\n  lookup(input.hit.move, {\r\n    \"skill\": input.charEle, \"burst\": input.charEle,\r\n  }, undefined),\r\n  lookup(input.weaponType, {\r\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\r\n    bow: lookup(input.hit.move, {\r\n      \"normal\": input.infusion.nonOverridableSelf\r\n    }, \"physical\"),\r\n    catalyst: input.charEle,\r\n  }, undefined),\r\n  \"physical\"\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(one, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healInc = input.total.healInc\r\n  const healNode = prod(sum(base, healInc), sum(one, input.total.heal_, input.total.incHeal_))\r\n\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  layeredAssignment(data, [\"teamBuff\", \"tally\", \"maxEleMas\"], input.premod.eleMas)\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Akuoumaru\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffSlasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DebateClub\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FerrousShadow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\r\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\r\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\r\n    // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_,\r\n        }, {\r\n          text: trm(\"resistance\")\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ForestRegalia\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 75, 90, 105, 120]\r\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\r\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(eleMas_disp, { key: \"ele_mas\" }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: skill_dmg_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LuxuriousSeaLord\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\r\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\r\nconst dmg = equal(input.weapon.key, key, equal(condPassive, 'on',\r\n  customDmgNode(prod(\r\n    subscript(\r\n      input.weapon.refineIndex, dmg_Src, { key: \"_\" }),\r\n      input.total.atk\r\n    ),\r\n    \"elemental\",\r\n    { hit: { ele: constant(\"physical\") }\r\n})))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }],\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st('hitOp.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","\r\nimport { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MakhairaAquamarine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst atk_arr = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atkSelf = equal(input.weapon.key, key, equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, atk_arr, { key: \"_\" }),\r\n    input.premod.eleMas\r\n  )\r\n))\r\nconst atkTeamDisp = equal(input.weapon.key, key, prod(percent(0.3), atkSelf))\r\nconst atkTeam = unequal(input.activeCharKey, input.charKey, atkTeamDisp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk: atkSelf\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      atk: atkTeam\r\n    }\r\n  }\r\n}, {\r\n  atkSelf,\r\n  atkTeamDisp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    path: condPassivePath,\r\n    value: condPassive,\r\n    teamBuff: true,\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkSelf\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }],\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(atkTeamDisp, { key: \"atk\", isTeamBuff: true }),\r\n    }, {\r\n        text: sgt(\"duration\"),\r\n        value: 12,\r\n        unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OldMercsPal\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeArchaic\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { key: \"sheet:dmg\" }) }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rainslasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RedhornStonethresher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { key: \"_\" }), input.premod.def))\r\nconst charged_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { key: \"_\" }), input.premod.def))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    def_,\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n  }\r\n}, {\r\n  normal_dmgInc,\r\n  charged_dmgInc,\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: def_\r\n    }, {\r\n      node: normal_dmgInc\r\n    }, {\r\n      node: charged_dmgInc\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"opponentsDamaged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SerpentSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { key: \"_\" })\r\nconst all_dmg_stack = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: all_dmg_stack\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: {\r\n      ...objectKeyMap(range(1, 5), i => ({\r\n        name: st(\"seconds\", { count: i * 4 }),\r\n        fields: [{\r\n          node: all_dmg_stack\r\n        }, {\r\n          text: trm(\"takeMoreDmg\"),\r\n          value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\r\n          unit: \"%\"\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardPride\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: all_dmg_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SnowTombedStarsilver\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SongOfBrokenPines\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { key: \"_\" })\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n      atkSPD_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customShieldNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBell\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\r\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\r\nconst shield = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { key: \"_\" }), input.total.hp))))\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst all_dmg_ = equal(condWithShield, \"protected\", subscript(input.weapon.refineIndex, allDmgSrc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n}, {\r\n  shield\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"takeDmg\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(shield, { key: `sheet_gen:dmgAbsorption` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 45,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheUnforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"WasterGreatsword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Whiteblind\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteIronGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\r\nconst heal = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.total.hp))))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('afterDefeatEnemy'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\" })\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WolfsGravestone\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"enemyLessPercentHP\", { percent: 30 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport Akuoumaru from \"./Akuoumaru\"\r\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\r\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\r\nimport DebateClub from \"./DebateClub\"\r\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\r\nimport FerrousShadow from \"./FerrousShadow\"\r\nimport ForestRegalia from \"./ForestRegalia\"\r\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\r\nimport LithicBlade from \"./LithicBlade\"\r\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\r\nimport MakhairaAquamarine from \"./MakhairaAquamarine\"\r\nimport OldMercsPal from \"./OldMercsPal\"\r\nimport PrototypeArchaic from \"./PrototypeArchaic\"\r\nimport Rainslasher from \"./Rainslasher\"\r\nimport RedhornStonethresher from \"./RedhornStonethresher\"\r\nimport RoyalGreatsword from \"./RoyalGreatsword\"\r\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\r\nimport SerpentSpine from \"./SerpentSpine\"\r\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\r\nimport SkywardPride from \"./SkywardPride\"\r\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\r\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\r\nimport TheBell from \"./TheBell\"\r\nimport TheUnforged from \"./TheUnforged\"\r\nimport WasterGreatsword from \"./WasterGreatsword\"\r\nimport Whiteblind from \"./Whiteblind\"\r\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\r\nimport WolfsGravestone from \"./WolfsGravestone\"\r\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\r\n  Akuoumaru,\r\n  BlackcliffSlasher,\r\n  BloodtaintedGreatsword,\r\n  DebateClub,\r\n  FavoniusGreatsword,\r\n  FerrousShadow,\r\n  ForestRegalia,\r\n  KatsuragikiriNagamasa,\r\n  LithicBlade,\r\n  LuxuriousSeaLord,\r\n  MakhairaAquamarine,\r\n  OldMercsPal,\r\n  PrototypeArchaic,\r\n  Rainslasher,\r\n  RedhornStonethresher,\r\n  RoyalGreatsword,\r\n  SacrificialGreatsword,\r\n  SerpentSpine,\r\n  SkyriderGreatsword,\r\n  SkywardPride,\r\n  SnowTombedStarsilver,\r\n  SongOfBrokenPines,\r\n  TheBell,\r\n  TheUnforged,\r\n  WasterGreatsword,\r\n  Whiteblind,\r\n  WhiteIronGreatsword,\r\n  WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmenomaKageuchi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquilaFavonia\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\r\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\r\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\r\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\r\nconst heal = equal(input.weapon.key, key, equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.premod.atk)))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n  },\r\n}, {\r\n  heal, dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('takeDmg'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"heal\" })\r\n        }, {\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CinnabarSpindle\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\r\nconst skill_dmgInc = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { key: \"_\" }), input.premod.def)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { // TODO: should be total\r\n    skill_dmgInc\r\n  }\r\n}, {\r\n  skill_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmgInc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CoolSteel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagotsurubeIsshin\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_ = equal(condPassive, \"on\", percent(0.15)) // No refinement data\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customDmgNode(prod(percent(1.8), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"hitOp.normalChargedOrPlunging\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DarkIronSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.electro\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FesteringDesire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { key: '_' })\r\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { key: '_' })\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    skill_critRate_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_\r\n    }, {\r\n      node: skill_critRate_\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FilletBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\r\nconst cd_Src = [15, 14, 13, 12, 11]\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\r\n      unit: \"s\"\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: dmg_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"sigilsConsumed\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: normal_dmg_\r\n        }, {\r\n          node: charged_dmg_\r\n        }, {\r\n          node: plunging_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HaranGeppakuFutsu\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stack_normal_dmg_ = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPath, condNode] = cond(key, \"HonedFlow\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst normal_dmg_ = lookup(condNode,\r\n  objectKeyMap(range(1, 2), i => prod(i, subscript(input.weapon.refineIndex, stack_normal_dmg_)))\r\n  , naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...passive_dmg_,\r\n    normal_dmg_,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [ // Passive\r\n      ...allElements.map((ele) => {\r\n        return { node: passive_dmg_[`${ele}_dmg_`] }\r\n      })\r\n    ],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"consumed\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HarbingerOfDawn\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\r\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"greaterPercentHP\", { percent: 90 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: critRate_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"IronSting\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\r\nconst eleDmgDealtStack = range(1, 2)\r\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\r\n  subscript(input.weapon.refineIndex, allDmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(eleDmgDealtStack.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_,\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KeyOfKhajNisut\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst selfEmSrc = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst teamEmSrc = [0.002, 0.0025, 0.003, 0.0035, 0.004]\r\nconst stacksArr = range(1, 3)\r\nconst hp_ = equal(input.weapon.key, key, percent(0.2))\r\n\r\nconst [condAfterSkillStacksPath, condAfterSkillStacks] = cond(key, \"afterSkill\")\r\nconst selfEleMas = equal(input.weapon.key, key,\r\n  lookup(condAfterSkillStacks, Object.fromEntries(stacksArr.map(stack => [\r\n    stack,\r\n    prod(\r\n      subscript(input.weapon.refineIndex, selfEmSrc, { key: \"_\", fixed: 2 }),\r\n      input.total.hp\r\n    )\r\n  ])), naught)\r\n)\r\nconst teamEleMas = equal(input.weapon.key, key,\r\n  equal(condAfterSkillStacks, \"3\",\r\n    prod(\r\n      subscript(input.weapon.refineIndex, teamEmSrc, { key: \"_\", fixed: 2 }),\r\n      input.total.hp\r\n    )))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    eleMas: selfEleMas\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      eleMas: teamEleMas\r\n    }\r\n  }\r\n}, {\r\n  selfEleMas, teamEleMas\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }]\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    teamBuff: true,\r\n    path: condAfterSkillStacksPath,\r\n    value: condAfterSkillStacks,\r\n    name: st(\"hitOp.skill\"),\r\n    states: Object.fromEntries(stacksArr.map(stack => [\r\n      stack,\r\n      {\r\n        name: st(\"stack\", { count: stack }),\r\n        fields: [{\r\n          node: selfEleMas\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    ]))\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    canShow: equal(condAfterSkillStacks, \"3\", 1),\r\n    teamBuff: true,\r\n    fields: [{\r\n      node: teamEleMas\r\n    }, {\r\n      text: sgt(\"duration\"),\r\n      value: 20,\r\n      unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LionsRoar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MistsplitterReforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst stacks = [\"1\", \"2\", \"3\"] as const\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stacksRefine = {\r\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\r\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\r\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\r\n}\r\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  equal(input.charEle, ele,\r\n    lookup(condNode, objectKeyMap(stacks, stack =>\r\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, { key: `${ele}_dmg_`, variant: ele })\r\n  )]\r\n))\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\r\n))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: allElements.map(ele => (\r\n      { node: passive_dmg_[`${ele}_dmg_`] }\r\n    ))\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"emblem\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(\r\n      stacks.map(stack => [stack, {\r\n        name: st(\"stack\", { count: parseInt(stack) }),\r\n        fields: allElements.map(ele => ({\r\n          node: stacks_dmg_[`${ele}_dmg_`]\r\n        }))\r\n      }])\r\n    )\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeCutter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\r\nconst atk = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, atkSrc, { key: \"_\" }), input.premod.hp))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk\r\n  }\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }, { node: atk }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeRancour\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"onHit\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SapwoodBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 75, 90, 105, 120]\r\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\r\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas\r\n    },\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(eleMas_disp, { key: \"eleMas\" }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SilverSword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    moveSPD_,\r\n    atkSPD_,\r\n  }\r\n}, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: critRate_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st('afterUse.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: moveSPD_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SummitShaper\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SwordOfDescension\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = equal(\"Traveler\", input.charKey, 66)\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk\r\n  }\r\n}, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk\r\n    }, {\r\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheAlleyFlash\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBlackSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.atk)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n}, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }, {\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\" })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheFlute\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TravelersHandySword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.hp)))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: infoMut(heal, { key: \"sheet_gen:healing\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"XiphosMoonlight\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst enerRech_arr = [0.00036, 0.00045, 0.00054, 0.00063, 0.00072]\r\nconst selfEnerRech_ = equal(input.weapon.key, key, equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, enerRech_arr, { key: \"_\", fixed: 3 }),\r\n    input.premod.eleMas,\r\n  )\r\n))\r\nconst teamEnerRech_disp = equal(input.weapon.key, key, prod(percent(0.3), selfEnerRech_))\r\nconst teamEnerRech_ = unequal(input.activeCharKey, input.charKey, teamEnerRech_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    enerRech_: selfEnerRech_\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      enerRech_: teamEnerRech_\r\n    }\r\n  }\r\n}, {\r\n  selfEnerRech_,\r\n  teamEnerRech_disp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    path: condPassivePath,\r\n    value: condPassive,\r\n    name: trm(\"condName\"),\r\n    teamBuff: true,\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: selfEnerRech_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(teamEnerRech_disp, { key: \"enerRech_\", isTeamBuff: true }),\r\n    }, {\r\n        text: sgt(\"duration\"),\r\n        value: 12,\r\n        unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponSwordKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\r\nimport AquilaFavonia from \"./AquilaFavonia\"\r\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\r\nimport CinnabarSpindle from \"./CinnabarSpindle\"\r\nimport CoolSteel from \"./CoolSteel\"\r\nimport KagotsurubeIsshin from \"./KagotsurubeIsshin\"\r\nimport DarkIronSword from \"./DarkIronSword\"\r\nimport DullBlade from \"./DullBlade\"\r\nimport FavoniusSword from \"./FavoniusSword\"\r\nimport FesteringDesire from \"./FesteringDesire\"\r\nimport FilletBlade from \"./FilletBlade\"\r\nimport FreedomSworn from \"./FreedomSworn\"\r\nimport HaranGeppakuFutsu from \"./HaranGeppakuFutsu\"\r\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\r\nimport IronSting from \"./IronSting\"\r\nimport KeyOfKhajNisut from \"./KeyOfKhajNisut\"\r\nimport LionsRoar from \"./LionsRoar\"\r\nimport MistsplitterReforged from \"./MistsplitterReforged\"\r\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\r\nimport PrototypeRancour from \"./PrototypeRancour\"\r\nimport RoyalLongsword from \"./RoyalLongsword\"\r\nimport SacrificialSword from \"./SacrificialSword\"\r\nimport SapwoodBlade from \"./SapwoodBlade\"\r\nimport SilverSword from \"./SilverSword\"\r\nimport SkyriderSword from \"./SkyriderSword\"\r\nimport SkywardBlade from \"./SkywardBlade\"\r\nimport SummitShaper from \"./SummitShaper\"\r\nimport SwordOfDescension from \"./SwordOfDescension\"\r\nimport TheAlleyFlash from \"./TheAlleyFlash\"\r\nimport TheBlackSword from \"./TheBlackSword\"\r\nimport TheFlute from \"./TheFlute\"\r\nimport TravelersHandySword from \"./TravelersHandySword\"\r\nimport XiphosMoonlight from \"./XiphosMoonlight\"\r\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\r\n  AmenomaKageuchi,\r\n  AquilaFavonia,\r\n  BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  CoolSteel,\r\n  KagotsurubeIsshin,\r\n  DarkIronSword,\r\n  DullBlade,\r\n  FavoniusSword,\r\n  FesteringDesire,\r\n  FilletBlade,\r\n  FreedomSworn,\r\n  HaranGeppakuFutsu,\r\n  HarbingerOfDawn,\r\n  IronSting,\r\n  KeyOfKhajNisut,\r\n  LionsRoar,\r\n  MistsplitterReforged,\r\n  PrimordialJadeCutter,\r\n  PrototypeRancour,\r\n  RoyalLongsword,\r\n  SacrificialSword,\r\n  SapwoodBlade,\r\n  SilverSword,\r\n  SkyriderSword,\r\n  SkywardBlade,\r\n  SummitShaper,\r\n  SwordOfDescension,\r\n  TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n  XiphosMoonlight,\r\n} as const\r\nexport default sword\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { compareEq, constant, lookup, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  compareEq(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { key: `weapon_${key}:inactiveKey` })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i, { key: \"sheet:stacks\" })), 0),\r\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n  }, {\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: tr(\"passiveName\"),\r\n    states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: atkInc }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = equal(input.weapon.key, key,\r\n  equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" })), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { hit })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(hit, { key: `weapon_${key}:hitName` })\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Deathmatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }) }, naught)\r\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      \"oneOrNone\": {\r\n        name: trm(\"opponents.oneOrNone\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n      \"moreThanOne\": {\r\n        name: trm(\"opponents.moreThanOne\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonsBane\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonspineSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = equal(input.weapon.key, key,\r\n  min(prod(subscript(input.weapon.refineIndex, atk), sum(input.premod.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax)))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n}, {\r\n  atk_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusLance\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Halberd\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"IronPoint\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KitainCrossSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MissiveWindspear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst emArr = [48, 60, 72, 84, 96]\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_arr, { key: \"_\" }))\r\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, emArr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    eleMas,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterReaction\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          node: eleMas,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Moonpiercer\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atk_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, atk_arr, { key: \"_\" }))\r\nconst atk_ = equal(input.activeCharKey, target.charKey, atk_disp)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_disp, { key: \"atk_\" }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\r\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { key: \"_\" }))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.none\"),\r\n    states: Object.fromEntries(range(1, 7).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: all_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeStarglitter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: Object.fromEntries(range(1, 2).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\r\nconst atkSPD_ = percent(0.12)\r\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    atkSPD_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critRate_,\r\n    }, {\r\n      node: atkSPD_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfHoma\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\r\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { key: \"_\" })\r\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\r\nconst atk1 = prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), input.premod.hp)\r\nconst atk2 = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { key: \"_\" }), input.premod.hp), { key: \"atk\" }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk: sum(atk1, atk2)\r\n  }\r\n}, {\r\n  atk2_: atk2\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: hp_\r\n    }, {\r\n      node: infoMut(atk1, { key: \"atk\" })\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: st(\"lessPercentHP\", { percent: 50 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk2, { key: \"atk\" }),\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfTheScarletSands\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\n\r\nconst baseAtkArr = [0.52, 0.65, 0.78, 0.91, 1.04]\r\nconst stacksAttArr = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst stacksArr = range(1, 3)\r\nconst baseAtk = equal(input.weapon.key, key, prod(\r\n  subscript(input.weapon.refineIndex, baseAtkArr, { key: \"_\" }),\r\n  input.premod.eleMas\r\n), { key: \"atk\" })\r\nconst stacksAtk = lookup(condStacks, Object.fromEntries(stacksArr.map(stack => [\r\n  stack,\r\n  prod(\r\n    stack,\r\n    subscript(input.weapon.refineIndex, stacksAttArr, { key: \"_\" }),\r\n    input.premod.eleMas\r\n  )\r\n])), naught, { key: \"atk\" })\r\nconst atk = equal(input.weapon.key, key, sum(baseAtk, stacksAtk))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk\r\n  },\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: baseAtk\r\n    }],\r\n  }, {\r\n    value: condStacks,\r\n    path: condStacksPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: Object.fromEntries(stacksArr.map(i =>\r\n      [i, {\r\n        name: st(\"hits\", { count: i }),\r\n        fields: [{\r\n          node: stacksAtk\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheCatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\r\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_,\r\n    burst_critRate_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"VortexVanquisher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WavebreakersFin\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponPoleArmKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\nimport Deathmatch from './Deathmatch'\r\nimport DragonsBane from './DragonsBane'\r\nimport DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\nimport FavoniusLance from './FavoniusLance'\r\nimport Halberd from './Halberd'\r\nimport IronPoint from './IronPoint'\r\nimport KitainCrossSpear from './KitainCrossSpear'\r\nimport LithicSpear from './LithicSpear'\r\nimport MissiveWindspear from './MissiveWindspear'\r\nimport Moonpiercer from './Moonpiercer'\r\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\nimport PrototypeStarglitter from './PrototypeStarglitter'\r\nimport RoyalSpear from './RoyalSpear'\r\nimport SkywardSpine from './SkywardSpine'\r\nimport StaffOfHoma from './StaffOfHoma'\r\nimport StaffOfTheScarletSands from './StaffOfTheScarletSands'\r\nimport TheCatch from './TheCatch'\r\nimport VortexVanquisher from './VortexVanquisher'\r\nimport WavebreakersFin from './WavebreakersFin'\r\nimport WhiteTassel from './WhiteTassel'\r\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  Deathmatch,\r\n  DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  FavoniusLance,\r\n  Halberd,\r\n  IronPoint,\r\n  KitainCrossSpear,\r\n  LithicSpear,\r\n  MissiveWindspear,\r\n  Moonpiercer,\r\n  PrimordialJadeWingedSpear,\r\n  PrototypeStarglitter,\r\n  RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  StaffOfTheScarletSands,\r\n  TheCatch,\r\n  VortexVanquisher,\r\n  WavebreakersFin,\r\n  WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AlleyHunter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst dmgInc = [.02, .025, .03, .035, .04]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\r\nconst all_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 10).map(c => [c, {\r\n      name: st(\"seconds\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmosBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"normal_dmg_\" })\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"charged_dmg_\" })\r\n\r\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\r\nconst normal_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"normal_dmg_\" })\r\nconst charged_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"charged_dmg_\" })\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\r\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 5), i => ({\r\n      name: st(\"seconds\", { count: i / 10 }),\r\n      fields: [{\r\n        node: normal_dmg_arrow_\r\n      }, {\r\n        node: charged_dmg_arrow_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquaSimulacra\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst hp_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst dmg_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst base_hp_ = subscript(input.weapon.refineIndex, hp_arr)\r\nconst cond_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_: base_hp_,\r\n    all_dmg_: cond_dmg_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: base_hp_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: cond_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst atkInc = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(range(1, 3).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 30,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CompoundBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.04, .05, .06, .07, .08]\r\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i))\r\n}, naught)\r\nconst atkSPD_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: atkSPD_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ElegyForTheEnd\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst eleMasInc = [60, 75, 90, 105, 120]\r\nconst eleMasInc2 = [100, 125, 150, 175, 200]\r\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\r\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, { key: \"eleMas\" })\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, { key: \"eleMas\" }))\r\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      eleMas: eleMas2\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: eleMas,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas2\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FadingTwilight\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\nconst state_dmg_dict = {\r\n  evengleam: subscript(input.weapon.refineIndex, [0.06, 0.075, 0.09, 0.105, 0.12]),\r\n  afterglow: subscript(input.weapon.refineIndex, [0.1, 0.125, 0.15, 0.175, 0.20]),\r\n  dawnblaze: subscript(input.weapon.refineIndex, [0.14, 0.175, 0.21, 0.245, 0.28])\r\n}\r\nconst state_dmg_ = lookup(condState, state_dmg_dict, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: state_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condState,\r\n    path: condStatePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(Object.keys(state_dmg_dict).map(state => [\r\n      state,\r\n      {\r\n        name: trm(`states.${state}`),\r\n        fields: [{ node: state_dmg_ }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Hamayumi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\r\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" })\r\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" })\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\r\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" }))\r\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg, normal_passive),\r\n    charged_dmg_: sum(charged_dmg, charged_passive)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg\r\n    }, {\r\n      node: charged_dmg\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_passive\r\n        }, {\r\n          node: charged_passive\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"HuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HuntersPath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst allEle_dmg_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, allEle_dmg_arr, { key: \"_\" })\r\n]))\r\n\r\nconst charged_dmgIncArr = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst charged_dmgInc = equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, charged_dmgIncArr, { key: \"_\" }),\r\n    input.total.eleMas\r\n  ))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_,\r\n    charged_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(allEle_dmg_).map(node => ({\r\n      node\r\n    }))\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.charged\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmgInc,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }, {\r\n          text: st(\"charges\"),\r\n          value: 12\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KingsSquire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 80, 100, 120, 140]\r\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, eleMasArr))\r\nconst dmg_arr = [1, 1.2, 1.4, 1.6, 1.8]\r\nconst dmg = equal(input.weapon.key, key, customDmgNode(\r\n  prod(\r\n    subscript(input.weapon.refineIndex, dmg_arr, { key: \"_\" }),\r\n    input.total.atk\r\n  ),\r\n  \"elemental\",\r\n))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skillOrBurst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\",\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Messenger\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MitternachtsWaltz\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\r\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\r\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\r\n\r\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\r\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkill,\r\n    path: condSkillPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MouunsMoon\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PolarStar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\r\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\r\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst atk_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\r\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    atk_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, percent, prod } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Predator\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normalInc = percent(.1)\r\nconst chargedInc = percent(.1)\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\r\n}, naught)\r\nconst charged_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\r\n}, naught)\r\nconst atk = equal(input.activeCharKey, \"Aloy\", 66)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    atk\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.cryo\"),\r\n    states: Object.fromEntries(range(1, 2).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }, {\r\n        node: charged_dmg_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeCrescent\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.36, .45, .54, .63, .72]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RavenBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RecurveBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healing_s = [.08, .10, .12, .14, .16]\r\nconst healing = equal(input.weapon.key, key,\r\n  customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s))))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { healing })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(healing, { key: \"sheet_gen:healing\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRate_s = [.08, .10, .12, .14, .16]\r\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\r\nconst critRate_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rust\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\r\n\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\r\nconst charged_dmg_ = constant(-0.1)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SeasonedHuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SharpshootersOath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\r\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    weakspotDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: weakspotDMG_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardHarp\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critd_s = [.20, .25, .30, .35, .40]\r\nconst dmgPerc = percent(1.25)\r\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critDMG_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critDMG_\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Slingshot\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmg_arr = [.36, .42, .48, .54, .60]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\r\nconst normal_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), { key: \"normal_dmg_\" })\r\nconst charged_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), { key: \"charged_dmg_\" })\r\nconst normal_dmg_dec = equal(condPassive, undefined, percent(-0.1, { key: \"normal_dmg_\" }))\r\nconst charged_dmg_dec = equal(condPassive, undefined, percent(-0.1, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_inc, normal_dmg_dec),\r\n    charged_dmg_: sum(charged_dmg_inc, charged_dmg_dec),\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_dec\r\n    }, {\r\n      node: charged_dmg_dec\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_inc\r\n        }, {\r\n          node: charged_dmg_inc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheStringless\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheViridescentHunt\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThunderingPulse\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    normal_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 3), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EndOfTheLine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgArr = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst dmg = equal(input.weapon.key, key, customDmgNode(\r\n  prod(\r\n    subscript(input.weapon.refineIndex, dmgArr, { key: \"_\" }),\r\n    input.total.atk\r\n  ),\r\n  \"elemental\"\r\n))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WindblumeOde\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.16, .20, .24, .28, .32]\r\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.skill\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponBowKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\n\r\nimport AlleyHunter from './AlleyHunter'\r\nimport AmosBow from \"./AmosBow\"\r\nimport AquaSimulacra from \"./AquaSimulacra\"\r\nimport BlackcliffWarbow from './BlackcliffWarbow'\r\nimport CompoundBow from './CompoundBow'\r\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\r\nimport FadingTwilight from \"./FadingTwilight\"\r\nimport FavoniusWarbow from './FavoniusWarbow'\r\nimport Hamayumi from './Hamayumi'\r\nimport HuntersBow from \"./HuntersBow\"\r\nimport HuntersPath from './HuntersPath'\r\nimport KingsSquire from './KingsSquire'\r\nimport Messenger from './Messenger'\r\nimport MitternachtsWaltz from './MitternachtsWaltz'\r\nimport MouunsMoon from './MouunsMoon'\r\nimport PolarStar from './PolarStar'\r\nimport Predator from './Predator'\r\nimport PrototypeCrescent from './PrototypeCrescent'\r\nimport RavenBow from './RavenBow'\r\nimport RecurveBow from './RecurveBow'\r\nimport RoyalBow from './RoyalBow'\r\nimport Rust from './Rust'\r\nimport SacrificialBow from \"./SacrificialBow\"\r\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\r\nimport SharpshootersOath from './SharpshootersOath'\r\nimport SkywardHarp from './SkywardHarp'\r\nimport Slingshot from './Slingshot'\r\nimport TheStringless from './TheStringless'\r\nimport TheViridescentHunt from './TheViridescentHunt'\r\nimport ThunderingPulse from './ThunderingPulse'\r\nimport EndOfTheLine from './EndOfTheLine'\r\nimport WindblumeOde from './WindblumeOde'\r\n\r\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\r\n  AlleyHunter,\r\n  AmosBow,\r\n  AquaSimulacra,\r\n  BlackcliffWarbow,\r\n  CompoundBow,\r\n  ElegyForTheEnd,\r\n  FadingTwilight,\r\n  FavoniusWarbow,\r\n  Hamayumi,\r\n  HuntersBow,\r\n  HuntersPath,\r\n  KingsSquire,\r\n  Messenger,\r\n  MitternachtsWaltz,\r\n  MouunsMoon,\r\n  PolarStar,\r\n  Predator,\r\n  PrototypeCrescent,\r\n  RavenBow,\r\n  RecurveBow,\r\n  RoyalBow,\r\n  Rust,\r\n  SacrificialBow,\r\n  SeasonedHuntersBow,\r\n  SharpshootersOath,\r\n  SkywardHarp,\r\n  Slingshot,\r\n  TheStringless,\r\n  TheViridescentHunt,\r\n  ThunderingPulse,\r\n  EndOfTheLine,\r\n  WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"ApprenticesNotes\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input, tally, target } from '../../../../Formula'\r\nimport { equal, infoMut, lookup, naught, prod, subscript, sum, unequal } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AThousandFloatingDreams\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst self_eleMasArr = [32, 40, 48, 56, 64]\r\nconst self_eleDmg_arr = [0.10, 0.14, 0.18, 0.22, 0.26]\r\nconst team_eleMasArr = [40, 42, 44, 46, 48]\r\n\r\nconst numSameElement = lookup(input.charEle, Object.fromEntries(allElements.map(ele => [\r\n  ele,\r\n  tally[ele]\r\n])), naught)\r\nconst partySize = sum(...allElements.map(ele => tally[ele]))\r\nconst self_eleMas = prod(\r\n  numSameElement,\r\n  subscript(input.weapon.refineIndex, self_eleMasArr)\r\n)\r\nconst self_eleDmg_ = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_dmg_`,\r\n  equal(input.charEle, ele, prod(\r\n    infoMut(sum(partySize, prod(numSameElement, -1)), { asConst: true }),\r\n    subscript(input.weapon.refineIndex, self_eleDmg_arr, { key: \"_\" })\r\n  ))\r\n]))\r\n\r\nconst team_eleMasDisp = equal(input.weapon.key, key,\r\n  subscript(input.weapon.refineIndex, team_eleMasArr),\r\n  { key: \"eleMas\", isTeamBuff: true }\r\n)\r\nconst team_eleMas = unequal(input.charKey, target.charKey, team_eleMasDisp)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas: self_eleMas,\r\n    ...self_eleDmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: team_eleMas\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: self_eleMas\r\n    },\r\n    ...Object.values(self_eleDmg_).map(node => ({ node }))\r\n    ]\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    fields: [{\r\n      node: team_eleMasDisp\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffAgate\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_,\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 30,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DodocoTales\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\r\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\r\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\r\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_,\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    name: st(\"hitOp.normal\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condCharged,\r\n    path: condChargedPath,\r\n    name: st(\"hitOp.charged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EmeraldOrb\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.hydro\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp))\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    heal_\r\n  }\r\n}, {\r\n  normal_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EyeOfPerception\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_: dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { key: \"sheet:dmg\" }) }],\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusCodex\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Frostbearer\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmgAoe,\r\n  dmgOnCryoOp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FruitOfFulfillment\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleMasArr = [24, 27, 30, 33, 36]\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\nconst stacksArr = range(1, 5)\r\nconst eleMas = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\r\n  stacks,\r\n  prod(\r\n    subscript(input.weapon.refineIndex, eleMasArr),\r\n    stacks\r\n  )\r\n])), naught)\r\n\r\nconst atk_ = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\r\n  stacks,\r\n  prod(\r\n    percent(-0.05),\r\n    stacks\r\n  )\r\n])), naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n    atk_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    path: condStacksPath,\r\n    value: condStacks,\r\n    name: trm(\"stackName\"),\r\n    states: Object.fromEntries(stacksArr.map(stack => [\r\n      stack,\r\n      {\r\n        name: st(\"stack\", { count: stack }),\r\n        fields: [{\r\n          node: eleMas,\r\n        }, {\r\n          node: atk_\r\n        }]\r\n      }\r\n    ]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HakushinRing\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\r\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\r\nconst anemo_dmg_disp  = equal(\"anemo\", condPassive, eleDmg)\r\nconst cryo_dmg_disp   = equal(\"cryo\", condPassive, eleDmg)\r\nconst geo_dmg_disp    = equal(\"geo\", condPassive, eleDmg)\r\nconst hydro_dmg_disp  = equal(\"hydro\", condPassive, eleDmg)\r\nconst pyro_dmg_disp   = equal(\"pyro\", condPassive, eleDmg)\r\nconst dendro_dmg_disp = equal(\"dendro\", condPassive, eleDmg)\r\nconst anemo_dmg_  = equal(\"anemo\", target.charEle, anemo_dmg_disp)\r\nconst cryo_dmg_   = equal(\"cryo\", target.charEle, cryo_dmg_disp)\r\nconst geo_dmg_    = equal(\"geo\", target.charEle, geo_dmg_disp)\r\nconst hydro_dmg_  = equal(\"hydro\", target.charEle, hydro_dmg_disp)\r\nconst pyro_dmg_   = equal(\"pyro\", target.charEle, pyro_dmg_disp)\r\nconst dendro_dmg_ = equal(\"dendro\", target.charEle, dendro_dmg_disp)\r\n\r\nconst electro_dmg_disp = unequal(condPassive, undefined, eleDmg)\r\nconst electro_dmg_ = equal(\"electro\", target.charEle, electro_dmg_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_dmg_,\r\n      cryo_dmg_,\r\n      electro_dmg_,\r\n      geo_dmg_,\r\n      hydro_dmg_,\r\n      pyro_dmg_,\r\n      dendro_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.electro\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      anemo: {\r\n        name: <ColorText color=\"swirl\">{sgt(\"reaction.swirl\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(anemo_dmg_disp, { key: \"anemo_dmg_\", variant: \"anemo\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      cryo: {\r\n        name: <ColorText color=\"superconduct\">{sgt(\"reaction.superconduct\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      geo: {\r\n        name: <ColorText color=\"crystallize\">{sgt(\"reaction.crystallize\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(geo_dmg_disp, { key: \"geo_dmg_\", variant: \"geo\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      pyro: {\r\n        name: <ColorText color=\"overloaded\">{sgt(\"reaction.overloaded\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(pyro_dmg_disp, { key: \"pyro_dmg_\", variant: \"pyro\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      hydro: {\r\n        name: <ColorText color=\"electrocharged\">{sgt(\"reaction.electrocharged\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(hydro_dmg_disp, { key: \"hydro_dmg_\", variant: \"hydro\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      dendro: {\r\n        name: <ColorText color=\"aggravate\">{sgt(\"reaction.aggravate\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dendro_dmg_disp, { key: \"dendro_dmg_\", variant: \"dendro\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\nconst totems = range(1, 3)\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states:\r\n      Object.fromEntries(totems.map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: skill_dmg_s[i - 1]\r\n        },\r\n        ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst ele_dmg_s = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\r\n\r\nconst moveSPD_ = percent(0.1)\r\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s, { key: \"_\" })\r\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\r\n}, naught)]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    moveSPD_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: moveSPD_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"seconds\", { count: i * 4 }),\r\n      fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MagicGuide\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MappaMare\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\r\n\r\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\r\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\r\n}, naught)])\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: eleDmgs\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [...Object.values(eleDmgs).map(node => ({ node })), {\r\n        text: sgt(\"duration\"),\r\n        value: 10,\r\n        unit: \"s\"\r\n      }]\r\n    }))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MemoryOfDust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OathswornEye\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\n\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    enerRech_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OtherworldlyStory\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PocketGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeAmber\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\r\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\r\n\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.burst\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{ node: infoMut(heal, { key: \"sheet_gen:healing\" }) }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialFragments\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardAtlas\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\n\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n  }\r\n}, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\r\n      {\r\n        node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n      }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SolarPearl\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\r\nconst burst_dmg_ = { ...skill_dmg_ }\r\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    normal_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      normal: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          node: burst_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skillOrBurst\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"TheWidsith\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\r\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\r\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\r\nconst eleBonus_ = Object.fromEntries(allElements.map(\r\n  ele => [ele, equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))]\r\n))\r\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n    eleMas\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: tr(\"passiveName\"),\r\n    states: {\r\n      aria: {\r\n        name: trm(\"aria\"),\r\n        fields: [\r\n          ...allElements.map(ele => ({ node: eleBonus_[ele] }))\r\n        ,{\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      interlude: {\r\n        name: trm(\"interlude\"),\r\n        fields: [{\r\n          node: eleMas\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      recitative: {\r\n        name: trm(\"recitative\"),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\r\nconst atk_Disp = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc))\r\nconst atk_ = unequal(input.activeCharKey, input.charKey, // Don't apply to wielding char\r\n  equal(input.activeCharKey, target.charKey, atk_Disp) // Only apply to active char\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm('condName'),\r\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_Disp, { key: \"atk_\" })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TwinNephrite\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterDefeatEnemy\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WanderingEvenstar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atkArr = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst selfAtk = equal(\"on\", condPassive, prod(\r\n  subscript(input.weapon.refineIndex, atkArr, { key: \"_\" }),\r\n  input.premod.eleMas\r\n))\r\nconst teamAtkDisp = equal(input.weapon.key, key, prod(percent(0.3), selfAtk))\r\nconst teamAtk = unequal(input.activeCharKey, input.charKey, teamAtkDisp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk: selfAtk\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      atk: teamAtk\r\n    }\r\n  }\r\n}, {\r\n  selfAtk,\r\n  teamAtkDisp\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: selfAtk\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(teamAtkDisp, { key: \"atk\", isTeamBuff: true }),\r\n    }, {\r\n      text: sgt(\"duration\"),\r\n      value: 12,\r\n      unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WineAndSong\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterSprint\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponCatalystKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport ApprenticesNotes from './ApprenticesNotes'\r\nimport AThousandFloatingDreams from './AThousandFloatingDreams'\r\nimport BlackcliffAgate from './BlackcliffAgate'\r\nimport DodocoTales from './DodocoTales'\r\nimport EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\nimport EyeOfPerception from './EyeOfPerception'\r\nimport FavoniusCodex from './FavoniusCodex'\r\nimport Frostbearer from './Frostbearer'\r\nimport FruitOfFulfillment from './FruitOfFulfillment'\r\nimport HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\nimport MagicGuide from './MagicGuide'\r\nimport MappaMare from './MappaMare'\r\nimport MemoryOfDust from './MemoryOfDust'\r\nimport OathswornEye from './OathswornEye'\r\nimport OtherworldlyStory from './OtherworldlyStory'\r\nimport PocketGrimoire from './PocketGrimoire'\r\nimport PrototypeAmber from './PrototypeAmber'\r\nimport RoyalGrimoire from './RoyalGrimoire'\r\nimport SacrificialFragments from './SacrificialFragments'\r\nimport SkywardAtlas from './SkywardAtlas'\r\nimport SolarPearl from './SolarPearl'\r\nimport TheWidsith from './TheWidsith'\r\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\nimport TwinNephrite from './TwinNephrite'\r\nimport WanderingEvenstar from './WanderingEvenstar'\r\nimport WineAndSong from './WineAndSong'\r\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\r\n  ApprenticesNotes,\r\n  AThousandFloatingDreams,\r\n  BlackcliffAgate,\r\n  DodocoTales,\r\n  EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  FavoniusCodex,\r\n  Frostbearer,\r\n  FruitOfFulfillment,\r\n  HakushinRing,\r\n  KagurasVerity,\r\n  LostPrayerToTheSacredWinds,\r\n  MagicGuide,\r\n  MappaMare,\r\n  MemoryOfDust,\r\n  OathswornEye,\r\n  OtherworldlyStory,\r\n  PocketGrimoire,\r\n  PrototypeAmber,\r\n  RoyalGrimoire,\r\n  SacrificialFragments,\r\n  SkywardAtlas,\r\n  SolarPearl,\r\n  TheWidsith,\r\n  ThrillingTalesOfDragonSlayers,\r\n  TwinNephrite,\r\n  WanderingEvenstar,\r\n  WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["crystallizeMulti1","subscript","input","crystallizeLevelMultipliers","key","crystallizeElemas","prod","frac","crystallizeHit","infoMut","sum","one","pivot","variant","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","objectKeyMap","Object","keys","transformativeReactions","reaction","multi","resist","constant","lookup","burning","bloom","hyperbloom","burgeon","naught","swirl","ele","base","res","includes","data","hit","infusionReactions","overloaded","equal","infusionNode","electrocharged","superconduct","reactions","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","geo","crystallize","fromEntries","absorbableEle","e","percent","dendro","charCurves","objectMap","_charCurves","value","values","commonBasic","inferredHitEle","stringPrio","undefined","sword","claymore","polearm","bow","catalyst","getTalentType","move","customDmgNode","additional","mergeData","customShieldNode","shieldNode","customHealNode","healInc","healNode","dmgNode","lvlMultiplier","talentType","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","weaponCurves","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","total","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","trm","cond","condPassivePath","condPassive","energyRange","range","i","ratio","max","burst_dmg_","min","sheet","icon","iconAwaken","document","path","header","headerTemplate","st","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","c","count","text","sgt","unit","all_dmg_","on","dmg","charged_dmg_","eleMas_disp","eleMas","target","skill_dmg_","condStackPath","condStack","atkInc","critInc","critRate_","atkSelf","atkTeamDisp","atkTeam","unequal","atk","canShow","isTeamBuff","def_","normal_dmgInc","charged_dmgInc","crit_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","shield","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","ForestRegalia","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","MakhairaAquamarine","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","skill_dmgInc","skill_critRate_","cd_Src","dmg_","normal_dmg_","plunging_dmg_","passiveRefine","stack_normal_dmg_","passive_dmg_","allElements","eleDmgDealtStack","selfEmSrc","stacksArr","hp_","condAfterSkillStacksPath","condAfterSkillStacks","selfEleMas","stack","fixed","teamEleMas","stacks","stacksRefine","stacks_dmg_","allEle_dmg_","parseInt","moveSPD_","autoSrc","selfEnerRech_","teamEnerRech_disp","teamEnerRech_","enerRech_","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","KagotsurubeIsshin","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HaranGeppakuFutsu","HarbingerOfDawn","IronSting","KeyOfKhajNisut","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SapwoodBlade","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","XiphosMoonlight","tr","dmg_Nodes","compareEq","atkDefInc","atk_disp","dmgInc","atk1","atk2","atk2_","condStacksPath","condStacks","stacksAttArr","baseAtk","stacksAtk","burst_critRate_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","MissiveWindspear","Moonpiercer","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","StaffOfTheScarletSands","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","base_hp_","cond_dmg_","atk_s","atkSPD_s","eleMas2","condStatePath","condState","state_dmg_dict","evengleam","afterglow","dawnblaze","state_dmg_","state","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","allEle_dmg_arr","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","dmg_arr","normal_dmg_inc","charged_dmg_inc","normal_dmg_dec","charged_dmg_dec","refinementVals","AlleyHunter","AmosBow","AquaSimulacra","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FadingTwilight","FavoniusWarbow","Hamayumi","HuntersBow","HuntersPath","KingsSquire","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","EndOfTheLine","WindblumeOde","self_eleDmg_arr","numSameElement","partySize","self_eleMas","self_eleDmg_","team_eleMasDisp","team_eleMas","condChargedPath","condCharged","heal_","eleMasArr","eleDmg","anemo_dmg_disp","cryo_dmg_disp","geo_dmg_disp","hydro_dmg_disp","pyro_dmg_disp","dendro_dmg_disp","anemo_dmg_","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","dendro_dmg_","electro_dmg_disp","electro_dmg_","color","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","atk_Disp","refineInc","selfAtk","teamAtkDisp","ApprenticesNotes","AThousandFloatingDreams","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","FruitOfFulfillment","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WanderingEvenstar","WineAndSong"],"sourceRoot":""}