{"version":3,"file":"static/js/213.62623711.chunk.js","mappings":"4cAYe,SAASA,EAAT,GAAwH,IAA3FC,EAA0F,EAA1FA,MAA0F,IAAnFC,MAAAA,OAAmF,MAA3E,GAA2E,EAAvEC,EAAuE,EAAvEA,KAAMC,EAAiE,EAAjEA,MAAOC,EAA0D,EAA1DA,WAAYC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,MACnG,OAAO,UAACC,EAAA,GAAD,gBAAsBP,MAAOA,GAAWM,GAAxC,eACL,SAACE,EAAA,EAAD,UAAeP,KACf,SAACQ,EAAA,EAAD,CAAcC,uBAAwB,CAAEC,MAAO,CAAEC,WAAYR,EAAaD,EAAMU,WAAWC,iBAAmBX,EAAMU,WAAWE,oBAA/H,SACGb,IAEFG,GAAeA,KALIL,G,qbCiBxB,SAASgB,EAAT,GACyC,IADuDC,EACxD,EADwDA,2BAA4BC,EACpF,EADoFA,qBAAsBC,EAC1G,EAD0GA,gBAAiBC,EAC3H,EAD2HA,QAASC,EACpI,EADoIA,SAAUC,EAC9I,EAD8IA,MAAUhB,GACxJ,YAChCH,GAAQoB,EAAAA,EAAAA,KAKRC,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMR,EAA2BS,KAAI,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,QAAR,MAAuB,CAAED,IAAAA,EAAKL,MAAOF,EAAQO,GAAMC,QAAAA,QAAa,CAACX,EAA4BG,IAC1J,OAAO,SAACS,EAAA,GAAD,QACLC,eAAa,EACbC,UAAQ,EACRC,sBAAoB,EACpBR,QAASA,EACTxB,MAAOkB,EAAqBQ,KAAI,SAAAC,GAAG,MAAK,CAAEA,IAAKA,EAAKL,MAAOF,EAAQO,OACnEM,SAVmB,SAACC,EAAGlC,GACvBmB,EAAgBnB,EAAM0B,KAAI,SAAAS,GAAC,OAAIA,EAAER,SAUjCS,eAAgB,SAACC,GAAD,OAAYA,EAAOf,OACnCgB,qBAAsB,SAACD,EAAQrC,GAAT,OAAmBqC,EAAOV,MAAQ3B,EAAM2B,KAC9DY,YAAa,SAACC,GAAD,OAAY,SAACC,EAAA,GAAD,kBACnBD,GADmB,IAEvBlB,MAAOA,EACPoB,QAAQ,SACRC,gBAAiB,CAAEhC,MAAO,CAAEiC,MAAOzC,EAAM0C,QAAQ3C,KAAK4C,UACtDF,MAAO1B,EAAqB6B,OAAS,UAAY,UACjDC,KAAK,aAEPC,aAAc,SAAC3C,EAAO+B,GAAR,OACZ,SAACtC,EAAD,CAEEC,MAAOqC,EAAOV,IACd1B,MAAOoB,EAASgB,EAAOV,KACvBzB,KAAMmC,EAAOf,MACbnB,MAAOA,EACPC,WAAYc,EAAqBgC,SAASb,EAAOV,KACjDrB,MAAOA,GANF+B,EAAOV,MAShBwB,WAAY,SAACC,EAAUC,GAAX,OAA2BD,EAAS1B,KAAI,SAAC1B,EAAOsD,GAC1D,IAAMC,EAAUC,EAAAA,GAAAA,MAAwB,SAAAC,GAAG,OAAIzD,EAAM2B,MAAN,UAAiB8B,EAAjB,YACzCb,EAAQW,QAAoBG,EAClC,OAAO,mBAACC,EAAA,GAAD,kBAAUN,EAAY,CAAEC,MAAAA,KAAxB,IAAkC3B,IAAK3B,EAAM2B,IAAKiC,KAAMvC,EAASrB,EAAM2B,KAAML,MAAOtB,EAAMsB,MAAOsB,MAAOA,UAE7GtC,IAQD,SAASuD,EAAT,GAAmH,IAA3EC,EAA0E,EAA1EA,WAAYC,EAA8D,EAA9DA,cAAkBzD,GAA4C,YACjH0D,GAAiBC,EAAAA,EAAAA,IAAW,kBAAMC,EAAAA,EAAAA,SAAsB,IACtDC,GAAMC,EAAAA,EAAAA,GAAe,CAAC,WAAY,sBAAlCD,EACR,IAAKH,EAAgB,OAAO,KAE5B,IAAMK,EAA6BC,OAAOC,QAAQL,EAAAA,EAAAA,kBAAgCF,IAC/EQ,SAAQ,+BAAEC,EAAF,iBAAyB/C,KAAI,SAAAgD,GAAG,MAAK,CAAE/C,IAAK+C,EAAK9C,SAAU6C,SACnEE,KAAKC,GAER,OAAO,SAAC5D,GAAD,QACLC,2BAA4BoD,EAC5BnD,qBAAsB4C,EACtB3C,gBAAiB4C,EACjB3C,QAAS,SAACO,GAAD,OAAyBqC,EAAerC,GAAKkD,SACtDxD,SAAU,SAACM,GAAD,OAAyBqC,EAAerC,GAAKmD,SACvDxD,MAAO6C,EAAE,oCACTY,QAAS,SAAC1C,GAAD,mCAAYA,EAAOT,eAAnB,aAAY,EAAgBoD,kBAA5B,QAA0C,IACnDC,YAAa,SAACzC,GAAD,OAA2CA,EAAO0C,QAAS,UAACC,EAAA,EAAD,CAAyBC,UAAWC,EAAAA,EAApC,WACtE,UAACC,EAAA,EAAD,CAA6CC,GAAI,CAAEC,IAAK,QAAxD,UACGhD,EAAO0C,MADV,KACiB,SAAC,IAAD,CAAcO,OAAQjD,EAAO0C,UAD9C,UAAuB1C,EAAO0C,MAA9B,WAGC1C,EAAOkD,WAJyElD,EAAO0C,SAMtF5E,IAQD,SAASqF,EAAT,GAAiI,IAApFC,EAAmF,EAAnFA,aAAcC,EAAqE,EAArEA,gBAAoBvF,GAAiD,YAC7H6D,GAAMC,EAAAA,EAAAA,GAAe,YAArBD,EACR,OAAO,SAACnD,GAAD,QACLC,2BAA4B6E,EAAAA,EAAAA,KAAoB,SAAAnE,GAAG,MAAK,CAAEA,IAAAA,MAC1DT,qBAAsB0E,EACtBzE,gBAAiB0E,EACjBzE,QAAS,SAACO,GAAD,OAAsBoE,EAAAA,GAAAA,UAAiBpE,IAChDN,SAAU,SAACM,GAAD,OAAsBqE,EAAAA,EAASrE,IACzCL,MAAO6C,EAAE,iCACL7D,IAQD,SAAS2F,EAAT,GAA6H,IAAjFC,EAAgF,EAAhFA,YAAaC,EAAmE,EAAnEA,eAAmB7F,GAAgD,YACzH6D,GAAMC,EAAAA,EAAAA,GAAe,YAArBD,EACR,OAAO,SAACnD,GAAD,QACLC,2BAA4BmF,EAAAA,EAAAA,KAAmB,SAAAzE,GAAG,MAAK,CAAEA,IAAAA,MACzDT,qBAAsBgF,EACtB/E,gBAAiBgF,EACjB/E,QAAS,SAACO,GAAD,OAAqBoE,EAAAA,GAAAA,UAAiBpE,IAC/CN,SAAU,SAACM,GAAD,OAAqBqE,EAAAA,EAASrE,IACxCL,MAAO6C,EAAE,gCACL7D,IAsBR,SAAS+F,EAAT,GAC0C,IADwDpF,EACzD,EADyDA,2BAA4BqF,EACrF,EADqFA,oBAAqBC,EAC1G,EAD0GA,eAAgBnF,EAC1H,EAD0HA,QAASC,EACnI,EADmIA,SAAUC,EAC7I,EAD6IA,MAC7I,IADoJkF,QAAAA,OACpJ,MAD8J,kBAAM,GACpK,MAD2KC,YAAAA,OAC3K,aADgMC,YAAAA,OAChM,MAD8M,GAC9M,EADuOpG,GACvO,EADkNqG,aAClN,aACjCxG,GAAQoB,EAAAA,EAAAA,KAERC,GAAUC,EAAAA,EAAAA,UAAQ,kBACrBgF,EACG,CAAC,CAAE9E,IAAK,GAASL,MAAOoF,IACxB,IACFE,OAAO3F,EAA2BS,KAAI,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,QAAR,MACtC,CAAED,IAAAA,EAAKL,MAAOF,EAAQO,GAAMC,QAAAA,SACzB,CAACX,EAA4BG,EAASsF,EAAaD,IAE1D,OAAO,SAAC5E,EAAA,GAAD,QACLC,eAAa,EACbN,QAASA,EACTqF,UAAWP,OAAsB5C,EAAY,GAC7C1D,MAAO,CAAE2B,IAAK2E,EAAqBhF,MAAOF,EAAQkF,IAClDrE,SAAU,SAAC6E,EAAOC,EAAUC,GAAlB,OAA6C,WAAfF,EAAM9D,MAAgC,UAAXgE,IAAuBT,EAAeQ,EAAWA,EAASpF,IAAM,KACnIS,eAAgB,SAACC,GAAD,OAAYA,EAAOf,MAAQe,EAAOf,MAAQoF,GAC1DpE,qBAAsB,SAACD,EAAQrC,GAAT,OAAmBqC,EAAOV,MAAQ3B,EAAM2B,KAC9DsF,kBAAmB,SAAA5E,GAAM,OAAImE,EAAQnE,EAAOV,MAC5CY,YAAa,SAACjC,GAAD,OAAW,SAAC,KAAD,kBAClBA,GADkB,IAEtBgB,MAAOA,EACP4F,eAAgB7F,EAASiF,GACzBa,WAAUb,MAEZrD,aAAc,SAAC3C,EAAO+B,GAAR,OACZ,SAACtC,EAAD,CAEEC,MAAOqC,EAAOV,IACd1B,MAAOoB,EAASgB,EAAOV,KACvBzB,KAAMmC,EAAOf,MACbnB,MAAOA,EACPC,WAAYkG,IAAwBjE,EAAOV,IAC3CrB,MAAOA,GANF+B,EAAOV,OASZrB,IAaD,SAAS8G,EAAT,GAA+H,IAAtFC,EAAqF,EAArFA,UAAWC,EAA0E,EAA1EA,aAA0E,IAA5DhG,MAAAA,OAA4D,MAApD,GAAoD,EAA7ChB,GAA6C,YAC7H0D,GAAiBC,EAAAA,EAAAA,IAAW,kBAAMC,EAAAA,EAAAA,SAAsB,IACtDC,GAAMC,EAAAA,EAAAA,GAAe,CAAC,WAAY,sBAAlCD,EAER,GADA7C,EAAQA,GAAgB6C,EAAE,oCACrBH,EAAgB,OAAO,KAE5B,IAAMK,EAA6BC,OAAOC,QAAQL,EAAAA,EAAAA,kBAAgCF,IAC/EQ,SAAQ,+BAAEC,EAAF,iBAAyB/C,KAAI,SAAAgD,GAAG,MAAK,CAAE/C,IAAK+C,EAAK9C,SAAU6C,SACnEE,KAAKC,GAER,OAAO,SAACyB,GAAD,QACLpF,2BAA4BoD,EAC5BiC,oBAAqBe,EACrBd,eAAgBe,EAChBlG,QAAS,SAACO,GAAD,OAA8BA,GAAOqC,EAAerC,GAAKkD,SAClExD,SAAU,SAACM,GAAD,OAA8BA,EAAMqC,EAAerC,GAAKmD,SAAU,yBAC5ExD,MAAOA,EACPyD,QAAS,SAAC1C,GAAD,mCAAYA,EAAOT,eAAnB,aAAY,EAAgBoD,kBAA5B,QAA0C,IACnDC,YAAa,SAACzC,GAAD,OAA2CA,EAAO0C,QAAS,UAACC,EAAA,EAAD,CAAyBC,UAAWC,EAAAA,EAApC,WACtE,UAACC,EAAA,EAAD,CAA6CC,GAAI,CAAEC,IAAK,QAAxD,UACGhD,EAAO0C,MADV,KACiB,SAAC,IAAD,CAAcO,OAAQjD,EAAO0C,UAD9C,UAAuB1C,EAAO0C,MAA9B,WAGC1C,EAAOkD,WAJyElD,EAAO0C,SAMtF5E,IAIR,SAASsE,EAAoB2C,EAAqDC,GAChF,GAAID,EAAE3F,QAAU4F,EAAE5F,QAChB,OAAQ,EAEV,GAAI2F,EAAE3F,QAAU4F,EAAE5F,QAChB,OAAO,EAGT,IAAM6F,EAAQC,EAAAA,EAAAA,EAAA,4BAA4BH,EAAE5F,MACtCgG,EAAQD,EAAAA,EAAAA,EAAA,4BAA4BF,EAAE7F,MAC5C,OAAI8F,EAAQE,GACF,EAENF,EAAQE,EACH,EAGF,I,0IC5PHC,GAAiBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAe,gBAAG1H,EAAH,EAAGA,MAAH,MAAgB,CACpD,iBAAkB,CAChB4H,gBAAiB5H,EAAM0C,QAAQC,QAAQkF,KACvCpF,MAAOzC,EAAM0C,QAAQ3C,KAAK+H,eAIf,SAASC,EAAT,GAAoE,IAA9CxC,EAA6C,EAA7CA,SAAuBpF,GAAsB,EAAnC6H,UAAmC,aAChF,OAAO,SAACP,GAAD,kBAAoBtH,GAApB,IAA2B6H,UAAQ,EAAnC,SACJzC,O,8dCCU,SAAS0C,EAAT,GAAgF,IAA9C3D,EAA6C,EAA7CA,OAAQxC,EAAqC,EAArCA,SAAUoG,EAA2B,EAA3BA,OAAW/H,GAAgB,YACpF6D,GAAMC,EAAAA,EAAAA,GAAe,YAArBD,EACR,OAAO,SAACmE,EAAA,GAAD,kBACDhI,GADC,IAELiI,MAAO9D,GAAS,SAAC,IAAD,CAAcgB,MAAOhB,IAAaN,EAArC,mCACbvB,MAAO6B,EAAS,UAAY,UAHvB,SAKH,CAAC,EAAG,EAAG,GAAwB/C,KAAI,SAAA+C,GAAM,OACzC,SAAClE,EAAA,EAAD,CAAuB4H,UAAWE,EAAO5D,GAAS+D,QAAS,kBAAMvG,EAASwC,IAA1E,UACE,SAAC,IAAD,CAAcgB,MAAOhB,KADRA,S,yFCPN,SAASgE,EAAT,GAAqH,IAAD,IAApFC,QAAAA,OAAoF,MAA1E,GAA0E,EAAtEzG,EAAsE,EAAtEA,SAAsE,IAA5D0G,YAAAA,OAA4D,SAApCrI,GAAoC,YACzH6D,GAAMC,EAAAA,EAAAA,GAAe,CAAC,WAAY,OAAlCD,EACR,OAAO,UAACmE,EAAA,GAAD,gBACLC,MAAiBpE,EAAVuE,EAAY,qBAAD,OAAsBA,GAAe,iBACvD9F,MAAO8F,EAAU,UAAY,UAC7BE,UAAWF,GAAUG,EAAAA,EAAAA,IAAiBH,QAAWhF,GAC7CpD,GAJC,cAMJqI,IAAe,UAACpI,EAAA,EAAD,CAAU6C,SAAsB,KAAZsF,EAAgBP,SAAsB,KAAZO,EAAgBF,QAAS,kBAAMvG,EAAS,KAAtF,WACd,SAACzB,EAAA,EAAD,WACE,SAACsI,EAAA,EAAD,OAEF,SAACrI,EAAA,EAAD,UACG0D,EADH,sCAIDwE,IAAe,SAACI,EAAA,EAAD,IACfC,EAAAA,GAAAA,KAAgB,SAAArH,GAAG,OAClB,UAACpB,EAAA,EAAD,CAAoB6C,SAAUsF,IAAY/G,EAAKwG,SAAUO,IAAY/G,EAAK6G,QAAS,kBAAMvG,EAASN,IAAlG,WACE,SAACnB,EAAA,EAAD,WACGqI,EAAAA,EAAAA,IAAiBlH,MAEpB,SAAClB,EAAA,EAAD,UACG0D,EAAE,qBAAD,OAAsBxC,QALbA,U,yFCtBN,SAASsH,EAAT,GAAuG,IAAtEjJ,EAAqE,EAArEA,MAAOiC,EAA8D,EAA9DA,SAA8D,IAApDkG,SAAAA,OAAoD,aAAlCe,MAAAA,OAAkC,SAAhB5I,GAAgB,YACnH,GAA0B6I,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAaC,EAAAA,EAAAA,cACjB,WACE,GAAc,KAAVH,EAAc,OAAOnH,EAAS,GAClC,IAAMuH,EAAYN,EAAQO,WAAaC,SACvCzH,EAASuH,EAAUJ,MAErB,CAACnH,EAAUmH,EAAOF,IAIpB,OAFAS,EAAAA,EAAAA,YAAU,wBAAMN,EAAQ,iBAACrJ,QAAD,IAACA,OAAD,EAACA,EAAOgF,kBAAR,QAAsB,MAAK,CAAChF,EAAOqJ,KAEpD,SAAC5G,EAAA,GAAD,QACLzC,MAAOoJ,EACP,aAAW,eACXpG,KAAK,SACLf,SAAU,SAAC2H,GAAD,OAAYP,EAASO,EAAEC,OAAO7J,QACxC8J,OAAQR,EACRnB,SAAUA,EACV4B,UAAW,SAACH,GAAD,MAAsB,UAAVA,EAAEjI,KAAmB2H,MACxChJ,I,0SCtBO,SAAS0J,GAAT,GAA8E,IAAtCC,EAAqC,EAArCA,WAAqC,IAAzBC,IAAAA,OAAyB,SAAZ/F,EAAY,EAAZA,EAAGgG,EAAS,EAATA,MAC3EC,EAAMF,EAAM,YAAc,YAChC,OAAO,SAACG,EAAA,EAAD,CAAW9E,GAAI,CAAE+E,GAAI,EAAGC,GAAI,GAA5B,UACL,UAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,SAACF,EAAA,GAAD,CAAMG,MAAI,EAAV,SAAYxG,EAAE,UAAD,OAAWiG,OACxB,SAACI,EAAA,GAAD,CAAMG,MAAI,EAACC,SAAU,EAArB,UACE,SAACC,GAAA,EAAD,CAAatC,OAAO,6BAClB,SAACuC,EAAA,EAAD,CAAYpI,QAAQ,KAApB,SAA0ByB,EAAE,UAAD,OAAWiG,OACtC,SAACU,EAAA,EAAD,WAAY,SAACC,EAAA,EAAD,CAAO5G,EAAGA,EAAG6G,QAAO,iBAAYZ,EAAZ,oBAGpC,SAACI,EAAA,GAAD,CAAMG,MAAI,EAACM,GAAG,OAAd,UACE,SAACC,GAAA,EAAD,CAAcf,MAAOA,EAAOD,IAAK,IAAKlK,MAAOmK,EAAQF,EAAa,e,6DCH3D,SAASkB,GAAT,GAA2K,IAAD,EAAlJ7H,EAAkJ,EAAlJA,MAAO8H,EAA2I,EAA3IA,SAAUC,EAAiI,EAAjIA,WAC9ClH,GAAMC,EAAAA,EAAAA,GAAe,YAArBD,EACR,SAAyCiH,QAAzC,IAAyCA,EAAAA,EAAY,GAArD,IAAQE,YAAAA,OAAR,MAAsB,GAAtB,MAA0B7G,OAAAA,OAA1B,MAAmC,EAAnC,EACA,mBAA4D2G,QAA5D,IAA4DA,OAA5D,EAA4DA,EAAUG,SAASjI,UAA/E,QAAyF,GAAzF,IAAQ3B,IAAAA,OAAR,MAAc,GAAd,MAAkB3B,MAAAA,OAAlB,MAA0B,EAA1B,MAA6BwL,MAAAA,OAA7B,MAAqC,GAArC,MAAyCvB,WAAAA,OAAzC,MAAsD,EAAtD,EAEMwB,EAAgBD,EAAME,QAAO,SAACnE,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAC9CmE,EAAO5F,GAAAA,GAAAA,KAAYpE,GAAMiK,EAAUJ,EAAMzI,OAE3C8I,EAAgB,GAAIC,EAA8B,GAAIC,EAAe,EAEzE,GAAIX,EAAU,CAEZ,IAAM3G,EAAS2G,EAAS3G,OACxB,EAA8BuH,GAAAA,GAAAA,SAAkBvH,GAAxCwH,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KAErBH,EADmBE,EAAcC,EAAO,EACZN,EAC5BE,EAAWnK,EAAMqK,GAAAA,GAAAA,mBAA4BrK,EAAK8C,GAAU,GAE9D,IAAM0H,EAAa,EAAIL,EAAS/I,OAKhC,OAHK6I,GAAWjK,GAAO3B,IAAO6L,EAAQA,GAAS1H,EAAJ,oDACvC4H,EAAe,IAAGF,EAAQA,GAAS1H,EAAE,kCAAmC,CAAEnE,MAAO+L,EAAeH,MAE7F,UAACvB,EAAA,EAAD,YACL,SAAChF,EAAA,EAAD,CAAKE,GAAI,CAAE6G,QAAS,QAApB,UACE,UAACC,EAAA,EAAD,CAAaC,KAAK,QAAQ/G,GAAI,CAAEgH,MAAO,OAAQH,QAAS,QAAxD,WACE,UAAC9D,EAAA,EAAD,CACEM,UAAWjH,EAAMqE,GAAAA,EAASrE,QAAO+B,EACjC6E,MAAO5G,EAAMoE,GAAAA,GAAAA,UAAiBpE,GAAOwC,EAAE,+BAAgC,CAAEnE,MAAOsD,EAAQ,IACxF6E,UAAWiD,EACXxI,MAAOjB,EAAM,UAAY,UACzB4D,GAAI,CAAEiH,WAAY,UALpB,UAMG7K,IAAO,SAACpB,EAAA,EAAD,CAAUiI,QAAS,kBAAM6C,EAAW/H,EAAO,CAAE3B,IAAK,GAAI3B,MAAO,KAA7D,SAAoEmE,EAApE,kDACPiC,GAAAA,EAAAA,QAAsB,SAAAzE,GAAG,OAAI2J,IAAgB3J,KAC3CD,KAAI,SAAA+K,GAAC,OAAI,UAAClM,EAAA,EAAD,CAAkB6C,SAAUzB,IAAQ8K,EAAGtE,SAAUxG,IAAQ8K,EAAGjE,QAAS,kBAAM6C,EAAW/H,EAAO,CAAE3B,IAAK8K,EAAGzM,MAAO,KAA9G,WACR,SAACQ,EAAA,EAAD,UAAewF,GAAAA,EAASyG,MACxB,SAAChM,EAAA,EAAD,UAAesF,GAAAA,GAAAA,UAAiB0G,OAFTA,UAK7B,SAACC,GAAA,GAAD,CAAqCnH,GAAI,CAAEoH,UAAW,GAAI/B,SAAU,GAApE,UACE,SAAC8B,GAAA,GAAD,CACExD,MAAgB,MAATyC,EACPiB,YAAazI,EAAF,gDACXnE,MAAO2B,EAAM3B,OAAQ0D,EACrBzB,SAAU,SAAAjC,GAAK,OAAIqL,EAAW/H,EAAO,CAAE3B,IAAAA,EAAK3B,MAAK,OAAEA,QAAF,IAAEA,EAAAA,EAAS,KAC5DmI,UAAWxG,EACXkK,QAASA,EACTtG,GAAI,CACFgF,GAAI,GAENsC,WAAY,CACVtH,GAAI,CAAEuH,UAAW,gBAIpBhB,EAAS/I,SAAU,SAACmF,GAAA,EAAD,UAAa/D,EAAb,kDACrB2H,EAASpK,KAAI,SAACS,EAAG4K,GAAO,IAAD,MAClBhG,GAAWiG,EAAAA,GAAAA,IAAiBvB,EAAgBtJ,EAAGwJ,GAEnD,OADA5E,EAAQ,oBAAGkG,GAA8BxI,UAAjC,iBAAG,EAAwC9C,UAA3C,aAAG,EAA+CoF,UAAlD,QAA+DA,GAChE,SAACe,EAAA,EAAD,CAAgBlF,MAAK,eAASsK,EAAAA,GAAAA,IAAMf,EAAaY,EAAG,EAAG,IAAa5E,SAAWnI,IAAU4L,GAAYG,GAAgB,EAAGvD,QAAS,kBAAM6C,EAAW/H,EAAO,CAAE3B,IAAAA,EAAK3B,MAAOyJ,WAAW1C,MAAlL,SAAiMA,GAApLgG,YAI1B,SAAC1H,EAAA,EAAD,CAAKE,GAAI,CAAE4H,EAAG,GAAd,SACGtB,GAAQ,SAACuB,GAAA,EAAD,CAASxK,MAAM,QAAf,SAAwBuB,EAAxB,mCAAiD,UAACqG,EAAA,GAAD,CAAMC,WAAS,EAAf,WACxD,SAACD,EAAA,GAAD,CAAMG,MAAI,EAAV,UACE,SAACyC,GAAA,EAAD,CAASxK,MAAmB,IAAZgJ,EAAgB,YAAhB,eAAqCsB,EAAAA,GAAAA,IAAMtB,EAAS,EAAG,IAAvE,SACGA,EAAUzH,EAAE,2BAA4B,CAAEkJ,MAAOzB,IAAazH,EAAvD,kDAGZ,SAACqG,EAAA,GAAD,CAAMG,MAAI,EAACC,SAAU,EAArB,WACKY,EAAMzI,SAAU,OAAIyI,GAAO7G,OAAOjD,KAAI,SAAC4L,EAAKP,GAAN,OACvC,SAACjC,EAAA,EAAD,CAAY1F,UAAU,OAA2BxC,MAAK,eAASsK,EAAAA,GAAAA,IAAMf,EAAaL,EAASyB,QAAQD,GAAM,EAAG,GAAtD,SAAiE/H,GAAI,CAAEiI,GAAI,GAAjI,UAAwIR,EAAAA,GAAAA,IAAiBM,EAAK3B,IAA9J,UAAqCoB,EAArC,YAA0CO,UAE9C,SAAC9C,EAAA,GAAD,CAAMG,MAAI,EAACM,GAAG,OAAOwC,WAAY,EAAjC,UACE,SAAC3C,EAAA,EAAD,WACE,UAACC,EAAA,EAAD,CAAO5G,EAAGA,EAAG6G,QAAQ,qBAAqBpI,MAAM,iBAAhD,0BACc,SAACsI,GAAA,EAAD,CAAcf,OAAO,EAAMD,IAAe,IAAV0B,EAAe5L,MAAOiK,GAA0B9F,EAAhB,8D,wHCvF3E,SAASuJ,GAAT,GAAiG,IAA9DC,EAA6D,EAA7DA,UAAWC,EAAkD,EAAlDA,KAC3D,OAAO,SAACC,GAAA,EAAD,CAAcC,KAAMH,EAAWI,QAASH,EAAxC,UACL,UAACI,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAa1I,GAAI,CAAE+E,GAAI,GAAvB,UACE,UAACE,EAAA,GAAD,CAAMC,WAAS,EAAf,WACE,SAACD,EAAA,GAAD,CAAMG,MAAI,EAACC,SAAU,EAArB,UACE,SAACE,EAAA,EAAD,CAAYpI,QAAQ,YAApB,sDAEF,SAAC8H,EAAA,GAAD,CAAMG,MAAI,EAAV,UACE,SAACuD,EAAA,EAAD,CAAa1F,QAASoF,YAI5B,SAAC7E,EAAA,EAAD,KACA,UAACkF,EAAA,EAAD,YACE,UAACE,EAAA,EAAD,CAAOzL,QAAQ,WAAW0L,SAAS,UAAnC,8DACkD,wCADlD,kBAGA,UAAC5D,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAG2D,GAAI,EAAhC,WACE,SAAC7D,EAAA,GAAD,CAAMG,MAAI,EAACM,GAAI,EAAGqD,GAAI,EAAtB,UACE,SAACjJ,EAAA,EAAD,CAAKD,UAAU,MAAMmJ,IAAI,gCAAgCC,IAAKC,GAASlC,MAAM,OAAOmC,OAAO,YAE7F,UAAClE,EAAA,GAAD,CAAMG,MAAI,EAACM,GAAI,GAAIqD,GAAI,EAAvB,WACE,SAACxD,EAAA,EAAD,CAAY6D,cAAY,EAAxB,mIACA,SAAC7D,EAAA,EAAD,CAAYpI,QAAQ,KAApB,4CACA,UAACoI,EAAA,EAAD,CAAY6D,cAAY,EAAxB,sIAAiJ,8EACjJ,SAAC7D,EAAA,EAAD,CAAYpI,QAAQ,KAApB,8BACA,UAACoI,EAAA,EAAD,CAAY6D,cAAY,EAAxB,gEAA2E,uDAA3E,6FACA,SAAC7D,EAAA,EAAD,CAAYpI,QAAQ,KAApB,iCACA,UAACoI,EAAA,EAAD,CAAY6D,cAAY,EAAxB,0EAAqF,cAAGC,KAAK,uBAAuB/E,OAAO,SAASgF,IAAI,aAAnD,qBAArF,oGACA,SAAC/D,EAAA,EAAD,CAAYpI,QAAQ,KAApB,iDACA,SAACoI,EAAA,EAAD,wIAEF,UAACN,EAAA,GAAD,CAAMG,MAAI,EAACM,GAAI,GAAIqD,GAAI,EAAvB,WACE,SAACxD,EAAA,EAAD,CAAYpI,QAAQ,KAApB,qDACA,SAACoI,EAAA,EAAD,yHACA,SAACA,EAAA,EAAD,CAAY6D,cAAY,EAAxB,wHACA,UAAC7D,EAAA,EAAD,oEAAiE,yCAAjE,qCACA,UAACA,EAAA,EAAD,CAAY6D,cAAY,EAAxB,wKAAmL,2CAAnL,QACA,SAAC7D,EAAA,EAAD,CAAYpI,QAAQ,KAApB,qCACA,UAACoI,EAAA,EAAD,uOAAoO,6CAApO,0CAEF,SAACN,EAAA,GAAD,CAAMG,MAAI,EAACM,GAAI,EAAGqD,GAAI,EAAtB,UACE,SAACjJ,EAAA,EAAD,CAAKD,UAAU,MAAMmJ,IAAI,oCAAoCC,IAAKM,GAAevC,MAAM,OAAOmC,OAAO,kBAI3G,SAAC3F,EAAA,EAAD,KACA,SAACkF,EAAA,EAAD,CAAa1I,GAAI,CAAE+E,GAAI,GAAvB,UACE,SAAC4D,EAAA,EAAD,CAAaa,OAAK,EAACvG,QAASoF,W,wFCvDvBoB,GAAb,WAKE,WAAYC,EAA0BC,IAA0C,qBAJhFC,KAAqD,GAI0B,KAH/EF,UAG+E,OAF/EC,YAE+E,EAC7EE,KAAKH,KAAOA,EACZG,KAAKF,OAASA,EAPlB,iFAiBE,WAAgBvN,EAAa0N,GAA7B,sFACOD,KAAKD,KAAKxN,KACbyN,KAAKD,KAAKxN,GAAO,CAAE3B,MAAOoP,KAAKH,KAAKtN,GAAM2N,SAAU,KAGhDC,EAAMH,KAAKD,KAAKxN,IAClB2N,UAAY,EANlB,SAOuBD,EAASE,EAAIvP,OAPpC,cAOQwP,EAPR,OAQED,EAAID,UAAY,EACXC,EAAID,kBAEAF,KAAKD,KAAKxN,GACjByN,KAAKF,OAAOvN,EAAK4N,EAAIvP,QAZzB,kBAcSwP,GAdT,gDAjBF,gECUMC,GAAY,CAAEC,EAAG,IAAKC,EAAG,IAAKnI,EAAG,IAGjCoI,GAAa,IAAIZ,GAAJ,2CAAkB,WAAOa,GAAP,sFAC7BC,GAAYC,EAAAA,GAAAA,mBACZC,EAAWC,MAJC,GAIkBC,KAAK,GAAGxO,IAA3B,2CAA+B,WAAMQ,GAAN,oFACxCiO,GAASC,EAAAA,GAAAA,cAAa,CAC1BC,aAAcC,QAAQzE,QAFsB,SAKxCsE,EAAOI,OALiC,uBAMxCJ,EAAOK,aAAaX,GANoB,uBAOxCM,EAAOM,WAAWZ,GAPsB,OAQ9CC,EAAUY,UAAUP,GAR0B,2CAA/B,uDAFkB,SAa7BQ,QAAQC,IAAIZ,GAbiB,gCAc5BF,GAd4B,2CAAlB,uDAehB,SAACe,EAAW7Q,GACbA,EAAM8Q,MAAK,SAAA9Q,GAAK,OAAIA,EAAM+Q,kBAgBfC,GAAe,SAACC,EAAcC,GACzC,OAAQA,EAAQlO,MACd,IAAK,SAAU,MAAO,CAAEmO,UAAWF,EAAME,UAAWC,YAAY,GAAD,eAAMH,EAAMG,cAAZ,OAA4BF,EAAQG,SACnG,IAAK,aACH,MAAO,CAAEF,UAAWF,EAAME,UAAWC,aAAY,OAAKH,EAAMG,cAC9D,IAAK,YACH,OAAIH,EAAMG,YAAY,GAAGE,OAASJ,EAAQI,KACjC,CAAEH,UAAU,GAAD,eAAMF,EAAME,WAAZ,CAAuBD,EAAQ1B,SAAS4B,YAAaH,EAAMG,YAAYG,MAAM,IAC1FN,EACT,IAAK,MAAO,MAAO,CAAEE,UAAWF,EAAME,UAAUI,MAAM,GAAIH,YAAaH,EAAMG,aAC7E,IAAK,QAAS,MAAO,CAAED,UAAW,GAAIC,YAAa,MAIhD,SAASI,GAAaC,GAC3B,IAAIA,EAAMjC,OAAV,CAEA,IAAQ8B,EAAmBG,EAAnBH,KAAMI,EAAaD,EAAbC,SACdD,EAAME,SAAWC,GAAUN,GAC3BG,EAAMjC,OAASiC,EAAME,SAASb,KAAf,2CAAoB,WAAMa,GAAN,uGACZzN,GAAAA,EAAAA,OADY,cAC3B2N,EAD2B,gBAETC,GAAIH,GAFK,cAE3BI,EAF2B,SAIPC,GACxBH,EAAQE,EAAUE,SAClBC,GAAaH,EAAUI,iBAAkBN,GACzCO,GAAcL,EAAUM,YACxBC,GAAcP,EAAUQ,cACxBC,GAAkBT,EAAUM,YAC5BI,GAAoBV,EAAUM,aAVC,eAI1BjH,EAJ0B,KAIhBsH,EAJgB,uBAa1B,CAAEpB,KAAAA,EAAM9B,OAAQ,CAAEkC,SAAAA,EAAUC,SAAAA,EAAUvG,SAAAA,EAAUsH,MAAAA,KAbtB,2CAApB,wDAiBjB,I,oCAAMd,GAAY,SAACN,GAAD,OAAiC,IAAIX,SAAQ,SAAAgC,GAC7D,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,gBAAGjJ,EAAH,EAAGA,OAAH,OACjB8I,EAAQ9I,EAAQ2F,SAClBoD,EAAOG,cAAczB,OAEjB0B,GAAiB,SAACC,GAAD,OAAyC,IAAItC,SAAQ,SAAAgC,GAC1E,IAAMO,EAAM,IAAIC,MAChBD,EAAIE,OAAS,gBAAGvJ,EAAH,EAAGA,OAAH,OACX8I,EAGJ,SAA0B1S,GACxB,IAAMoT,EAASC,SAASC,cAAc,UAAWC,EAAUH,EAAOI,WAAW,MAI7E,OAHAJ,EAAO9G,MAAQtM,EAAMsM,MACrB8G,EAAO3E,OAASzO,EAAMyO,OACtB8E,EAAQE,UAAUzT,EAAO,EAAG,EAAGA,EAAMsM,MAAOtM,EAAMyO,QAC3C8E,EAAQG,aAAa,EAAG,EAAG1T,EAAMsM,MAAOtM,EAAMyO,QAR3CkF,CAAiB/J,KAC3BqJ,EAAI1E,IAAMyE,MASZ,SAASY,GAAkBC,GAEzB,IAAMT,EAASC,SAASC,cAAc,UAMtC,OALAF,EAAO9G,MAAQuH,EAAUvH,MACzB8G,EAAO3E,OAASoF,EAAUpF,OAG1B2E,EAAOI,WAAW,MAAOM,aAAaD,EAAW,EAAG,GAC7CT,EACR,SAEcvB,GAAAA,GAAAA,OAAAA,GAAAA,MAAAA,KAAAA,WAAAA,SAAAA,KAAf,OAAeA,IAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,KAAAA,MAAf,WAAmBH,GAAnB,iHAC0BqB,GAAerB,GADzC,cACQmC,EADR,OAGQvH,EAAQuH,EAAUvH,MAAOyH,EAAaC,KAAKC,MAAMJ,EAAUpF,OAAS,GACpEyF,EAAa,CAAEC,UAAW,CAAE5O,IAAKwO,EAAYK,KAAM,EAAG9H,MAAAA,EAAOmC,OAAQsF,IAErEM,EAAS,CACbC,GAAeC,GAASV,EAAW,CAAC,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,CAAEW,KAAM,KAAMC,OAAQ,SAC3FH,GAAeC,GAASV,EAAW,CAAC,GAAI,GAAI,IAAK,CAAC,IAAK,IAAK,KAAM,CAAEY,OAAQ,QAAUP,GACtFI,GAAeC,GAASV,EAAW,CAAC,GAAI,IAAK,IAAK,CAAC,IAAK,IAAK,KAAM,CAAEW,KAAM,KAAMC,OAAQ,QAAUP,IAG/FlC,EAAW0C,GAAcb,EAAU3E,KAAM2E,EAAUvH,MAAOuH,EAAUpF,QAZ5E,SAa6DiC,QAAQiE,IAAIN,GAbzE,sCAaSjC,EAbT,KAaqBE,EAbrB,KAamCJ,EAbnC,uBAcS,CAAEE,WAAAA,EAAYE,aAAAA,EAAcJ,iBAAAA,EAAkBF,SAAAA,IAdvD,4EAgBesC,GAAAA,GAAAA,OAAAA,GAAAA,MAAAA,KAAAA,WAAAA,SAAAA,KAAf,OAAeA,IAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,KAAAA,MAAf,WAA8BT,GAA9B,oGAAoDtS,EAApD,oCAAkFkC,EAC1E2P,EAASQ,GAAkBC,GADnC,SAEoBlE,GAAWiF,OAAO,MAAlB,2CAAyB,WAAO/E,GAAP,uFAC5BA,EAD4B,8BACjBgF,OAAO,YAAazB,EAAQ7R,GADX,mFAAzB,uDAFpB,cAEQuT,EAFR,yBAISA,EAAI5F,KAAK6F,MAAMtT,KAAI,SAAAuT,GAAI,OAAIA,EAAK/U,SAJzC,oEAOO,SAAS8R,GAAiBH,EAA2BI,EAAuBiD,EAAkCC,EAAwB5J,EAAsB3F,EAAgCwP,GAGjM,IAHoT,EAG9SC,GAAc,OAAO,IAAIC,IAAJ,kBAA4BJ,GAA5B,CAAyC,0BAEhEK,GAAa,EAAGC,EAA6B,CAAC,CAGhDC,OAAQ,sBAAuBhR,OAAQ,EAAGiR,MAAO,EAAGhN,QAAS,SAAU4C,YAAa,KAAMC,SAAU,GACpGoK,SAAU,GAAIC,MAAM,EAAOC,SAAS,IAIhCC,GAAcC,EAAAA,GAAAA,GAAaC,EAAAA,IAAqB,SAAAvR,GACpD,IAAIwR,EAAQ,EACRf,EAAY5I,OAEd2J,IADc,OAAIf,GAAaxJ,QAAO,SAAC2B,EAAO3I,GAAR,OAAgB2I,GAASwE,EAAOnN,GAAKD,OAAOvB,SAASuB,GAAU,EAAI,KAAI,GAC5FyQ,EAAY5I,MAE/B,GAAIf,EAASxI,OAAQ,CACnB,IAAMsK,EAAQ9B,EAASG,QAAO,SAAC2B,EAAO6I,GAAR,OAC5B7I,GAASrB,GAAAA,GAAAA,gBAAyBkK,EAAQvU,IAAmBuU,EAAQlW,MAAOyE,GAAQ1B,OAAS,EAAI,KAAI,GACvGkT,GAAS5I,EAAQ9B,EAASxI,OAAS,EAErC,OAAOkT,KAxB2S,WA4B9RjN,EAAAA,IA5B8R,IA4BpT,2BAAmC,CAAC,IAAD,EAAxBN,EAAwB,mBACPsD,GAAAA,GAAAA,cAAuBtD,IADhB,qBAO/B,IAP+B,IACtB4C,EADsB,QAEzB6K,GAAiBhB,EAASiB,IAAI1N,GAAW,EAAI,IAAM9C,EAAawQ,IAAI9K,GAAe,EAAI,GACvF+K,EAAyBjB,EAC5B/M,QAAO,SAAArI,GAAK,MAAmB,MAAfA,EAAM2L,MAA6C,MAA7B5F,GAAAA,GAAAA,KAAYuF,MAClD5J,KAAI,SAAA1B,GAAK,OAAIA,EAAMsW,iBALS,aAO1B,sBAAOC,EAAP,KAAqBC,EAArB,KACG/R,EAASiF,SAAS6M,GAClBE,EAAUpB,EAAehN,QAAO,SAAAoN,GAAM,OAAI5D,EAAO4D,GAAQhR,OAAOvB,SAASuB,MACzEiS,EAAcP,EAAgBK,EAEpC,GAAIE,EAAc,EAAInB,EAAW,iBAZJ,iBAcMc,GAdN,2BAclBM,EAdkB,QAerBC,EAAS5K,GAAAA,GAAAA,eAAwBvH,EAAQ6G,GACzCoK,EAAQzB,KAAK/J,IAAI,EAAG0M,EAAOC,WAAU,SAAAnB,GAAK,OAAIA,GAASiB,MACvDG,EAAcF,EAAOlB,GACrBqB,EAAmBL,GAAeI,IAAgBH,EAAuB,EAAI,GAlBxD,WAoBNF,GApBM,IAoB3B,2BAA8B,CAAC,IAApBhB,EAAmB,QACtBQ,EAAQc,GAAoB7B,EAAYkB,IAAIX,GAAU,EAAI,GAC5DQ,GAASV,IACPU,EAAQV,IAAWC,EAAgB,IACvCD,EAAYU,EACZT,EAAcwB,KAAK,CACjBvB,OAAAA,EAAQhR,OAAAA,EAAQiR,MAAAA,EAAOhN,QAAAA,EAAS4C,YAAAA,EAAaC,SAAU,GAAIoK,SAAU,GAAIC,MAAM,EAAOC,SAAS,MA1B1E,gCAc7B,2BAA4D,IAd/B,8BA+B7B,GAAIa,GAAenB,EAAW,CAC5B,IAD4B,aAEPkB,GAFO,IAE5B,2BAA8B,CAAC,IAApBhB,EAAmB,QACtBQ,EAAQS,GAAexB,EAAYkB,IAAIX,GAAU,EAAI,GAEvDQ,EAAQV,IAAWC,EAAgB,IACvCD,EAAYU,EACZT,EAAcwB,KAAK,CACjBvB,OAAAA,EAAQhR,OAAAA,EAAQiR,MAPN,EAOahN,QAAAA,EAAS4C,YAAAA,EAAaC,SAAU,GAAIoK,SAAU,GAAIC,MAAM,EAAOC,SAAS,KARvE,iCAxBhC,MAAoDvR,OAAOC,QAAQuR,GAAnE,eAAiF,KANnF,2BAA4D,IAD3B,gCA5BiR,8BA2EpT,IAAMpD,EAAQ,GACRuE,EAAS,CACbxB,OAAQ,IAAIH,IAAO7Q,OAAQ,IAAI6Q,IAAOI,MAAO,IAAIJ,IAAO5M,QAAS,IAAI4M,IAAOhK,YAAa,IAAIgK,IAAOwB,YAAa,IAAIxB,KAGjH9F,EAASgG,EAAc,GAAI0B,EAAoBlL,GAAAA,GAAAA,cAAuBwD,EAAOlE,YAAakE,EAAO/K,OAAQ+K,EAAOkG,OACtHlG,EAAOjE,SAAWA,EAASlD,QAAO,SAAC6N,EAASnJ,GAAV,OAChCmJ,EAAQvU,MAAQ6N,EAAOlE,aACvBC,EAASgG,MAAM,EAAGxE,GAAGoK,OAAM,SAAAC,GAAK,OAAIA,EAAMzV,MAAQuU,EAAQvU,UAC5D,IAAK,IAAIoL,EAAIyC,EAAOjE,SAASxI,OAAQgK,EAAI,EAAGA,IAC1CyC,EAAOjE,SAASyL,KAAK,CAAErV,IAAK,GAAI3B,MAAO,IAEzC,cAAoBwV,EAApB,eAAmC,CAA9B,IAAM4B,EAAK,KACdH,EAAOxB,OAAQ4B,IAAID,EAAM3B,QACzBwB,EAAOxS,OAAQ4S,IAAID,EAAM3S,QACzBwS,EAAOvB,MAAO2B,IAAID,EAAM1B,OACxBuB,EAAOvO,QAAS2O,IAAID,EAAM1O,SAC1BuO,EAAO3L,YAAa+L,IAAID,EAAM9L,aAGhC,SAASgM,EAAetX,EAAUuX,EAAmBrX,GACnD,OAAO,2CAAWqX,EAAX,cAA0B,SAAC,KAAD,CAAW3U,MAAM,QAAjB,SAA0B1C,EAAKF,QAMlE,SAASwX,EAAgBxX,EAAUuX,EAAmBrX,GACpD,OAAO,4CAAYqX,EAAZ,KAAkB,SAAC,KAAD,CAAW3U,MAAM,UAAjB,SAA4B1C,EAAKF,QAE5D,SAASyX,EAAgBzX,EAAUuX,EAAmBrX,GACpD,OAAO,4CAAYqX,EAAZ,KAAkB,SAAC,KAAD,CAAW3U,MAAM,UAAjB,SAA4B1C,EAAKF,QAG5D,SAAS0X,EAAQ/V,EAA4BgW,EAAqBJ,EAAmBrX,GACnF,IAAM0X,EAAc,IAAItC,KAAI,OAAI2B,EAAOtV,IAAO0G,QAAO,SAAArI,GAAK,OAAI2X,EAAUvB,IAAIpW,OACxE4X,EAAYtL,KAAO,EACrBoG,EAAM/Q,GAdV,SAA0B3B,EAAU2X,EAAgBJ,EAAmBrX,GACrE,OAAO,6CAAaqX,EAAb,KAAmB,SAAC,KAAD,CAAW3U,MAAM,QAAjB,SAA0B1C,EAAKF,KAAlD,kBACL2X,EAAUtP,QAAO,SAAAlG,GAAC,OAAIA,IAAMnC,KAAO0B,KAAI,SAAC1B,EAAOsD,GAAR,OAAkB,iCAAE,uBAAIA,EAAQ,EAAI,IAAM,MAAO,SAAC,KAAD,CAAWV,MAAM,UAAjB,SAA4B1C,EAAKF,cAY5G6X,CAAcrI,EAAO7N,IAAR,OAAkBgW,GAAYJ,EAAMrX,GAClC,IAArB0X,EAAYtL,KACnBoG,EAAM/Q,GAAO6V,EAAahI,EAAO7N,GAAM4V,EAAMrX,GACtC+W,EAAOtV,GAAM2K,KAAO,EAC3BoG,EAAM/Q,GAAO2V,EAAY9H,EAAO7N,GAAM4V,EAAMrX,GAE5CwS,EAAM/Q,GAAO8V,EAAajI,EAAO7N,GAAM4V,EAAMrX,GAGjDwX,EAAQ,SAAUxC,EAAa,OAAO,SAAClV,GAAD,OAAW6R,EAAO7R,GAAOuX,QAC/DG,EAAQ,SAAUzF,EAAU,UAAU,SAACjS,GAAD,OAAW,gCAAGA,EAAH,IAAqB,IAAVA,EAAc,QAAU,aACpF0X,EAAQ,UAAWvC,EAAU,QAAQ,SAACnV,GAAD,OAAW,8BAAGgM,GAAAA,GAAAA,SAAkBhM,QACrE0X,EAAQ,cAAe9R,EAAc,aAAa,SAAC5F,GAAD,OAAW,8BAAG+F,GAAAA,GAAAA,OAAc/F,QAC9E0S,EAAMnH,UAAW,8BAAGiE,EAAOjE,SAASlD,QAAO,SAAA6N,GAAO,MAAoB,KAAhBA,EAAQvU,OAAYD,KAAI,SAACwU,EAASnJ,GAAV,OAC5E,yBAAcyK,EAAatB,EAAS,YAAY,SAAClW,GAAD,OAAW,gCAAG+F,GAAAA,GAAAA,OAAc/F,EAAM2B,KAAvB,KAA8BqL,EAAAA,GAAAA,IAAiBhN,EAAMA,MAAO+F,GAAAA,GAAAA,KAAY/F,EAAM2B,MAAOoE,GAAAA,GAAAA,KAAY/F,EAAM2B,YAAxJoL,QAGZ,IAAM+K,EAAe,SAAC9X,GAAD,OAAW,iCAAGgN,EAAAA,GAAAA,IAAiBhN,EAAO+F,GAAAA,GAAAA,KAAYyJ,EAAOlE,cAAevF,GAAAA,GAAAA,KAAYyJ,EAAOlE,iBAchH,OAbI8J,EAAe2C,MAAK,SAAA/X,GAAK,OAAIA,EAAMsW,gBAAkBY,KACnDtR,EAAawQ,IAAI5G,EAAOlE,cAC1BoH,EAAMgD,MAAQ8B,EAAahI,EAAOkG,MAAO,SAAS,SAAC1V,GAAD,MAAW,IAAMA,KACnE0S,EAAMoE,YAAcU,EAAaN,EAAmB,kBAAmBY,KAEvEpF,EAAMgD,MAAQ+B,EAAajI,EAAOkG,MAAO,SAAS,SAAC1V,GAAD,MAAW,IAAMA,KACnE0S,EAAMoE,YAAcW,EAAaP,EAAmB,kBAAmBY,KAGzEpF,EAAMgD,MAAQ4B,EAAY9H,EAAOkG,MAAO,SAAS,SAAC1V,GAAD,MAAW,IAAMA,KAClE0S,EAAMoE,YAAcQ,EAAYJ,EAAmB,kBAAmBY,IAGjE,CAACtI,EAAQkD,GAGlB,SAASR,GAAaQ,EAAiBb,GACrC,IADqF,EAC/EmG,EAAU,IAAI1C,IAAoB,IAD6C,WAElE5C,GAFkE,IAErF,2BACE,OADSxS,EACT,mBAAkB+X,EAAAA,IAAlB,+BACE,KADStW,EACT,SAAIuW,EAAAA,GAAAA,IAAgBhY,EAAKiY,QAAQ,MAAO,IAAKtG,EAAOlQ,GAAKkD,QAAQsT,QAAQ,MAAO,MAAQ,GACtFH,EAAQX,IAAI1V,IAFhB,0BAAAyW,MAHmF,8BAMrF,OAAOJ,EAET,SAASrD,GAAc0D,EAA2B9L,EAAemC,GAG/D,IAFA,IAAI4J,EAAID,EAAQE,EAAa,EAAGC,EAAiB,EAC3CR,EAAU,IAAI1C,IAAY,IACvBmD,EAAI,EAAGA,EAAI/J,EAAQ+J,IAAK,CAE/B,IADA,IAAIC,EAAO,EAAGC,GAAS,EACdC,EAAI,EAAGA,EAAIrM,EAAOqM,IAAK,CAC9B,IAAI7L,EAAsB,GAAjB0L,EAAIlM,EAAQqM,GAEjBC,GAAiB,CAAEnJ,EADf4I,EAAEvL,GACgB4C,EADR2I,EAAEvL,EAAI,GACKvF,EADG8Q,EAAEvL,EAAI,IACJ0C,IAC3BkJ,IACHA,GAAS,EACTD,KAGFC,GAAS,EAITJ,IAAeG,GACjBH,EAAaG,EACbF,EAAiB,GACRD,KACTC,GACsB,IAAIR,EAAQX,KAAInK,EAAAA,GAAAA,IAAMqL,EAAY,EAAG,IAG/D,OAAOP,EAET,SAASa,GAAiBC,EAAQC,GAAwB,IAAhBC,EAAe,uDAAH,EAC9CC,EAAiB,SAAC1R,EAAGC,GAAJ,OAAWyM,KAAKiF,IAAI3R,EAAIC,IAAMwR,GACrD,OAAOC,EAAeH,EAAOpJ,EAAGqJ,EAAOrJ,IACrCuJ,EAAeH,EAAOnJ,EAAGoJ,EAAOpJ,IAChCsJ,EAAeH,EAAOtR,EAAGuR,EAAOvR,GAEpC,SAAS4K,GAAcM,GACrB,IADoD,EAC9CsF,EAAU,IAAI1C,IADgC,WAEjC5C,GAFiC,IAEpD,2BACE,OADSxS,EACT,mBAAkB8I,EAAAA,IAAlB,+BACE,KADSrH,EACT,SAAIuW,EAAAA,GAAAA,IAAgBhY,EAAKiY,QAAQ,MAAO,IAAKnM,GAAAA,GAAAA,SAAkBrK,GAAKwW,QAAQ,MAAO,MAAQ,GACzFH,EAAQX,IAAI1V,IAFhB,0BAAAyW,MAHkD,8BAMpD,OAAOJ,EAET,SAASxF,GAAkBE,GACzB,IAD4D,EACtDsF,EAAU,IAAI1C,IAAiB,IADuB,WAEzC5C,GAFyC,IAE5D,2BACE,OADSxS,EACT,mBAAkB4F,GAAAA,GAAlB,+BAAmC,CAAC,IAAD,MAAxBnE,EAAwB,QAC7BzB,EAAKiZ,cAAcjW,SAAnB,oBAA4B6C,GAAAA,GAAAA,OAAcpE,UAA1C,aAA4B,EAAoBwX,qBAAhD,QAAiE,KACnEnB,EAAQX,IAAI1V,GAEVA,EAAIuB,SAAS,WAAYgV,EAAAA,GAAAA,IAAgBhY,EAAKiY,QAAQ,MAAO,KAAK,UAACpS,GAAAA,GAAAA,OAAcpE,UAAf,QAAuB,IAAIwW,QAAQ,MAAO,MAAQ,GACtHH,EAAQX,IAAI1V,IALhB,0BAAAyW,MAH0D,8BAU5D,OAAOJ,EAET,SAASvF,GAAoBC,GAC3B,IADwF,EAClFsF,EAAsD,GAD4B,WAErEtF,GAFqE,IAExF,2BAA0B,CAAC,IAAhBxS,EAAe,QACpBkZ,EAAQ,mBACRC,EAAQD,EAAME,KAAKpZ,GACnBmZ,GAAOrB,EAAQhB,KAAK,CAAEV,cAAe7M,WAAW4P,EAAM,GAAGlB,QAAQ,KAAM,KAAKA,QAAQ,UAAW,MAAOxM,KAAM,OAEhH0N,GADAD,EAAQ,6BACME,KAAKpZ,KACR8X,EAAQhB,KAAK,CAAEV,cAAe5M,SAAS2P,EAAM,GAAGlB,QAAQ,YAAa,QARM,8BAUxF,OAAOH,EAET,SAAS1F,GAAcI,GACrB,IADkD,EAC5C6G,EAAsB,GADsB,WAEjC7G,GAFiC,yBAEzCxS,EAFyC,QAGhDA,EAAOA,EAAKiY,QAAQ,SAAU,IAAIA,QAAQ,KAAM,IAEhD/R,GAAAA,EAAAA,SAAuB,SAAAzE,GACrB,IAAM4V,EAAOxR,GAAAA,GAAAA,OAAcpE,GAIrB0X,GAH6B,MAArBtT,GAAAA,GAAAA,KAAYpE,GACxB,IAAI6X,OAAOjC,EAAO,gCAAiC,MACnD,IAAIiC,OAAOjC,EAAO,qCAAsC,OACtC+B,KAAKpZ,GACrBmZ,GACFE,EAAQvC,KAAK,CAAErV,IAAAA,EAAK3B,MAAOyJ,WAAW4P,EAAM,GAAGlB,QAAQ,KAAM,KAAKA,QAAQ,UAAW,YAV3F,2BAAyB,IAFyB,8BAelD,OAAOoB,EAAQhI,MAAM,EAAG,GAG1B,SAASiD,GAASiF,EAAsBX,EAAeC,EAAevX,GAMpE,IALA,MAA2CA,EAAnCkT,OAAAA,OAAR,MAAiB,MAAjB,IAA2ClT,EAAnBiT,KAAAA,OAAxB,MAA+B,QAA/B,EACM6D,EAAIoB,kBAAkBC,KAAKF,EAAUtK,MACrC3J,EAAiB,QAAXkP,EAAkBkF,EAAiB,QAAXlF,EAAkBE,EAAiB,QAAXF,EACtDmF,EAAc,OAATpF,EAAeqF,EAAkB,WAATrF,EAC7BsF,EAAU9F,KAAKC,MAAMuF,EAAUlN,OAASkN,EAAU/K,OAAS,GAAK,GAC7D3B,EAAI,EAAGA,EAAIuL,EAAEvV,OAAQgK,GAAK,EAAG,CACpC,IAAM2C,EAAI4I,EAAEvL,GAAI4C,EAAI2I,EAAEvL,EAAI,GAAIvF,EAAI8Q,EAAEvL,EAAI,IACnC6H,GAAQpP,GAAOuH,EAAIgN,GAAaH,GAAO7M,EAAIgN,IAC9CrK,GAAKoJ,EAAO,IAAMpJ,GAAKqJ,EAAO,IAC9BpJ,GAAKmJ,EAAO,IAAMnJ,GAAKoJ,EAAO,IAC9BvR,GAAKsR,EAAO,IAAMtR,GAAKuR,EAAO,GAC1Bc,EAAIvB,EAAEvL,GAAKuL,EAAEvL,EAAI,GAAKuL,EAAEvL,EAAI,GAAK,EAC5B+M,IACPxB,EAAEvL,GAAK,IAAM2C,EACb4I,EAAEvL,EAAI,GAAK,IAAM4C,EACjB2I,EAAEvL,EAAI,GAAK,IAAMvF,GAGnB8Q,EAAEvL,GAAKuL,EAAEvL,EAAI,GAAKuL,EAAEvL,EAAI,GAAK,IAGjC,OAAO,IAAIiN,UAAU1B,EAAGmB,EAAUlN,MAAOkN,EAAU/K,QCvWrD,IACMuL,GAAmB,IAAI3E,IAAIlP,GAAAA,GAcjC,SAAS8T,GAAgB9Q,EAAoC+Q,GAC3D,OAAQA,EAAOnX,MACb,IAAK,QAAS,OACd,IAAK,UACH,IAAQM,EAAmB6W,EAAnB7W,MAAO4S,EAAYiE,EAAZjE,QACTkE,EAAWlE,EAAQvU,IAAMyH,EAAOmC,SAASsL,WAAU,SAAAwD,GAAO,OAAIA,EAAQ1Y,MAAQuU,EAAQvU,QAAQ,EACpG,IAAkB,IAAdyY,GAAmBA,IAAa9W,EAClC8F,EAAOmC,SAASjI,GAAS4S,MAD3B,OAII,CAAC9M,EAAOmC,SAAS6O,GAAWhR,EAAOmC,SAASjI,IAD7C8F,EAAOmC,SAASjI,GAHnB,KAG2B8F,EAAOmC,SAAS6O,GAH3C,KAKA,OAAO,UAAKhR,GAEd,IAAK,YAAa,OAAO+Q,EAAO/O,SAChC,IAAK,SAAU,OAAO,kBAAKhC,GAAW+Q,EAAO/O,WAIjD,IAAMkP,IAAazS,EAAAA,EAAAA,IAAO,QAAPA,CAAgB,CACjCuE,QAAS,SAGI,SAASmO,GAAT,GACyF,IAAD,QAD9DC,iBAAAA,OAC8D,MAD3C,GAC2C,EADvCC,EACuC,EADvCA,WACuC,IAD3BC,YAAAA,OAC2B,aADNC,WAAAA,OACM,SAC7FxW,GAAMC,EAAAA,EAAAA,GAAe,YAArBD,EAEFH,GAAiBC,EAAAA,GAAAA,IAAW,kBAAMC,GAAAA,EAAAA,SAAsB,IAEtD0W,GAAaC,EAAAA,EAAAA,YAAWC,GAAAA,GAAxBF,SAER,GAAwBzR,EAAAA,EAAAA,WAAS,GAAjC,eAAO4R,EAAP,KAAaC,GAAb,KAEA,IAA0CC,EAAAA,GAAAA,KAA1C,iBAAOC,GAAP,MAAsBC,GAAtB,OACAxR,EAAAA,EAAAA,YAAU,kBAAMiR,EAASQ,KAAKC,UAAUF,MAAmB,CAACP,EAAUO,KAEtE,QAA2CG,EAAAA,EAAAA,YAAWpB,QAAiBxW,GAAvE,iBAAO6X,GAAP,MAAuBC,GAAvB,MACMpQ,IAAW3J,EAAAA,EAAAA,UAAQ,kBAAM8Z,KAAkBE,EAAAA,GAAAA,IAAiBF,MAAiB,CAACA,KAEpF,IAAkCpS,EAAAA,EAAAA,WAAS,GAA3C,iBAAOwE,GAAP,MAAkB+N,GAAlB,MAEA,IAAoDJ,EAAAA,EAAAA,YAAWtK,GAAc,CAAEG,UAAW,GAAIC,YAAa,KAA3G,0BAASD,GAAT,GAASA,UAAWC,GAApB,GAAoBA,YAAeuK,GAAnC,MACMC,GAAiBzK,GAAU,GAC3B0K,GAAmBzK,GAAY,GAE/B0K,IAAqB7X,EAAAA,GAAAA,IAAW,yBAAM4X,SAAN,IAAMA,QAAN,EAAMA,GAAkBlK,WAAU,QAACkK,SAAD,IAACA,QAAD,EAACA,GAAkBlK,WACrFoK,IAAmB9X,EAAAA,GAAAA,IAAW,yBAAM4X,SAAN,IAAMA,QAAN,EAAMA,GAAkBrM,SAAQ,QAACqM,SAAD,IAACA,QAAD,EAACA,GAAkBrM,SAEjFwM,GAAY7K,GAAUpO,OAASqO,GAAYrO,OAE3C9C,GAAK,iBAAG2b,SAAH,IAAGA,QAAH,EAAGA,GAAgBjK,gBAAnB,QAA+BmK,GAC1C,UAA+CF,SAA/C,IAA+CA,GAAAA,GAAkB,GAA/CK,GAAlB,GAAQ7Q,SAA6BsH,GAArC,GAAqCA,MAG/BwJ,KAAmB,OAAC9Q,SAAD,IAACA,KAAAA,GAAUuK,WAEpChM,EAAAA,EAAAA,YAAU,YACHyB,IAAY6Q,IACfT,GAAiB,CAAExY,KAAM,YAAaoI,SAAU6Q,OACjD,CAAC7Q,GAAU6Q,GAAmBT,MAEjC7R,EAAAA,EAAAA,YAAU,WACR,IAAMwS,EAAgBlI,KAAKmI,IA5EmB,GA4EKjL,GAAUpO,OA5EtC,EA4EkEqO,GAAYrO,QAC/FsZ,EAAoBF,IAAkB/K,GAAY,GAAG5B,OAC3D4B,GAAYG,MAAM,EAAG4K,GAAeG,QAAQ9K,IACxC6K,GACFV,GAAc,CAAE3Y,KAAM,iBACvB,CAACmO,GAAUpO,OAAQqO,MAEtBzH,EAAAA,EAAAA,YAAU,WACJoS,IACFJ,IAAc,QAAE3Y,KAAM,aAAgB+Y,OACvC,CAACA,GAAkBJ,KAEtB,IAAMY,IAAchT,EAAAA,EAAAA,cAAY,SAAC8H,GAC/B2J,IAAQ,GACRW,GAAc,CAAE3Y,KAAM,SAAUqO,OAAO,OAAIA,GAAO3P,KAAI,SAAA4P,GAAI,MAAK,CAAEA,KAAAA,EAAMI,SAAUJ,EAAKiG,aACrF,CAACoE,GAAeX,KACbwB,IAAajT,EAAAA,EAAAA,cAAY,kBAAMoS,GAAc,CAAE3Y,KAAM,YAAY,CAAC2Y,MAExEhS,EAAAA,EAAAA,YAAU,WACR,IAAM8S,EAAY,SAAC7S,GAAD,OAAY2S,GAAY3S,EAAE8S,cAAcrL,QAE1D,OADAqJ,GAAeiC,OAAOC,iBAAiB,QAASH,GACzC,WACD/B,GAAaiC,OAAOE,oBAAoB,QAASJ,MAEtD,CAACF,GAAa7B,IAEjB,IAAMoC,IAAWvT,EAAAA,EAAAA,cACf,SAAAK,GACE2S,GAAY3S,EAAEC,OAAOwH,OACrBzH,EAAEC,OAAO7J,MAAQ,OAEnB,CAACuc,KAGH,IAA+G9a,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EACrHsb,EAAmB7B,IAAiBV,GAAoBI,EAASQ,KAAK4B,IAAIxC,GAChF,GAAIuC,EAAkB,MAAO,CAAEE,IAAKF,EAAkBG,QAAS,QAC/D,QAAiBxZ,IAAb0H,GAAwB,MAAO,CAAE6R,SAAKvZ,EAAWwZ,QAAS,IAC9D,MAAiChC,IAAiBN,EAASQ,KAAK+B,SAAS/R,IAAjEgS,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SACpB,MAAO,CAAEJ,IAAG,UAAEG,EAAW,UAAb,QAAmBC,EAAS,GAAIH,QAA+B,IAAtBE,EAAWra,OAAe,YAAc,aAC5F,CAACqI,GAAUoP,EAAkBI,EAAUM,KANlC+B,GAAR,GAAQA,IAAKC,GAAb,GAAaA,QAQb,IAAwCzb,EAAAA,EAAAA,UAAQ,WAC9C,IAAK2J,GAAU,MAAO,CAAEA,cAAU1H,EAAW4Z,OAAQ,IACrD,IAAMC,GAAYC,EAAAA,GAAAA,IAAepS,GAAUoP,GAK3C,OAJIyC,KACFM,EAAUnS,SAASuK,SAAWsH,GAAItH,SAClC4H,EAAUnS,SAASyK,QAAUoH,GAAIpH,SAE5B0H,IACN,CAACnS,GAAUoP,EAAkByC,KARdQ,GAAlB,GAAQrS,SAAqBkS,GAA7B,GAA6BA,QAY7B3T,EAAAA,EAAAA,YAAU,WACiB,QAArB6Q,IACFQ,IAAQ,GACRQ,GAAiB,CAAExY,KAAM,WAE3B,IAAM+Z,EAAmBvC,GAAoBU,IAAiBN,EAASQ,KAAK4B,IAAIxC,GAC5EuC,IACF/B,IAAQ,GACRQ,GAAiB,CAAExY,KAAM,YAAaoI,UAAUsS,EAAAA,GAAAA,IAAUX,QAE3D,CAACvC,EAAkBI,EAAUM,KAEhC,IAAMyC,GAAQvS,GAAQ,OAAGpH,QAAH,IAAGA,OAAH,EAAGA,EAAiBoH,GAASqK,aAAU/R,EACvDka,IAAQrU,EAAAA,EAAAA,cAAY,WACd,OAAVkR,QAAU,IAAVA,GAAAA,IACAkB,GAAc,CAAE3Y,KAAM,QACtBwY,GAAiB,CAAExY,KAAM,YACxB,CAACyX,EAAYe,KACVqC,IAAStU,EAAAA,EAAAA,cAAY,SAACxC,GAAkC,IAAD,IACrD+W,EAAW/W,EAAS0O,OAASzR,EAAgB+C,EAAS0O,QAAUkI,GAEtE,SAASI,EAAQ/d,EAAsB2X,EAAyBqG,GAC9D,OAAQhe,GAAS2X,EAAUzU,SAASlD,GAAUA,EAAvC,OAAgDge,QAAhD,IAAgDA,EAAAA,EAAUrG,EAAU,GAGzE5Q,EAAS0O,SACX1O,EAAStC,OAASsZ,EAAI,OAAC3S,SAAD,IAACA,QAAD,EAACA,GAAU3G,OAAQqZ,EAASrZ,OAAQwP,KAAK/J,IAAL,MAAA+J,MAAI,OAAQ6J,EAASrZ,UAC/EsC,EAAS2B,QAAUqV,EAAI,OAAC3S,SAAD,IAACA,QAAD,EAACA,GAAU1C,QAASoV,EAASG,QAElDlX,EAAStC,SACXsC,EAAS2O,MAAT,iBAAiBtK,SAAjB,IAAiBA,QAAjB,EAAiBA,GAAUsK,aAA3B,QAAoC,GAClC3O,EAAS2O,QACX3O,EAAS2O,OAAQxI,EAAAA,GAAAA,IAAMnG,EAAS2O,MAAO,EAAG,aAAK3O,EAAStC,cAAd,QAAwB2G,GAAU3G,UAC1EsC,EAAS2B,UACX3B,EAASuE,YAAcyS,EAAI,OAAC3S,SAAD,IAACA,QAAD,EAACA,GAAUE,YAAaU,GAAAA,GAAAA,cAAuBjF,EAAS2B,WAEjF3B,EAASuE,cACXvE,EAASwE,SAAW,CAAC,EAAG,EAAG,EAAG,GAAG7J,KAAI,SAAAqL,GAAC,OACnC3B,IAAYA,GAASG,SAASwB,GAAGpL,MAAQoF,EAASuE,YAAeF,GAAUG,SAASwB,GAAK,CAAEpL,IAAK,GAAI3B,MAAO,OAEhHwb,GAAiB,CAAExY,KAAM,SAAUoI,SAAUrE,MAC5C,CAACqE,GAAUpH,EAAgB2Z,GAAOnC,KAC/BnQ,IAAa9B,EAAAA,EAAAA,cAAY,SAACjG,EAAe4S,GAC7CsF,GAAiB,CAAExY,KAAM,UAAWM,MAAAA,EAAO4S,QAAAA,MAC1C,CAACsF,KACE0C,IAAWZ,GAAOva,OAExB,UAAsDqI,SAAtD,IAAsDA,GAAAA,GAAY,GAAlE,MAAQ3G,OAAAA,QAAR,OAAiB,EAAjB,SAAoBiR,MAAAA,QAApB,OAA4B,EAA5B,SAA+BhN,QAAAA,QAA/B,OAAyC,SAAzC,GACA,GAAqD+U,GAAYzR,GAAAA,GAAAA,sBAA+ByR,GAAWxD,IAAoB,GAA/H,MAAQkE,kBAAAA,QAAR,OAA4B,EAA5B,SAA+BC,cAAAA,QAA/B,OAA+C,EAA/C,GACMC,GAAiBlN,GAAUpO,QAAUqO,GAAYrO,OACjDgL,IAAUxE,EAAAA,EAAAA,cACd,SAACK,GACKyU,IAAgBzU,EAAE0U,iBACtBtD,IAAQ,GACRP,MACC,CAAC4D,GAAgBrD,GAASP,IAEzBta,IAAQoB,EAAAA,EAAAA,KACRgd,IAAOC,EAAAA,EAAAA,GAAcre,GAAMse,YAAYC,GAAG,OAE1Cnb,GAAU6H,GAAW5H,EAAAA,GAAAA,MAAwB,SAAAC,GAAG,OAAI2H,GAASE,YAAYpI,SAASO,WAAQC,EAC1Fd,GAAQwI,GAAQ,OAClB7H,SADkB,IAClBA,GAAAA,GAAW,UACX,UAEEob,IAAepV,EAAAA,EAAAA,cAAY,SAACkM,GAAD,OAAiCoI,GAAO,CAAEpI,OAAQA,MAA6B,CAACoI,KAC3Ge,IAAerV,EAAAA,EAAAA,cAAY,SAAC5H,GAChC,MAAY,KAARA,MAEAua,IAA+B,YAAZxT,IAAkC,sBAAR/G,GAAuC,2BAARA,GAA4C,qBAARA,GAAsC,wBAARA,KAGjJ,CAACua,GAAiBxT,KAGrB,OAAO,SAACmF,GAAA,EAAD,CAAcC,KAAMiN,EAAMhN,QAASA,GAAnC,UACL,SAAC,EAAA8Q,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,CAAUrc,QAAQ,cAAc6C,GAAI,CAAEgH,MAAO,OAAQmC,OAAQqM,EAAO,OAAS,MAAjG,UAA2G,UAAC/M,EAAA,EAAD,YACzG,SAACN,GAAD,CAAyBC,UAAWA,GAAWC,KAAM,kBAAM8N,IAAa,OACxE,SAACsD,EAAA,EAAD,CACEzW,OAAO,SAACwC,EAAA,EAAD,CAAO5G,EAAGA,EAAG6G,QAAQ,eAArB,6BACPmP,QAAQ,SAACjM,EAAA,EAAD,CAAa/F,WAAYkW,GAAgB7V,QAASuF,QAE5D,UAACE,EAAA,EAAD,CAAa1I,GAAI,CAAE6G,QAAS,OAAQ6S,cAAe,SAAUC,IAAK,GAAlE,WACE,UAAC1U,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAGyU,QAAS,CAAElU,GAAI,EAAGqD,GAAI,GAAlD,WAEE,UAAC9D,EAAA,GAAD,CAAMG,MAAI,EAACM,GAAI,EAAGmB,QAAQ,OAAO6S,cAAc,SAASC,IAAK,EAA7D,WAEE,UAAC7Z,EAAA,EAAD,CAAKE,GAAI,CAAE6G,QAAS,OAAQ8S,IAAK,EAAGE,GAAI,GAAxC,WAEE,SAAC,KAAD,CACE3Y,aAAW,EACX4Y,kBAAgB,EAChB/S,KAAK,QACLjF,UAAS,iBAAE+D,SAAF,IAAEA,QAAF,EAAEA,GAAUqK,cAAZ,QAAsB,GAC/BnO,aAAcqX,GACdpZ,GAAI,SAACpF,GAAD,MAAY,CACdyK,SAAU,EACV,uBAAwB,CACtB0U,wBAAyBnf,EAAMof,MAAMC,aACrCC,uBAAwBtf,EAAMof,MAAMC,gBAGxC9Y,YAAavC,EAAE,yBACfqC,QAASoY,MAGX,SAACxW,EAAD,CAAwB3D,OAAQ2G,GAAW3G,QAASf,EAAWzB,SAAU,SAAAyN,GAAC,OAAImO,GAAO,CAAEpZ,OAAQiL,KAAMrH,OAAQ,SAAAqH,GAAC,gBAAK,OAACiO,SAAD,IAACA,IAAD,UAACA,GAAOlZ,cAAR,iBAAC,EAAevB,gBAAhB,QAAC,SAA0BwM,KAAIvH,UAAWwV,SAI/J,UAACtY,EAAA,EAAD,CAAKD,UAAU,MAAMgH,QAAQ,OAA7B,WACE,SAACnD,EAAD,CAAuByW,GAAG,eAAepe,MAAM,QAAQoB,QAAQ,SAAS6C,GAAI,CAAEkI,WAAY,EAAG7C,SAAU,EAAG+U,GAAI,EAAGC,GAAI,GAAKC,OAAO,QAAQvT,KAAK,QAC5ItM,MAAO0V,GAAOvN,UAAWwV,GAAO/Q,YAAW,YAAgB,EAATnI,IAAcxC,SAAU,SAAA6d,GAAC,OAAIjC,GAAO,CAAEnI,MAAOoK,QAEjG,UAACzT,EAAA,EAAD,YACE,SAACvE,EAAA,EAAD,CAAQU,QAAS,kBAAMqV,GAAO,CAAEnI,MAAOA,GAAQ,KAAMvN,UAAWwV,IAAmB,IAAVjI,GAAzE,eACCjR,IAAS,OAAIwL,MAAMxL,GAAS,GAAGsb,QAAQre,KAAI,SAAAqL,GAAC,OAAI,EAAIA,KAAGrL,KAAI,SAAAqL,GAAC,OAAI,SAACjF,EAAA,EAAD,CAAgBU,QAAS,kBAAMqV,GAAO,CAAEnI,MAAO3I,KAAM5E,UAAWwV,IAASjI,KAAU3I,EAAnF,SAAuFA,GAA1EA,MAAyF,MACvK,SAACjF,EAAA,EAAD,CAAQU,QAAS,kBAAMqV,GAAO,CAAEnI,MAAOA,GAAQ,KAAMvN,UAAWwV,IAASjI,KAAoB,EAATjR,GAApF,sBAKJ,UAACY,EAAA,EAAD,CAAKD,UAAU,MAAMgH,QAAQ,OAA7B,WACE,SAAC3D,EAAD,CAAsBN,SAAU+T,KAAoByB,GAAOjV,QAASA,GAASzG,SAAU,SAAAyG,GAAO,OAAImV,GAAO,CAAEnV,QAAAA,QAC3G,SAAC2B,EAAA,EAAD,CAAW9E,GAAI,CAAE4H,EAAG,EAAGK,GAAI,EAAG5C,SAAU,GAAxC,UACE,SAAC,EAAAiU,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,CAAUxS,MAAM,QAApC,UACE,SAACzB,EAAA,EAAD,CAAYlI,MAAM,iBAAlB,SACQ,OAAL+a,SAAK,IAALA,IAAAA,GAAOqC,YAAY5U,GAAU1C,UAAW,6BAAM,SAACuX,EAAA,EAAD,CAASzR,IAAKmP,GAAMuC,UAAU9U,GAAU1C,WAA9C,WAA4DiV,SAA5D,IAA4DA,QAA5D,EAA4DA,GAAOqC,YAAY5U,GAAU1C,YAAmBvE,EAApJ,yDAOT,UAACkB,EAAA,EAAD,CAAKD,UAAU,MAAMgH,QAAQ,OAA7B,WACE,SAAC9D,EAAA,EAAD,CAAgBM,UAAmB,OAARwC,SAAQ,IAARA,IAAAA,GAAUE,YAActF,GAAAA,EAASoF,GAASE,kBAAe5H,EAClF6E,OAAO,uBAAI6C,GAAWrF,GAAAA,GAAAA,UAAiBqF,GAASE,aAAenH,EAA5C,kCAA8DgE,UAAWwV,GAAO/a,MAAOA,GAD5G,SAEGoJ,GAAAA,GAAAA,cAAuBtD,IAAShH,KAAI,SAAAye,GAAS,OAC5C,SAAC5f,EAAA,EAAD,CAA0B6C,UAAkB,OAARgI,SAAQ,IAARA,QAAA,EAAAA,GAAUE,eAAgB6U,EAAWhY,UAAkB,OAARiD,SAAQ,IAARA,QAAA,EAAAA,GAAUE,eAAgB6U,EAAW3X,QAAS,kBAAMqV,GAAO,CAAEvS,YAAa6U,KAA7J,UACE,SAAC,KAAD,CAAqBC,QAASD,KADjBA,SAInB,SAAC9V,EAAA,EAAD,CAAW9E,GAAI,CAAE4H,EAAG,EAAGK,GAAI,EAAG5C,SAAU,GAAxC,UACE,SAACE,EAAA,EAAD,CAAYlI,MAAM,iBAAlB,SACGwI,GAAQ,WAAM4B,EAAAA,GAAAA,IAAiBhB,GAAAA,GAAAA,cAAuBZ,GAASE,YAAa7G,GAAQiR,IAAQ3P,GAAAA,GAAAA,KAAYqF,GAASE,eAAzG,OAAyHvF,GAAAA,GAAAA,KAAYqF,GAASE,cAAiBnH,EAA/J,wCAMf,SAAC6F,GAAD,CAA8BG,MAAO+T,GAASjU,WAAYkU,GAAmBha,EAAGA,IAC/Ega,KAAsBC,KAAiB,SAACpU,GAAD,CAA8BE,KAAG,EAACC,MAAO+T,GAASjU,WAAYmU,GAAeja,EAAGA,IAGvHuW,IAAe,SAACrQ,EAAA,EAAD,WACd,SAAC4D,EAAA,EAAD,CAAa1I,GAAI,CAAE6G,QAAS,OAAQ6S,cAAe,SAAUC,IAAK,GAAlE,UAEE,UAAC,EAAAL,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,CAAUxS,MAAM,OAAOmC,OAAO,QAAlD,WACE,UAAClE,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAG2V,WAAW,SAAvC,WACE,SAAC7V,EAAA,GAAD,CAAMG,MAAI,EAACC,SAAU,EAArB,UACE,mBAAO0V,QAAQ,wBAAf,WACE,SAAChG,GAAD,CAAYiG,OAAO,UAAUb,GAAG,wBAAwB3d,UAAQ,EAACiB,KAAK,OAAOf,SAAU6a,MACvF,SAAChV,EAAA,EAAD,CAAQ1C,UAAU,OAAOwD,WAAW,SAAC4X,EAAA,EAAD,IAApC,iDAKJ,SAAChW,EAAA,GAAD,CAAMG,MAAI,EAAV,UACE,SAAC7C,EAAA,EAAD,CAAQlF,MAAM,OAAO2C,GAAI,CAAEgF,GAAI,EAAGkW,SAAU,GAAKjY,QAAS,kBAAMkT,IAAa,IAA7E,UAAoF,SAAC5Q,EAAA,EAAD,WAAY,SAAC,IAAD,CAAiBlH,KAAM8c,EAAAA,eAG1HzgB,KAAS,SAACoF,EAAA,EAAD,CAAK+G,QAAQ,OAAOuU,eAAe,SAAnC,UACR,SAACtb,EAAA,EAAD,CAAKD,UAAU,MAAMoJ,IAAKvO,GAAOsM,MAAM,OAAOqU,SAAU,IAAKlS,OAAO,OAAOH,IAAI,8CAEhFyN,GAAY,IAAK,SAAChO,EAAA,EAAD,CAAUzI,GAAI,CAAEsb,GAAI,GAApB,UAA0B,UAACrW,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAG2V,WAAW,SAAvC,WACxCzE,IAAkBC,KAAoB,SAACrR,EAAA,GAAD,CAAMG,MAAI,EAAV,UACtC,SAACmW,EAAA,EAAD,CAAkBxU,KAAK,WAEzB,SAAC9B,EAAA,GAAD,CAAMG,MAAI,EAACC,SAAU,EAArB,UACE,SAACE,EAAA,EAAD,WACE,2DAC6B,uBAAIkR,aAKrC,SAACxR,EAAA,GAAD,CAAMG,MAAI,EAAV,UACE,SAAC7C,EAAA,EAAD,CAAQwE,KAAK,QAAQ1J,MAAM,QAAQ4F,QAASgU,GAA5C,gDASZ,UAAChS,EAAA,GAAD,CAAMG,MAAI,EAACM,GAAI,EAAGmB,QAAQ,OAAO6S,cAAc,SAASC,IAAK,EAA7D,UAEG,CAAC,EAAG,EAAG,EAAG,GAAGxd,KAAI,SAAC4B,GAAD,OAAW,SAAC6H,GAAD,CAA0B7H,MAAOA,EAAO8H,SAAUqS,GAAWpS,WAAYA,IAAtD/H,MAC/CoP,KAAS,SAACrI,EAAA,EAAD,WAAW,UAAC4D,EAAA,EAAD,YACnB,yBAAMyE,GAAMhK,WACZ,yBAAMgK,GAAMpH,eACZ,yBAAMoH,GAAMoE,eACZ,yBAAMpE,GAAMjO,UACZ,yBAAMiO,GAAMgD,SACZ,yBAAMhD,GAAMnH,YACZ,yBAAMmH,GAAM+C,oBAMjBwH,KAAO,UAACzS,EAAA,GAAD,CAAMC,WAAS,EAAClF,GAAI,CAAEob,eAAgB,gBAAkBjW,QAAS,EAAjE,WACN,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACM,GAAI,GAAIqD,GAAI,IAAKyS,GAAI,EAAhC,UAAoC,UAAC1W,EAAA,EAAD,YAClC,SAACS,EAAA,EAAD,CAAYvF,GAAI,CAAEuH,UAAW,UAAYxC,GAAI,EAAG5H,QAAQ,KAAKE,MAAM,iBAAnE,SAAsIuB,EAApC,SAAZ+Y,GAAkC,cAAZA,GAAA,uEAAtB,4CACtF,SAAC8D,GAAA,EAAD,CAAcC,YAAahE,UAE5BsB,KAAQ,SAAC/T,EAAA,GAAD,CAAMG,MAAI,EAAC2D,GAAI,EAAGlC,QAAQ,OAAOiU,WAAW,SAASM,eAAe,SAApE,UACP,SAACtW,EAAA,EAAD,CAAW9E,GAAI,CAAE6G,QAAS,QAA1B,UAAoC,SAAC8U,EAAA,EAAD,CAAc3b,GAAI,CAAE4b,SAAU,WAEpE,SAAC3W,EAAA,GAAD,CAAMG,MAAI,EAACM,GAAI,GAAIqD,GAAI,IAAKyS,GAAI,EAAhC,UAAoC,UAAC1W,EAAA,EAAD,YAClC,SAACS,EAAA,EAAD,CAAYvF,GAAI,CAAEuH,UAAW,UAAYxC,GAAI,EAAG5H,QAAQ,KAAKE,MAAM,iBAAnE,SAAsFuB,EAAtF,yCACA,SAAC6c,GAAA,EAAD,CAAcC,YAAaxD,cAK7BS,KAAW,SAAC/P,EAAA,EAAD,CAAOzL,QAAQ,SAAS0L,SAAS,QAAjC,SAA2CkP,GAAO5b,KAAI,SAACkI,EAAGmD,GAAJ,OAAU,yBAAcnD,GAAJmD,SAGvF,UAACvC,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,SAACF,EAAA,GAAD,CAAMG,MAAI,EAAV,SACe,SAAZuS,IACC,SAACpV,EAAA,EAAD,CAAQc,WAAW,SAACwY,EAAA,EAAD,IAAS5Y,QAAS,WACnCoS,EAASQ,KAAK1W,IAAIuY,GAAKyC,GAAInE,IACvBZ,EAAYiD,MAEd5C,IAAQ,GACRP,MAEDtS,UAAWoT,KAAmB2C,GAAStb,MAAM,UAPhD,SAQGuB,EARH,yCAUA,SAAC2D,EAAA,EAAD,CAAQc,WAAW,SAACwY,EAAA,EAAD,IAAS5Y,QAAS,WACnCoS,EAASQ,KAAKiG,IAAIjW,IACduP,EAAYiD,MAEd5C,IAAQ,GACRP,MAEDtS,UAAWiD,KAAa8S,GAAStb,MAAmB,cAAZsa,GAA0B,UAAY,UAPjF,SAQG/Y,EARH,0CAWJ,SAACqG,EAAA,GAAD,CAAMG,MAAI,EAACC,SAAU,EAArB,SACG+P,IAAc,SAAC7S,EAAA,EAAD,CAAQc,WAAW,SAACE,EAAA,EAAD,IAAYX,UAAWiD,GAAU5C,QAAS,WAjN9CmU,OAAO2E,QAAQnd,EAAf,4CAiN4EyZ,MAAWhb,MAAM,QAA5G,SAAqHuB,EAArH,4CAEjB,SAACqG,EAAA,GAAD,CAAMG,MAAI,EAAV,UACG4W,IAEFtE,IAAmB,SAAZC,KAAsB,SAAC1S,EAAA,GAAD,CAAMG,MAAI,EAAV,UAC5B,SAAC7C,EAAA,EAAD,CAAQc,WAAW,SAAC4Y,EAAA,EAAD,IAAYhZ,QAAS,WAAQoS,EAASQ,KAAK1W,IAAIuY,GAAIyC,GAAInE,IAAkBZ,EAAaiD,KAAU5C,IAAQ,IAAU7S,UAAWoT,KAAmB2C,GAAStb,MAAM,UAAlL,SAA6LuB,EAA7L","sources":["Components/MenuItemWithImage.tsx","Components/Artifact/ArtifactAutocomplete.tsx","Components/TextButton.tsx","Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx"],"sourcesContent":["import { ListItemIcon, ListItemText, MenuItem, Theme } from \"@mui/material\";\r\n\r\ntype MenuItemWithImageProps = {\r\n  value: string\r\n  image?: Displayable\r\n  text: Displayable\r\n  theme: Theme\r\n  isSelected?: boolean\r\n  addlElement?: Displayable\r\n  props?: object\r\n}\r\n\r\nexport default function MenuItemWithImage({ value, image = \"\", text, theme, isSelected, addlElement, props }: MenuItemWithImageProps) {\r\n  return <MenuItem key={value} value={value} {...props}>\r\n    <ListItemIcon>{image}</ListItemIcon>\r\n    <ListItemText primaryTypographyProps={{ style: { fontWeight: isSelected ? theme.typography.fontWeightMedium : theme.typography.fontWeightRegular } }}>\r\n      {text}\r\n    </ListItemText>\r\n    {addlElement && addlElement}\r\n  </MenuItem>\r\n}\r\n","import { Autocomplete, AutocompleteProps, AutocompleteRenderGroupParams, Box, Chip, List, ListSubheader, TextField, useTheme } from '@mui/material';\r\nimport { useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport i18n from '../../i18n';\r\nimport KeyMap from '../../KeyMap';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { allMainStatKeys, allSubstatKeys, MainStatKey, SubstatKey } from '../../Types/artifact';\r\nimport { allElementsWithPhy, ArtifactRarity, ArtifactSetKey } from '../../Types/consts';\r\nimport MenuItemWithImage from '../MenuItemWithImage';\r\nimport SolidColoredTextField from '../SolidColoredTextfield';\r\nimport { StarsDisplay } from '../StarDisplay';\r\nimport StatIcon from '../StatIcon';\r\n\r\ntype Grouper = string | number | undefined\r\n\r\ntype ArtifactMultiAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey\r\ntype ArtifactMultiAutocompleteOption<T extends ArtifactMultiAutocompleteKey, G extends Grouper> = {\r\n  key: T\r\n  label: string\r\n  grouper?: G\r\n}\r\ntype ArtifactMultiAutocompleteProps<T extends ArtifactMultiAutocompleteKey, G extends Grouper> = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<T, G>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtifactKeysWithGrouper: readonly { key: T, grouper?: G }[]\r\n  selectedArtifactKeys: T[]\r\n  setArtifactKeys: (keys: T[]) => void\r\n  getName: (key: T) => string\r\n  getImage: (key: T) => JSX.Element\r\n  label: string\r\n}\r\nfunction ArtifactMultiAutocomplete<T extends ArtifactMultiAutocompleteKey, G extends Grouper>({ allArtifactKeysWithGrouper, selectedArtifactKeys, setArtifactKeys, getName, getImage, label, ...props }:\r\n  ArtifactMultiAutocompleteProps<T, G>) {\r\n  const theme = useTheme()\r\n\r\n  const handleChange = (_, value: ArtifactMultiAutocompleteOption<T, G>[]) => {\r\n    setArtifactKeys(value.map(v => v.key))\r\n  }\r\n  const options = useMemo(() => allArtifactKeysWithGrouper.map(({ key, grouper }) => ({ key, label: getName(key), grouper })), [allArtifactKeysWithGrouper, getName])\r\n  return <Autocomplete\r\n    autoHighlight\r\n    multiple\r\n    disableCloseOnSelect\r\n    options={options}\r\n    value={selectedArtifactKeys.map(key => ({ key: key, label: getName(key) }))}\r\n    onChange={handleChange}\r\n    getOptionLabel={(option) => option.label}\r\n    isOptionEqualToValue={(option, value) => option.key === value.key}\r\n    renderInput={(params) => <TextField\r\n      {...params}\r\n      label={label}\r\n      variant=\"filled\"\r\n      InputLabelProps={{ style: { color: theme.palette.text.primary } }}\r\n      color={selectedArtifactKeys.length ? \"success\" : \"primary\"}\r\n      type=\"search\"\r\n    />}\r\n    renderOption={(props, option) => (\r\n      <MenuItemWithImage\r\n        key={option.key}\r\n        value={option.key}\r\n        image={getImage(option.key)}\r\n        text={option.label}\r\n        theme={theme}\r\n        isSelected={selectedArtifactKeys.includes(option.key)}\r\n        props={props}\r\n      />\r\n    )}\r\n    renderTags={(selected, getTagProps) => selected.map((value, index) => {\r\n      const element = allElementsWithPhy.find(ele => value.key === `${ele}_dmg_`)\r\n      const color = element ? element : undefined\r\n      return <Chip {...getTagProps({ index })} key={value.key} icon={getImage(value.key)} label={value.label} color={color} />\r\n    })}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSetMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<ArtifactSetKey, ArtifactRarity>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  artSetKeys: ArtifactSetKey[]\r\n  setArtSetKeys: (keys: ArtifactSetKey[]) => void\r\n}\r\nexport function ArtifactSetMultiAutocomplete({ artSetKeys, setArtSetKeys, ...props }: ArtifactSetMultiAutocompleteProps) {\r\n  const artifactSheets = usePromise(() => ArtifactSheet.getAll, [])\r\n  const { t } = useTranslation([\"artifact\", \"artifactNames_gen\"])\r\n  if (!artifactSheets) return null\r\n\r\n  const allArtifactSetsAndRarities = Object.entries(ArtifactSheet.setKeysByRarities(artifactSheets))\r\n    .flatMap(([rarity, sets]) => sets.map(set => ({ key: set, grouper: +rarity as ArtifactRarity })))\r\n    .sort(sortByRarityAndName)\r\n\r\n  return <ArtifactMultiAutocomplete<ArtifactSetKey, ArtifactRarity>\r\n    allArtifactKeysWithGrouper={allArtifactSetsAndRarities}\r\n    selectedArtifactKeys={artSetKeys}\r\n    setArtifactKeys={setArtSetKeys}\r\n    getName={(key: ArtifactSetKey) => artifactSheets(key).nameRaw}\r\n    getImage={(key: ArtifactSetKey) => artifactSheets(key).defIcon}\r\n    label={t(\"artifact:autocompleteLabels.sets\")}\r\n    groupBy={(option) => option.grouper?.toString() ?? \"\"}\r\n    renderGroup={(params: AutocompleteRenderGroupParams) => params.group && <List key={params.group} component={Box}>\r\n      <ListSubheader key={`${params.group}Header`} sx={{ top: \"-1em\" }}>\r\n        {params.group} <StarsDisplay stars={+params.group as ArtifactRarity} />\r\n      </ListSubheader>\r\n      {params.children}\r\n    </List>}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactMainStatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<MainStatKey, undefined>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  mainStatKeys: MainStatKey[]\r\n  setMainStatKeys: (keys: MainStatKey[]) => void\r\n}\r\nexport function ArtifactMainStatMultiAutocomplete({ mainStatKeys, setMainStatKeys, ...props }: ArtifactMainStatMultiAutocompleteProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <ArtifactMultiAutocomplete<MainStatKey, undefined>\r\n    allArtifactKeysWithGrouper={allMainStatKeys.map(key => ({ key }))}\r\n    selectedArtifactKeys={mainStatKeys}\r\n    setArtifactKeys={setMainStatKeys}\r\n    getName={(key: MainStatKey) => KeyMap.getArtStr(key)}\r\n    getImage={(key: MainStatKey) => StatIcon[key]}\r\n    label={t(\"autocompleteLabels.mainStats\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSubstatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<SubstatKey, undefined>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  substatKeys: SubstatKey[]\r\n  setSubstatKeys: (keys: SubstatKey[]) => void\r\n}\r\nexport function ArtifactSubstatMultiAutocomplete({ substatKeys, setSubstatKeys, ...props }: ArtifactSubstatMultiAutocompleteProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <ArtifactMultiAutocomplete<SubstatKey, undefined>\r\n    allArtifactKeysWithGrouper={allSubstatKeys.map(key => ({ key }))}\r\n    selectedArtifactKeys={substatKeys}\r\n    setArtifactKeys={setSubstatKeys}\r\n    getName={(key: SubstatKey) => KeyMap.getArtStr(key)}\r\n    getImage={(key: SubstatKey) => StatIcon[key]}\r\n    label={t(\"autocompleteLabels.substats\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSingleAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey | \"\"\r\ntype ArtifactSingleAutocompleteOption<T extends ArtifactSingleAutocompleteKey, G extends Grouper> = {\r\n  key: T\r\n  label: string\r\n  grouper?: G\r\n}\r\ntype ArtifactSingleAutocompleteProps<T extends ArtifactSingleAutocompleteKey, G extends Grouper> = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<T, G>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtifactKeysWithGrouper: readonly { key: T, grouper?: G }[]\r\n  selectedArtifactKey: T\r\n  setArtifactKey: (key: T | \"\") => void\r\n  getName: (key: T) => string\r\n  getImage: (key: T) => JSX.Element\r\n  label: string\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n}\r\nfunction ArtifactSingleAutocomplete<T extends ArtifactSingleAutocompleteKey, G extends Grouper>({ allArtifactKeysWithGrouper, selectedArtifactKey, setArtifactKey, getName, getImage, label, disable = () => false, showDefault = false, defaultText = \"\", defaultIcon = \"\", ...props }:\r\n  ArtifactSingleAutocompleteProps<T, G>) {\r\n  const theme = useTheme();\r\n\r\n  const options = useMemo(() =>\r\n    (showDefault\r\n      ? [{ key: \"\" as T, label: defaultText }]\r\n      : []\r\n    ).concat(allArtifactKeysWithGrouper.map(({ key, grouper }) => (\r\n      { key, label: getName(key), grouper }\r\n    ))), [allArtifactKeysWithGrouper, getName, defaultText, showDefault])\r\n\r\n  return <Autocomplete\r\n    autoHighlight\r\n    options={options}\r\n    clearIcon={selectedArtifactKey ? undefined : \"\"} // Hide the clear icon if the value is already default\r\n    value={{ key: selectedArtifactKey, label: getName(selectedArtifactKey) }}\r\n    onChange={(event, newValue, reason) => (event.type !== \"change\" || reason !== \"clear\") && setArtifactKey(newValue ? newValue.key : \"\")}\r\n    getOptionLabel={(option) => option.label ? option.label : defaultText}\r\n    isOptionEqualToValue={(option, value) => option.key === value.key}\r\n    getOptionDisabled={option => disable(option.key)}\r\n    renderInput={(props) => <SolidColoredTextField\r\n      {...props}\r\n      label={label}\r\n      startAdornment={getImage(selectedArtifactKey)}\r\n      hasValue={selectedArtifactKey ? true : false}\r\n    />}\r\n    renderOption={(props, option) => (\r\n      <MenuItemWithImage\r\n        key={option.key}\r\n        value={option.key}\r\n        image={getImage(option.key)}\r\n        text={option.label}\r\n        theme={theme}\r\n        isSelected={selectedArtifactKey === option.key}\r\n        props={props}\r\n      />\r\n    )}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSetSingleAutocompleteProps = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<ArtifactSetKey | \"\", ArtifactRarity>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  artSetKey: ArtifactSetKey | \"\"\r\n  setArtSetKey: (key: ArtifactSetKey | \"\") => void\r\n  label?: string\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n}\r\nexport function ArtifactSetSingleAutocomplete({ artSetKey, setArtSetKey, label = \"\", ...props }: ArtifactSetSingleAutocompleteProps) {\r\n  const artifactSheets = usePromise(() => ArtifactSheet.getAll, [])\r\n  const { t } = useTranslation([\"artifact\", \"artifactNames_gen\"])\r\n  label = label ? label : t(\"artifact:autocompleteLabels.set\")\r\n  if (!artifactSheets) return null\r\n\r\n  const allArtifactSetsAndRarities = Object.entries(ArtifactSheet.setKeysByRarities(artifactSheets))\r\n    .flatMap(([rarity, sets]) => sets.map(set => ({ key: set, grouper: +rarity as ArtifactRarity })))\r\n    .sort(sortByRarityAndName)\r\n\r\n  return <ArtifactSingleAutocomplete<ArtifactSetKey | \"\", ArtifactRarity>\r\n    allArtifactKeysWithGrouper={allArtifactSetsAndRarities}\r\n    selectedArtifactKey={artSetKey}\r\n    setArtifactKey={setArtSetKey}\r\n    getName={(key: ArtifactSetKey | \"\") => key && artifactSheets(key).nameRaw}\r\n    getImage={(key: ArtifactSetKey | \"\") => key ? artifactSheets(key).defIcon : <></>}\r\n    label={label}\r\n    groupBy={(option) => option.grouper?.toString() ?? \"\"}\r\n    renderGroup={(params: AutocompleteRenderGroupParams) => params.group && <List key={params.group} component={Box}>\r\n      <ListSubheader key={`${params.group}Header`} sx={{ top: \"-1em\" }}>\r\n        {params.group} <StarsDisplay stars={+params.group as ArtifactRarity} />\r\n      </ListSubheader>\r\n      {params.children}\r\n    </List>}\r\n    {...props}\r\n  />\r\n}\r\n\r\nfunction sortByRarityAndName(a: { key: ArtifactSetKey, grouper: ArtifactRarity }, b: { key: ArtifactSetKey, grouper: ArtifactRarity }) {\r\n  if (a.grouper > b.grouper) {\r\n    return -1\r\n  }\r\n  if (a.grouper < b.grouper) {\r\n    return 1\r\n  }\r\n\r\n  const aName = i18n.t(`artifactNames_gen:${a.key}`)\r\n  const bName = i18n.t(`artifactNames_gen:${b.key}`)\r\n  if (aName < bName) {\r\n    return -1\r\n  }\r\n  if (aName > bName) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n","import { Button, ButtonProps, styled } from \"@mui/material\";\r\n\r\nconst DisabledButton = styled(Button)(({ theme }) => ({\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.text.secondary,\r\n  }\r\n}))\r\n\r\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\r\n  return <DisabledButton {...props} disabled  >\r\n    {children}\r\n  </DisabledButton>\r\n}\r\n","import { ButtonProps, MenuItem } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ArtifactRarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport { StarsDisplay } from \"../StarDisplay\";\r\n\r\ntype props = ButtonProps & {\r\n  rarity?: ArtifactRarity\r\n  onChange: (rarity: ArtifactRarity) => void\r\n  filter: (ArtifactRarity) => boolean\r\n}\r\n\r\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <DropdownButton\r\n    {...props}\r\n    title={rarity ? <StarsDisplay stars={rarity} /> : t`editor.rarity`}\r\n    color={rarity ? \"success\" : \"primary\"}\r\n  >\r\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\r\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\r\n        <StarsDisplay stars={rarity} />\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Replay } from \"@mui/icons-material\"\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\r\n\r\ntype ArtifactSlotDropdownProps = ButtonProps & {\r\n  slotKey?: SlotKey | \"\"\r\n  onChange: (slotKey: SlotKey | \"\") => void\r\n  hasUnselect?: boolean\r\n}\r\n\r\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  return <DropdownButton\r\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\r\n    color={slotKey ? \"success\" : \"primary\"}\r\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\r\n    {...props}\r\n  >\r\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        {t`ui:unselect`}\r\n      </ListItemText>\r\n    </MenuItem>}\r\n    {hasUnselect && <Divider />}\r\n    {allSlotKeys.map(key =>\r\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\r\n        <ListItemIcon>\r\n          {artifactSlotIcon(key)}\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {t(`artifact:slotName:${key}`)}\r\n        </ListItemText>\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { TextField, TextFieldProps } from '@mui/material'\r\nimport { useCallback, useEffect, useState } from 'react'\r\ntype props = TextFieldProps & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <TextField\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    {...props}\r\n  />\r\n}","import { Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport InfoTooltip from '../../../Components/InfoTooltip';\r\nimport PercentBadge from '../../../Components/PercentBadge';\r\n\r\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\r\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\r\n  return <CardLight sx={{ py: 1, px: 2 }}>\r\n    <Grid container spacing={1}>\r\n      <Grid item>{t(`editor.${eff}`)}</Grid>\r\n      <Grid item flexGrow={1}>\r\n        <InfoTooltip title={<span>\r\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\r\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\r\n        </span>} />\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\r\n      </Grid>\r\n    </Grid>\r\n  </CardLight>\r\n}\r\n","import { Box, Button, ButtonGroup, Grid, ListItemIcon, ListItemText, MenuItem, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\r\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\r\nimport SqBadge from '../../../Components/SqBadge';\r\nimport StatIcon from '../../../Components/StatIcon';\r\nimport TextButton from '../../../Components/TextButton';\r\nimport Artifact from '../../../Data/Artifacts/Artifact';\r\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\r\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\r\nimport { allSubstatKeys, ICachedArtifact, ISubstat } from '../../../Types/artifact';\r\nimport { clamp } from '../../../Util/Util';\r\nimport PercentBadge from '../../../Components/PercentBadge';\r\nimport { RollColorKey } from '../../../Types/consts';\r\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = KeyMap.unit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  return <CardLight>\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\r\n        <DropdownButton\r\n          startIcon={key ? StatIcon[key] : undefined}\r\n          title={key ? KeyMap.getArtStr(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n          disabled={!artifact}\r\n          color={key ? \"success\" : \"primary\"}\r\n          sx={{ whiteSpace: \"nowrap\" }}>\r\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\r\n          {allSubstatKeys.filter(key => mainStatKey !== key)\r\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\r\n              <ListItemIcon>{StatIcon[k]}</ListItemIcon>\r\n              <ListItemText>{KeyMap.getArtStr(k)}</ListItemText>\r\n            </MenuItem>)}\r\n        </DropdownButton>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n          <CustomNumberInput\r\n            float={unit === \"%\"}\r\n            placeholder={t`editor.substat.selectSub`}\r\n            value={key ? value : undefined}\r\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n            disabled={!key}\r\n            error={!!error}\r\n            sx={{\r\n              px: 1,\r\n            }}\r\n            inputProps={{\r\n              sx: { textAlign: \"right\" }\r\n            }}\r\n          />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\r\n        {rollData.map((v, i) => {\r\n          let newValue = cacheValueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>\r\n    </Box>\r\n    <Box sx={{ p: 1, }}>\r\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\r\n        <Grid item>\r\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}` as RollColorKey}>\r\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n          </SqBadge>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          {!!rolls.length && [...rolls].sort().map((val, i) =>\r\n            <Typography component=\"span\" key={`${i}.${val}`} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\r\n        </Grid>\r\n        <Grid item xs=\"auto\" flexShrink={1}>\r\n          <Typography>\r\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\r\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>}\r\n\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport CardDark from '../../../Components/Card/CardDark';\r\nimport CloseButton from '../../../Components/CloseButton';\r\nimport ModalWrapper from '../../../Components/ModalWrapper';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport ColorText from '../Components/ColoredText';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { AllArtifactSheets, ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport { allMainStatKeys, allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\r\nimport { BorrowManager } from './BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport type ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\nexport type OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nexport function processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: AllArtifactSheets, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n  // TODO: restore\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    // TODO: restore\r\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets(set).rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets(setKey).rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets(value).name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{cacheValueString(value.value, KeyMap.unit(value.key))}{KeyMap.unit(value.key)}</>)}</div>)\r\n  }</>\r\n\r\n  const valueStrFunc = (value) => <>{cacheValueString(value, KeyMap.unit(result.mainStatKey))}{KeyMap.unit(result.mainStatKey)}</>\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets: AllArtifactSheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets(key).nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstatKeys.forEach(key => {\r\n      const name = KeyMap.getStr(key)\r\n      const regex = KeyMap.unit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Add, ChevronRight, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, MenuItem, Skeleton, styled, Typography, useMediaQuery, useTheme } from '@mui/material';\r\nimport { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { ArtifactSetSingleAutocomplete } from '../Components/Artifact/ArtifactAutocomplete';\r\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\r\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport { StatColoredWithUnit } from '../Components/StatDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { cachedArtifact, validateArtifact } from '../Database/DataManagers/ArtifactData';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { allElementsWithPhy, ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\r\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\r\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\r\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\r\n\r\nconst maxProcessingCount = 3, maxProcessedCount = 16\r\nconst allSubstatFilter = new Set(allSubstatKeys)\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function ArtifactEditor({ artifactIdToEdit = \"\", cancelEdit, allowUpload = false, allowEmpty = false, }:\r\n  { artifactIdToEdit?: string, cancelEdit: () => void, allowUpload?: boolean, allowEmpty?: boolean, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n\r\n  const artifactSheets = usePromise(() => ArtifactSheet.getAll, [])\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.arts.followAny(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && validateArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(() => firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(() => firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  const disableEditSlot = !!artifact?.location\r\n\r\n  useEffect(() => {\r\n    if (!artifact && artifactProcessed)\r\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\r\n  }, [artifact, artifactProcessed, artifactDispatch])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const uploadFiles = useCallback((files: FileList) => {\r\n    setShow(true)\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setShow])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    allowUpload && window.addEventListener('paste', pasteFunc);\r\n    return () => {\r\n      if (allowUpload) window.removeEventListener('paste', pasteFunc)\r\n    }\r\n  }, [uploadFiles, allowUpload])\r\n\r\n  const onUpload = useCallback(\r\n    e => {\r\n      uploadFiles(e.target.files)\r\n      e.target.value = null // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database.arts.get(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.arts.findDups(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cArtifact, errors } = useMemo(() => {\r\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = cachedArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    if (artifactIdToEdit === \"new\") {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"reset\" })\r\n    }\r\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database.arts.get(artifactIdToEdit)\r\n    if (databaseArtifact) {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? artifactSheets?.(artifact.setKey) : undefined\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    dispatchQueue({ type: \"pop\" })\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets!(newValue.setKey) : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cArtifact ? Artifact.getArtifactEfficiency(cArtifact, allSubstatFilter) : {}\r\n  const preventClosing = processed.length || outstanding.length\r\n  const onClose = useCallback(\r\n    (e) => {\r\n      if (preventClosing) e.preventDefault()\r\n      setShow(false)\r\n      cancelEdit()\r\n    }, [preventClosing, setShow, cancelEdit])\r\n\r\n  const theme = useTheme();\r\n  const grmd = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n  const element = artifact ? allElementsWithPhy.find(ele => artifact.mainStatKey.includes(ele)) : undefined\r\n  const color = artifact\r\n    ? element ?? \"success\"\r\n    : \"primary\"\r\n\r\n  const updateSetKey = useCallback((setKey: ArtifactSetKey | \"\") => update({ setKey: setKey as ArtifactSetKey }), [update],)\r\n  const setACDisable = useCallback((key: ArtifactSetKey | \"\") => {\r\n    if (key === \"\") return true\r\n    //Disable being able to select any of the prayer set unless the current slotkey is circlet\r\n    if (disableEditSlot && slotKey !== \"circlet\" && (key === \"PrayersForDestiny\" || key === \"PrayersForIllumination\" || key === \"PrayersForWisdom\" || key === \"PrayersToSpringtime\"))\r\n      return true\r\n    return false\r\n  }, [disableEditSlot, slotKey])\r\n\r\n\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\r\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n      <CardHeader\r\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\r\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\r\n      />\r\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n        <Grid container spacing={1} columns={{ xs: 1, md: 2 }} >\r\n          {/* Left column */}\r\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* set & rarity */}\r\n            <Box sx={{ display: \"flex\", gap: 1, mb: 1 }}>\r\n              {/* Artifact Set */}\r\n              <ArtifactSetSingleAutocomplete\r\n                showDefault\r\n                disableClearable\r\n                size=\"small\"\r\n                artSetKey={artifact?.setKey ?? \"\"}\r\n                setArtSetKey={updateSetKey}\r\n                sx={(theme) => ({\r\n                  flexGrow: 1,\r\n                  \".MuiFilledInput-root\": {\r\n                    borderBottomRightRadius: theme.shape.borderRadius,\r\n                    borderBottomLeftRadius: theme.shape.borderRadius\r\n                  }\r\n                })}\r\n                defaultText={t(\"editor.unknownSetName\")}\r\n                disable={setACDisable}\r\n              />\r\n              {/* rarity dropdown */}\r\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={!sheet} />\r\n            </Box>\r\n\r\n            {/* level */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\r\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\r\n              />\r\n              <ButtonGroup >\r\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n              </ButtonGroup>\r\n            </Box>\r\n\r\n            {/* slot */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <ArtifactSlotDropdown disabled={disableEditSlot || !sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\r\n                  <Typography color=\"text.secondary\">\r\n                    {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\r\n                  </Typography>\r\n                </Suspense>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* main stat */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <DropdownButton startIcon={artifact?.mainStatKey ? StatIcon[artifact.mainStatKey] : undefined}\r\n                title={<b>{artifact ? KeyMap.getArtStr(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={color} >\r\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                    <StatColoredWithUnit statKey={mainStatK} />\r\n                  </MenuItem>)}\r\n              </DropdownButton>\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Typography color=\"text.secondary\">\r\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unit(artifact.mainStatKey)}` : t`mainStat`}\r\n                </Typography>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* Current/Max Substats Efficiency */}\r\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\r\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\r\n\r\n            {/* Image OCR */}\r\n            {allowUpload && <CardLight>\r\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                {/* TODO: artifactDispatch not overwrite */}\r\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\r\n                  <Grid container spacing={1} alignItems=\"center\">\r\n                    <Grid item flexGrow={1}>\r\n                      <label htmlFor=\"contained-button-file\">\r\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\r\n                          Upload Screenshot (or Ctrl-V)\r\n                        </Button>\r\n                      </label>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => setModalShow(true)}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n                  </Box>}\r\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n                    {!firstProcessed && firstOutstanding && <Grid item>\r\n                      <CircularProgress size=\"1em\" />\r\n                    </Grid>}\r\n                    <Grid item flexGrow={1}>\r\n                      <Typography>\r\n                        <span>\r\n                          Screenshots in file-queue: <b>{remaining}</b>\r\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\r\n                        </span>\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n                    </Grid>\r\n                  </Grid></CardDark>}\r\n                </Suspense>\r\n              </CardContent>\r\n            </CardLight>}\r\n          </Grid>\r\n\r\n          {/* Right column */}\r\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* substat selections */}\r\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cArtifact} setSubstat={setSubstat} />)}\r\n            {texts && <CardLight><CardContent>\r\n              <div>{texts.slotKey}</div>\r\n              <div>{texts.mainStatKey}</div>\r\n              <div>{texts.mainStatVal}</div>\r\n              <div>{texts.rarity}</div>\r\n              <div>{texts.level}</div>\r\n              <div>{texts.substats}</div>\r\n              <div>{texts.setKey}</div>\r\n            </CardContent></CardLight>}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {old && <Grid container sx={{ justifyContent: \"space-around\" }} spacing={1} >\r\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\r\n            <ArtifactCard artifactObj={old} />\r\n          </CardLight></Grid>\r\n          {grmd && <Grid item md={1} display=\"flex\" alignItems=\"center\" justifyContent=\"center\" >\r\n            <CardLight sx={{ display: \"flex\" }}><ChevronRight sx={{ fontSize: 40 }} /></CardLight>\r\n          </Grid>}\r\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\r\n            <ArtifactCard artifactObj={cArtifact} />\r\n          </CardLight></Grid>\r\n        </Grid>}\r\n\r\n        {/* Error alert */}\r\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" >{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\r\n\r\n        {/* Buttons */}\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            {oldType === \"edit\" ?\r\n              <Button startIcon={<Add />} onClick={() => {\r\n                database.arts.set(old!.id, editorArtifact!);\r\n                if (allowEmpty) reset()\r\n                else {\r\n                  setShow(false)\r\n                  cancelEdit()\r\n                }\r\n              }} disabled={!editorArtifact || !isValid} color=\"primary\">\r\n                {t`editor.btnSave`}\r\n              </Button> :\r\n              <Button startIcon={<Add />} onClick={() => {\r\n                database.arts.new(artifact!);\r\n                if (allowEmpty) reset()\r\n                else {\r\n                  setShow(false)\r\n                  cancelEdit()\r\n                }\r\n              }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n                {t`editor.btnAdd`}\r\n              </Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            {allowEmpty && <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>}\r\n          </Grid>\r\n          <Grid item>\r\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n          </Grid>\r\n          {old && oldType !== \"edit\" && <Grid item>\r\n            <Button startIcon={<Update />} onClick={() => { database.arts.set(old.id, editorArtifact!); allowEmpty ? reset() : setShow(false) }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark ></Suspense>\r\n  </ModalWrapper>\r\n}\r\n"],"names":["MenuItemWithImage","value","image","text","theme","isSelected","addlElement","props","MenuItem","ListItemIcon","ListItemText","primaryTypographyProps","style","fontWeight","typography","fontWeightMedium","fontWeightRegular","ArtifactMultiAutocomplete","allArtifactKeysWithGrouper","selectedArtifactKeys","setArtifactKeys","getName","getImage","label","useTheme","options","useMemo","map","key","grouper","Autocomplete","autoHighlight","multiple","disableCloseOnSelect","onChange","_","v","getOptionLabel","option","isOptionEqualToValue","renderInput","params","TextField","variant","InputLabelProps","color","palette","primary","length","type","renderOption","includes","renderTags","selected","getTagProps","index","element","allElementsWithPhy","ele","undefined","Chip","icon","ArtifactSetMultiAutocomplete","artSetKeys","setArtSetKeys","artifactSheets","usePromise","ArtifactSheet","t","useTranslation","allArtifactSetsAndRarities","Object","entries","flatMap","rarity","set","sort","sortByRarityAndName","nameRaw","defIcon","groupBy","toString","renderGroup","group","List","component","Box","ListSubheader","sx","top","stars","children","ArtifactMainStatMultiAutocomplete","mainStatKeys","setMainStatKeys","allMainStatKeys","KeyMap","StatIcon","ArtifactSubstatMultiAutocomplete","substatKeys","setSubstatKeys","allSubstatKeys","ArtifactSingleAutocomplete","selectedArtifactKey","setArtifactKey","disable","showDefault","defaultText","defaultIcon","concat","clearIcon","event","newValue","reason","getOptionDisabled","startAdornment","hasValue","ArtifactSetSingleAutocomplete","artSetKey","setArtSetKey","a","b","aName","i18n","bName","DisabledButton","styled","Button","backgroundColor","dark","secondary","TextButton","disabled","ArtifactRarityDropdown","filter","DropdownButton","title","onClick","ArtifactSlotDropdown","slotKey","hasUnselect","startIcon","artifactSlotIcon","Replay","Divider","allSlotKeys","CustomNumberTextField","float","useState","state","setState","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","e","target","onBlur","onKeyDown","SubstatEfficiencyDisplayCard","efficiency","max","valid","eff","CardLight","py","px","Grid","container","spacing","item","flexGrow","InfoTooltip","Typography","Trans","i18nKey","xs","PercentBadge","SubstatInput","artifact","setSubstat","mainStatKey","substats","rolls","accurateValue","reduce","unit","rollNum","error","rollData","allowedRolls","Artifact","numUpgrades","high","rollOffset","display","ButtonGroup","size","width","whiteSpace","k","CustomNumberInput","flexBasis","placeholder","inputProps","textAlign","i","cacheValueString","artifactSubstatRollCorrection","clamp","p","SqBadge","count","val","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","open","onClose","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","src","Snippet","height","gutterBottom","href","rel","scan_art_main","large","BorrowManager","init","deinit","data","this","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","Array","fill","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","img","Image","onload","canvas","document","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","Math","floor","bottomOpts","rectangle","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","setKey","level","location","lock","exclude","rarityRates","objectKeyMap","allArtifactRarities","score","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatVal","mainStatValScore","push","chosen","resultMainStatVal","every","other","add","unknownText","name","detectedText","inferredText","addText","available","recommended","ambiguousText","valueStrFunc","find","results","allArtifactSets","hammingDistance","replace","f","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","action","oldIndex","current","InputInvis","ArtifactEditor","artifactIdToEdit","cancelEdit","allowUpload","allowEmpty","database","useContext","DatabaseContext","show","setShow","useForceUpdate","dirtyDatabase","setDirtyDatabase","arts","followAny","useReducer","editorArtifact","artifactDispatch","validateArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","disableEditSlot","numProcessing","min","processingCurrent","forEach","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","databaseArtifact","get","old","oldType","findDups","duplicated","upgraded","errors","validated","cachedArtifact","cArtifact","deepClone","sheet","reset","update","newSheet","pick","prefer","slots","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","grmd","useMediaQuery","breakpoints","up","updateSetKey","setACDisable","Suspense","fallback","Skeleton","CardHeader","flexDirection","gap","columns","mb","disableClearable","borderBottomRightRadius","shape","borderRadius","borderBottomLeftRadius","id","mr","my","margin","l","keys","getSlotName","ImgIcon","slotIcons","mainStatK","statKey","alignItems","htmlFor","accept","PhotoCamera","minWidth","faQuestionCircle","justifyContent","maxWidth","pl","CircularProgress","lg","ArtifactCard","artifactObj","ChevronRight","fontSize","Add","new","confirm","process","Update"],"sourceRoot":""}