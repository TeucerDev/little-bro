{"version":3,"file":"static/js/40.87818492.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactLevelSlider.tsx","Components/Character/CharacterDropdownButton.tsx","Components/Character/LocationName.tsx","Components/Character/ThumbSide.tsx","Components/CustomNumberInput.tsx","Components/StatFilterCard.tsx","GlobalSettings.tsx","PageArtifact/ArtifactCard.tsx","PageArtifact/PercentBadge.tsx","PageArtifact/RollProbability.ts","ReactHooks/useArtifact.tsx"],"sourcesContent":["import { Card, Slider } from \"@mui/material\"\r\nimport { useCallback, useEffect, useState } from \"react\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport CustomNumberInput from \"../CustomNumberInput\"\r\n\r\nexport default function ArtifactLevelSlider({ levelLow, levelHigh, setLow, setHigh, setBoth, dark = false, disabled = false, showLevelText = false }: {\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  setLow: (low: number) => void,\r\n  setHigh: (high: number) => void,\r\n  setBoth: (low: number, high: number) => void,\r\n  dark?: boolean,\r\n  disabled?: boolean,\r\n  showLevelText?: boolean,\r\n}) {\r\n  const [sliderLow, setsliderLow] = useState(levelLow)\r\n  const [sliderHigh, setsliderHigh] = useState(levelHigh)\r\n  const setSlider = useCallback(\r\n    (e, [l, h]) => {\r\n      setsliderLow(l)\r\n      setsliderHigh(h)\r\n    },\r\n    [setsliderLow, setsliderHigh])\r\n  useEffect(() => setsliderLow(levelLow), [setsliderLow, levelLow])\r\n\r\n  useEffect(() => setsliderHigh(levelHigh), [setsliderHigh, levelHigh])\r\n  return <Card sx={{ width: \"100%\", display: \"flex\", alignItems: \"center\", bgcolor: dark ? \"contentDark.main\" : \"contentLight.main\" }}>\r\n    <CustomNumberInput\r\n      value={sliderLow}\r\n      onChange={val => setLow(clamp(val, 0, levelHigh))}\r\n      sx={{ pl: 2, width: showLevelText ? 100 : 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      startAdornment={showLevelText ? \"Level: \" : undefined}\r\n      disabled={disabled}\r\n    />\r\n    <Slider sx={{ width: 100, flexGrow: 1, mx: 2 }}\r\n      getAriaLabel={() => 'Arifact Level Range'}\r\n      value={[sliderLow, sliderHigh]}\r\n      onChange={setSlider}\r\n      onChangeCommitted={(e, value) => setBoth(value[0], value[1])}\r\n      valueLabelDisplay=\"auto\"\r\n      min={0} max={20} step={1} marks\r\n      disabled={disabled}\r\n    />\r\n    <CustomNumberInput\r\n      value={sliderHigh}\r\n      onChange={val => setHigh(clamp(val, levelLow, 20))}\r\n      sx={{ px: 1, width: 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      disabled={disabled}\r\n    />\r\n  </Card>\r\n}\r\n","import { BusinessCenter, Favorite, Replay } from \"@mui/icons-material\";\r\nimport { Divider, ListItemIcon, MenuItem, Skeleton, Typography } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport { Suspense, useContext, useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport { CharacterFilterConfigs, characterFilterConfigs } from \"../../Util/CharacterSort\";\r\nimport { filterFunction } from \"../../Util/SortByFilters\";\r\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  value: CharacterKey | \"\"\r\n  onChange: (ck: CharacterKey | \"\") => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  inventory?: boolean\r\n  noUnselect?: boolean,\r\n  unSelectText?: Displayable,\r\n  unSelectIcon?: Displayable,\r\n}\r\n\r\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\r\n  const filterConfigs = useMemo(() => characterSheets && characterFilterConfigs(database, characterSheets), [database, characterSheets])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n  return <DropdownButton\r\n    {...props}\r\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\r\n    color={value ? \"success\" : \"primary\"}\r\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\r\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`inventory`}\r\n      </Typography>\r\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`unselect`}\r\n      </Typography>\r\n    </MenuItem>)}\r\n    {!noUnselect && <Divider key=\"div\" />}\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value, filterConfigs)}\r\n  </DropdownButton >\r\n}\r\n\r\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\r\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\", filterConfigs: CharacterFilterConfigs | undefined) {\r\n  if (!filterConfigs) return []\r\n  const faves = characterKeys\r\n    .filter(filterFunction({ element: \"\", weaponType: \"\", favorite: \"yes\" }, filterConfigs))\r\n    .map(characterKey => <CharMenuItem key={characterKey} {...{ characterSheets, characterKey, selectedCharacterKey, onChange, favorite: true }} />)\r\n  const nonFaves = characterKeys\r\n    .filter(filterFunction({ element: \"\", weaponType: \"\", favorite: \"no\" }, filterConfigs))\r\n    .map(characterKey => <CharMenuItem key={characterKey} {...{ characterSheets, characterKey, selectedCharacterKey, onChange, favorite: false }} />)\r\n\r\n  return faves.concat(nonFaves)\r\n}\r\nfunction CharMenuItem({ characterSheets, characterKey, selectedCharacterKey = \"\", onChange, favorite }:\r\n  { characterKey: CharacterKey, selectedCharacterKey: CharacterKey | \"\", characterSheets: StrictDict<CharacterKey, CharacterSheet>, onChange: (ck: CharacterKey) => void, favorite: boolean }) {\r\n  return <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\r\n    <ListItemIcon>\r\n      <ThumbSide src={characterSheets[characterKey]?.thumbImgSide} />\r\n    </ListItemIcon>\r\n    <Suspense fallback={<Skeleton variant=\"text\" width={100} />}>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {characterSheets[characterKey]?.name}\r\n      </Typography>\r\n    </Suspense>\r\n    {favorite && <Box display=\"flex\" flexGrow={1} />}\r\n    {favorite && <Favorite sx={{ ml: 1, mr: -0.5 }} />}\r\n  </MenuItem>\r\n}\r\n","import { BusinessCenter } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\n\r\nexport default function LocationName({ location }) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\r\n  return <Typography component=\"span\">\r\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\r\n  </Typography>\r\n\r\n}\r\n","import { styled } from \"@mui/system\";\r\n\r\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `2.3em`,\r\n  lineHeight: 1,\r\n  verticalAlign: \"text-bottom\",\r\n  marginTop: theme.spacing(-3),\r\n  marginLeft: theme.spacing(-1.25),\r\n  marginRight: theme.spacing(-1),\r\n  marginBottom: theme.spacing(-1),\r\n}))\r\n\r\nexport default ThumbSide","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\ntype props = Omit<InputProps, \"onChange\"> & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\n\r\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  transition: \"all 0.5s ease\",\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-focused\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n}))\r\n\r\nconst Wrapper = styled(Button)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  padding: 0,\r\n  overflow: \"hidden\",\r\n  \"div\": {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}))\r\n\r\n// wrap the Input with this when using the input in a buttongroup\r\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\r\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\r\n}\r\n\r\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [number, setNumber] = useState(value)\r\n  const [focused, setFocus] = useState(false)\r\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\r\n  const onBlur = useCallback(\r\n    () => {\r\n      onChange(number)\r\n      setFocus(false)\r\n    },\r\n    [onChange, number, setFocus],\r\n  )\r\n  const onFocus = useCallback(\r\n    () => {\r\n      setFocus(true)\r\n    },\r\n    [setFocus],\r\n  )\r\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\r\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n  return <StyledInputBase\r\n    value={(focused && !number) ? \"\" : number}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    inputProps={{ step: float ? 0.1 : 1 }}\r\n    onChange={onInputChange}\r\n    onBlur={onBlur}\r\n    onFocus={onFocus}\r\n    disabled={disabled}\r\n    onKeyDown={onKeyDOwn}\r\n    {...props}\r\n  />\r\n}\r\n","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Info } from '@mui/icons-material';\r\nimport { Button, ButtonGroup, CardContent, MenuItem, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport { DataContext } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport KeyMap, { StatKey } from '../KeyMap';\r\nimport { ElementKey } from '../Types/consts';\r\nimport BootstrapTooltip from './BootstrapTooltip';\r\nimport CardLight from './Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\r\nimport DropdownButton from './DropdownMenu/DropdownButton';\r\nexport default function StatFilterCard({ statFilters = {}, setStatFilters, disabled = false }:\r\n  { statFilters: Dict<StatKey, number>, setStatFilters: (object: Dict<StatKey, number>) => void, disabled?: boolean }) {\r\n  const { data } = useContext(DataContext)\r\n  const statKeys: StatKey[] = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\r\n  if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  statKeys.push(`${charEle}_dmg_`)\r\n\r\n  const remainingKeys = statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],)\r\n  return <Box>\r\n    <CardLight>\r\n      <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n        <Typography>Build Constraints</Typography>\r\n        <BootstrapTooltip placement=\"top\" title={<Typography>Constraint the generated builds to conform to some requirements, e.g. Generate builds with at least 140% Energy Recharge.</Typography>}>\r\n          <Info />\r\n        </BootstrapTooltip>\r\n      </CardContent>\r\n    </CardLight>\r\n    <Box display=\"flex\" flexDirection=\"column\" gap={0.5}>\r\n      {Object.entries(statFilters).map(([statKey, min]) => {\r\n        return <StatFilterItem key={statKey} statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n          delete statFilters[statKey]\r\n          setStatFilters({ ...statFilters })\r\n        }} />\r\n      })}\r\n      <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n    </Box>\r\n  </Box>\r\n}\r\n\r\nexport function StatFilterItem({ statKey, statKeys = [], value = 0, close, setFilter, disabled = false }: {\r\n  statKey?: string, statKeys: string[], value?: number, close?: () => void, setFilter: (statKey: string, value?: number) => void, disabled?: boolean\r\n}) {\r\n  const isFloat = KeyMap.unit(statKey) === \"%\"\r\n  const onChange = useCallback(s => statKey && setFilter(statKey, s), [setFilter, statKey])\r\n  return <ButtonGroup sx={{ width: \"100%\" }}>\r\n    <DropdownButton\r\n      title={statKey ? KeyMap.get(statKey) : \"New Stat\"}\r\n      disabled={disabled}\r\n    >\r\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { close?.(); setFilter(sKey, value) }}>{KeyMap.get(sKey)}</MenuItem>)}\r\n    </DropdownButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\r\n      <CustomNumberInput\r\n        disabled={!statKey}\r\n        float={isFloat}\r\n        value={value}\r\n        placeholder=\"Min Value\"\r\n        onChange={onChange}\r\n        sx={{ px: 2 }}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    {!!close && <Button color=\"error\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\r\n  </ButtonGroup>\r\n}\r\n","\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Button, ButtonGroup, CardActions, CardContent, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\r\nimport React, { lazy, Suspense, useCallback, useContext, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\r\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\r\nimport LocationName from '../Components/Character/LocationName';\r\nimport ColorText from '../Components/ColoredText';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useArtifact from '../ReactHooks/useArtifact';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey, Rarity } from '../Types/consts';\r\nimport { clamp, clamp01 } from '../Util/Util';\r\nimport PercentBadge from './PercentBadge';\r\nimport { probability } from './RollProbability';\r\n\r\nconst ArtifactEditor = lazy(() => import('./ArtifactEditor'))\r\n\r\ntype Data = {\r\n  artifactId?: string,\r\n  artifactObj?: ICachedArtifact,\r\n  onDelete?: (id: string) => void, mainStatAssumptionLevel?: number,\r\n  effFilter?: Set<SubstatKey>,\r\n  probabilityFilter?: Dict<SubstatKey, number>\r\n  disableEditSetSlot?: boolean\r\n}\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter, disableEditSetSlot = false }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const { database } = useContext(DatabaseContext)\r\n  const databaseArtifact = useArtifact(artifactId)\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\r\n  const editable = !artifactObj\r\n  const [showEditor, setshowEditor] = useState(false)\r\n  const onHideEditor = useCallback(() => setshowEditor(false), [setshowEditor])\r\n  const onShowEditor = useCallback(() => editable && setshowEditor(true), [editable, setshowEditor])\r\n\r\n  const art = artifactObj ?? databaseArtifact\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const mainStatUnit = KeyMap.unit(mainStatKey)\r\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  const setEffects = sheet?.setEffects\r\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\r\n    <span>\r\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\r\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\r\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\r\n      </span>)}\r\n    </span>\r\n  }>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    <Suspense fallback={false}>\r\n      <ArtifactEditor\r\n        artifactIdToEdit={showEditor ? artifactId : \"\"}\r\n        cancelEdit={onHideEditor}\r\n        disableEditSetSlot={disableEditSetSlot}\r\n      />\r\n    </Suspense>\r\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <Box className={`grad-${rarity}star`} sx={{ position: \"relative\" }}>\r\n        <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)} sx={{ position: \"absolute\", right: 0, bottom: 0, zIndex: 2 }}>\r\n          {lock ? <Lock /> : <LockOpen />}\r\n        </IconButton>\r\n        <Box sx={{ pt: 2, px: 2, position: \"relative\", zIndex: 1 }}>\r\n          {/* header */}\r\n          <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\r\n            <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\r\n            <Typography sx={{ flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\r\n          </Box>\r\n          <Typography color=\"text.secondary\" variant=\"body2\">\r\n            <SlotNameWithIcon slotKey={slotKey} />\r\n          </Typography>\r\n          <Typography variant=\"h6\" color={`${KeyMap.getVariant(mainStatKey)}.main`}>\r\n            <span>{StatIcon[mainStatKey]} {KeyMap.get(mainStatKey)}</span>\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            <strong>\r\n              <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}{mainStatUnit}</ColorText>\r\n            </strong>\r\n          </Typography>\r\n          <Stars stars={rarity} colored />\r\n          {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\r\n        </Box>\r\n        <Box sx={{ height: \"100%\", position: \"absolute\", right: 0, top: 0 }}>\r\n          <Box\r\n            component=\"img\"\r\n            src={sheet?.slotIcons[slotKey] ?? \"\"}\r\n            width=\"auto\"\r\n            height=\"100%\"\r\n            sx={{ float: \"right\" }}\r\n          />\r\n        </Box>\r\n      </Box>\r\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\r\n        {substats.map((stat: ICachedSubstat) => <SubstatDisplay key={stat.key} stat={stat} effFilter={effFilter} rarity={rarity} />)}\r\n        <Box sx={{ display: \"flex\", my: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\r\n          <PercentBadge value={currentEfficiency} max={900} valid={artifactValid} />\r\n        </Box>\r\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\r\n          <PercentBadge value={maxEfficiency} max={900} valid={artifactValid} />\r\n        </Box>}\r\n        <Box flexGrow={1} />\r\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\r\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Grid container sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n          {editable ?\r\n            <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\r\n          {editable && <ButtonGroup>\r\n            <Button color=\"info\" onClick={onShowEditor} size=\"small\">\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>\r\n            <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\r\n              <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\r\n                <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n              </Button>\r\n            </Tooltip>\r\n            {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>}\r\n        </Grid>\r\n      </CardActions>\r\n    </CardLight >\r\n  </Suspense>\r\n}\r\nfunction SubstatDisplay({ stat, effFilter, rarity }: { stat: ICachedSubstat, effFilter: Set<SubstatKey>, rarity: Rarity }) {\r\n  if (!stat.value) return null\r\n  const numRolls = stat.rolls?.length ?? 0\r\n  const maxRoll = stat.key ? Artifact.maxSubstatValues(stat.key) : 0\r\n  const rollData = stat.key ? Artifact.getSubstatRollData(stat.key, rarity) : []\r\n  const rollOffset = 7 - rollData.length\r\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\r\n  const efficiency = stat.efficiency ?? 0\r\n  const effOpacity = clamp01(0.5 + (efficiency / (100 * 5)) * 0.5) //divide by 6 because an substat can have max 6 rolls\r\n  const statName = KeyMap.getStr(stat.key)\r\n  const unit = KeyMap.unit(stat.key)\r\n  const inFilter = stat.key && effFilter.has(stat.key)\r\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\r\n    <Typography sx={{ flexGrow: 1 }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{StatIcon[stat.key]} {statName}{`+${cacheValueString(stat.value, KeyMap.unit(stat.key))}${unit}`}</Typography>\r\n    {inFilter && <Box display=\"flex\" gap={0.25} height=\"1.3em\">\r\n      {stat.rolls.sort().map((v, i) => <SmolProgress key={`${i}${v}`} value={100 * v / maxRoll} color={`roll${clamp(rollOffset + rollData.indexOf(v), 1, 6)}.main`} />)}\r\n    </Box>}\r\n    <Typography sx={{ opacity: effOpacity, minWidth: 40, textAlign: \"right\" }}>{inFilter ? `${efficiency.toFixed()}%` : \"-\"}</Typography>\r\n  </Box>)\r\n}\r\nexport function SmolProgress({ color = \"red\", value = 50 }) {\r\n  return <Box sx={{ width: 7, height: \"100%\", bgcolor: color, overflow: \"hidden\", borderRadius: 1, display: \"inline-block\" }}>\r\n    <Box sx={{ width: 10, height: `${100 - clamp(value, 0, 100)}%`, bgcolor: \"gray\" }} />\r\n  </Box>\r\n}\r\n","import SqBadge from '../Components/SqBadge';\r\nimport { clamp } from '../Util/Util';\r\n\r\nexport default function PercentBadge({ value, max = 1, valid }: {\r\n  valid?: boolean,\r\n  value: number | string,\r\n  max?: number\r\n}) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`roll${clamp(Math.floor((value / max) * 10) - 4, 1, 6)}`, value.toFixed() + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"error\"\r\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\r\n}\r\n","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\r\nimport { crawlObject, layeredAssignment } from '../Util/Util'\r\nimport Artifact from '../Data/Artifacts/Artifact'\r\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\r\n\r\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\r\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\r\n// probability distribution and require separate consideration.\r\n\r\n// Notations for the remainder of this file.\r\n//\r\n// i, j, k := substat\r\n// E(i) := Extra substat that rolls into substat i\r\n// T(i) := Targetted (extra) substat for substat i\r\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\r\n// Nu(i) := # of upgrade rolls into substat i\r\n//\r\n// E := { E1, E2, ... }\r\n// T := { T1, T2, ... }\r\n// N(i) := Nf(i) + Nu(i)\r\n// Nf := Nf(1) + Nf(2) + ...\r\n// Nu := Nu(1) + Nu(2) + ...\r\n//\r\n// For example, if the artifact has 14 atk, and the target atk is 30,\r\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\r\n//\r\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\r\n\r\nconst allWeights = [3, 4, 6] as const\r\ntype Weight = typeof allWeights[number]\r\n\r\n/**\r\n * Weight used when rolling a filler roll. Each roll will choose from available\r\n * substats (excluding main stat and existing substats) with these weights.\r\n */\r\nconst fWeight: StrictDict<SubstatKey, Weight> = {\r\n  hp: 6, atk: 6, def: 6,\r\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\r\n  critRate_: 3, critDMG_: 3\r\n}\r\n\r\n/**\r\n * Probability of observing a filler sequence with particular weights\r\n *\r\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\r\n */\r\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\r\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\r\n  if (prefix.length === 5) {\r\n    layeredAssignment(pFillerSeq, prefix as any, current)\r\n    return\r\n  }\r\n\r\n  for (const i of allWeights)\r\n    if (prob[i] > 0)\r\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\r\n}\r\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\r\n\r\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\r\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\r\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\r\n\r\n/**\r\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\r\n *\r\n * 0 <= n <= 5; 0 <= r <= n\r\n */\r\nconst cnr = Array(6).fill(0).map((_, n) => {\r\n  const result = [1]\r\n  let r = 0, value = 1\r\n  while (++r <= n) {\r\n    value *= n - r + 1\r\n    value /= r\r\n    result.push(value)\r\n  }\r\n\r\n  return result\r\n})\r\n\r\n/**\r\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\r\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\r\n *\r\n * 0 <= n <= 5; 0 <= i < 3*n + 1\r\n */\r\nconst pNExtra = [[1]]\r\nwhile (pNExtra.length < 6) {\r\n  const last = pNExtra[pNExtra.length - 1]\r\n  const next = Array(last.length + 3).fill(0)\r\n  last.forEach((value, i) => {\r\n    for (const j of [0, 1, 2, 3]) {\r\n      next[i + j] += value\r\n    }\r\n  })\r\n\r\n  pNExtra.push(next.map(x => x / 4))\r\n}\r\nfor (const array of pNExtra) {\r\n  let accu = array.reduce((a, b) => a + b)\r\n  array.forEach((x, i, array) => {\r\n    array[i] = accu\r\n    accu -= x\r\n  })\r\n}\r\n\r\n/** Probability that `artifact` will have at least `target` stats at max level */\r\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\r\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\r\n\r\n  const { rarity, level, substats } = artifact\r\n\r\n  // `target = target - mainstat - substat` to find the extra substats we need\r\n  // Also count filler rolls (4 - # of substats) while we're at it\r\n  const target = { ..._target }, required = new Set(Object.keys(target))\r\n  let numFillerSlots = 0\r\n  {\r\n    const key = artifact.mainStatKey\r\n    if (key in target) {\r\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\r\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\r\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\r\n\r\n      delete target[key]\r\n      required.delete(key as SubstatKey)\r\n    }\r\n  }\r\n  for (const { key, value } of substats) {\r\n    if (key) {\r\n      if (required.has(key)) {\r\n        required.delete(key)\r\n        if (target[key]! > value)\r\n          target[key]! -= value\r\n        else delete target[key] // Requirement already met\r\n      }\r\n    } else numFillerSlots += 1\r\n  }\r\n  numFillerSlots += 4 - substats.length\r\n\r\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\r\n\r\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\r\n\r\n  // normalize `target`\r\n  for (const [key, value] of Object.entries(target))\r\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\r\n\r\n  let minTotalUpgrades = 0\r\n  const targetEntries = Object.entries(target).map(([key, target]) => {\r\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\r\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\r\n    minTotalUpgrades += minUpgrade\r\n    return { target, filler, minUpgrade }\r\n  }).reverse()\r\n\r\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\r\n\r\n  /**\r\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\r\n   *\r\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\r\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\r\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\r\n   *\r\n   * Then\r\n   *\r\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\r\n   *\r\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\r\n   *\r\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\r\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\r\n   *  g(0, N) = 1\r\n   *  g(0, n) = 0 for n != N\r\n   *\r\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\r\n   */\r\n\r\n  // At this point,\r\n  //  `target` = ceil(T / alpha)\r\n  //  `numUpgradeRolls` = Nu\r\n\r\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\r\n\r\n  // Keep applying `target` from first to last.\r\n  // At each step i in the loop, `result[n]` = g(i, n)\r\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\r\n    const next: typeof result = {}\r\n\r\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\r\n      // rolls = m; extra = T(i) / alpha - 7n\r\n\r\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\r\n      const extra = target - 7 * (rolls + filler)\r\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\r\n      //        = f(m + Nf(i), T(i))\r\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\r\n\r\n      for (const [_remaining, probability] of Object.entries(result)) {\r\n        const remaining = parseInt(_remaining)\r\n        if (remaining < rolls) continue\r\n\r\n        // n := remaining - m\r\n        // remaining = n + m\r\n        // probability = g(i, n + m)\r\n\r\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\r\n        //          = h(n + m, m, |K| - i)\r\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\r\n        const index = remaining - rolls // n\r\n\r\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\r\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\r\n      }\r\n    }\r\n    result = next\r\n  })\r\n\r\n  // At this point, `result[i]` = g(|K|, i)\r\n\r\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\r\n}\r\n\r\n/**\r\n * Pr[ N(k) = n | N = m, |K| = M ]\r\n *\r\n * 0 <= n <= N <= 5; 0 <= M <= 4\r\n */\r\nfunction pRollInto(m: number, n: number, M: number) {\r\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\r\n}\r\n\r\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\r\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\r\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\r\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\r\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\r\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\r\n\r\n  const mainStatRatio = fWeight[mainStat] ?? 0\r\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\r\n\r\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\r\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\r\n  for (const { key } of substats) {\r\n    if (key) {\r\n      const ratio = fWeight[key]\r\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\r\n      numUnusedSubstats[ratio] -= 1\r\n    }\r\n  }\r\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\r\n\r\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\r\n  for (const key of required) requiredCount[fWeight[key]] += 1\r\n\r\n  let total = 0\r\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\r\n    total += prob\r\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\r\n    for (const key of path) currentCount[key] += 1\r\n\r\n    let sum = prob\r\n    for (const i of allWeights) {\r\n      const current = currentCount[i], required = requiredCount[i]\r\n      if (current < required) return\r\n      sum *= cnr[current][required]\r\n    }\r\n\r\n    pFillerRolls += sum\r\n  })\r\n\r\n  for (const i of allWeights)\r\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\r\n  return pFillerRolls / total\r\n}\r\n\r\nexport { probability }\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useArtifact(artifactID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\r\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\r\n  useEffect(() =>\r\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\r\n    [artifactID, setArtifact, database])\r\n  return artifact\r\n}\r\n"],"names":["ArtifactLevelSlider","levelLow","levelHigh","setLow","setHigh","setBoth","dark","disabled","showLevelText","useState","sliderLow","setsliderLow","sliderHigh","setsliderHigh","setSlider","useCallback","e","l","h","useEffect","sx","width","display","alignItems","bgcolor","value","onChange","val","clamp","pl","inputProps","textAlign","startAdornment","undefined","flexGrow","mx","getAriaLabel","onChangeCommitted","valueLabelDisplay","min","max","step","marks","px","CharacterDropdownButton","unSelectText","unSelectIcon","inventory","noUnselect","filter","props","t","useTranslation","database","useContext","DatabaseContext","characterSheets","usePromise","CharacterSheet","characterSheet","filterConfigs","useMemo","characterFilterConfigs","characterKeys","_getCharKeys","ck","sort","title","name","color","startIcon","thumbImg","src","thumbImgSide","onClick","selected","variant","noWrap","CharacterMenuItemArray","selectedCharacterKey","faves","filterFunction","element","weaponType","favorite","map","characterKey","CharMenuItem","nonFaves","concat","Suspense","fallback","ml","mr","LocationName","location","component","nameWIthIcon","verticalAlign","ThumbSide","styled","theme","height","lineHeight","marginTop","spacing","marginLeft","marginRight","marginBottom","StyledInputBase","InputBase","backgroundColor","palette","primary","main","transition","Wrapper","Button","padding","overflow","CustomNumberInputButtonGroupWrapper","children","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","float","number","setNumber","focused","setFocus","parseFunc","parseFloat","parseInt","onBlur","onFocus","onInputChange","target","onKeyDOwn","key","type","onKeyDown","StatFilterCard","statFilters","setStatFilters","data","DataContext","statKeys","get","input","push","charEle","remainingKeys","Object","keys","some","k","setFilter","sKey","gap","justifyContent","placement","flexDirection","entries","statKey","StatFilterItem","close","isFloat","KeyMap","s","flexBasis","placeholder","icon","faTrashAlt","initGlobalSettings","tcMode","ArtifactEditor","lazy","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","disableEditSetSlot","databaseArtifact","useArtifact","sheet","ArtifactSheet","setKey","editable","showEditor","setshowEditor","onHideEditor","onShowEditor","art","id","lock","slotKey","rarity","level","mainStatKey","substats","exclude","mainStatLevel","Math","mainStatUnit","levelVariant","floor","Artifact","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","faInfoCircle","setEffects","setDescTooltip","setNumKey","setNum","setEffectDesc","minHeight","artifactIdToEdit","cancelEdit","className","position","updateArt","right","bottom","zIndex","pt","size","label","StatIcon","cacheValueString","stars","colored","top","slotIcons","pb","stat","SubstatDisplay","my","valid","mb","probability","toFixed","container","charKey","setArtLocation","faEdit","arrow","faBan","faChartLine","numRolls","rolls","length","maxRoll","rollData","rollOffset","rollColor","efficiency","effOpacity","clamp01","statName","unit","inFilter","has","alignContent","v","i","SmolProgress","indexOf","opacity","minWidth","borderRadius","PercentBadge","badgeColor","text","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","prob","sumProb","current","layeredAssignment","cnr","Array","fill","_","n","result","r","pNExtra","last","next","forEach","x","array","accu","reduce","a","b","artifact","_target","NaN","required","numFillerSlots","maxLevel","ArtifactMainStatsData","delete","numUpgradeRolls","ceil","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","extra","pExtra","_remaining","remaining","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","path","currentCount","sum","calculatePFillerRolls","values","artifactID","_getArt","setArtifact","followArt"],"sourceRoot":""}