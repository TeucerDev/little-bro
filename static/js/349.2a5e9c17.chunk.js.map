{"version":3,"file":"static/js/349.2a5e9c17.chunk.js","mappings":"gHAqFO,SAASA,EAAaC,EAAyBC,GACpD,GAAKD,GAAQC,EAEb,OADCC,MAAMC,QAAQF,IAASG,QAAQC,MAAMJ,GAC/BA,EAAKK,QAAO,SAACC,EAAGC,GAAJ,cAAUD,QAAV,IAAUA,OAAV,EAAUA,EAAIC,KAAIR,GA4BhC,SAASS,EAA2CR,EAAoBS,GAC7E,OAAOC,OAAOC,YAAYX,EAAKS,KAAI,SAACF,EAAGK,GAAJ,MAAU,CAACL,EAAGE,EAAIF,EAAGK,QAGnD,SAASC,EAAmDC,EAAqBL,GACtF,OAAOC,OAAOC,YAAYG,EAAML,KAAI,SAACM,EAAGH,GAAJ,OAAUH,EAAIM,EAAGH,OAKhD,SAASI,EAAkCjB,EAA4BkB,GAC5E,OAAOP,OAAOC,YAAYD,OAAOQ,QAAQnB,GAAKU,KAC5C,WAASG,GAAT,mBAAEL,EAAF,KAAKY,EAAL,WAAe,CAACZ,EAAGU,EAAGE,EAAGZ,EAAGK,QAIhC,IAAMQ,GAAQ,eAAG,SAAXA,EAAsBC,EAAcC,GAAzB,4EACNV,EAAIS,EADE,YACIT,GAAKU,GADT,gBACkB,OADlB,SACwBV,EADxB,OACaA,IADb,mDAAXQ,MAKC,SAASG,EAAMF,EAAcC,GAClC,OAAO,OAAIF,EAASC,EAAMC,IAGrB,SAASE,EAAkBC,GAChC,MAAM,IAAIC,MAAJ,2CAA8CD,I,qECnIzBE,EAASC,IAAK,CAAEC,KAAM,SAChCC,EAAQ,GAAaA,EAAQ,GAC5BH,EAAS,QAKtB,SAASA,EAASF,EAAoCM,GAC3D,MAAwB,kBAAVN,EACV,CAAEO,UAAW,QAASC,SAAU,GAAIC,KAAM,SAAUT,MAAAA,EAAOM,KAAAA,GAC3D,CAAEC,UAAW,QAASC,SAAU,GAAIC,KAAM,SAAUT,MAAAA,EAAOM,KAAAA,GAG1D,SAASD,EAAQL,EAAeM,GAGrC,OAFIN,GAASU,OAAOC,UAAY,MAAKX,EAAQY,EAAAA,GACzCZ,IAAUU,OAAOC,UAAY,MAAKX,GAASY,EAAAA,GACxCV,EAASF,GAAD,QAAUa,KAAM,KAAQP,IAsBlC,SAASQ,IAAoC,IAAD,uBAA5BC,EAA4B,yBAA5BA,EAA4B,gBACjD,MAAO,CAAER,UAAW,MAAOC,SAAUQ,EAAQD,IAKxC,SAASE,IAAoC,IAAD,uBAA5BF,EAA4B,yBAA5BA,EAA4B,gBACjD,MAAO,CAAER,UAAW,MAAOC,SAAUQ,EAAQD,IAyGxC,SAASG,EAAWC,EAAyBb,GAClD,MAAO,CAAEC,UAAW,OAAQC,SAAU,GAAIW,KAAAA,EAAMb,KAAAA,EAAMG,KAAM,UAwB9D,SAASO,EAAQD,GACf,OAAOA,EAAO/B,KAAI,SAAAgB,GAAK,MAAqB,kBAAVA,EAAqBA,EAAQE,EAASF,MAK1E,SAASoB,EAAMpB,GACb,MAAyB,kBAAVA,EAAsBE,EAASF,GAASA,EC7KlD,SAASqB,EAA0CC,EAAeC,EAA+BC,GACtG,IAAMC,EAAW,IAAIC,IAAUC,EAAU,IAAID,IAqB7CJ,EAASM,SAnBT,SAASC,EAASC,GACZH,EAAQI,IAAID,KAEZL,EAASM,IAAID,GACfpD,QAAQC,MAAM,uDAGhB8C,EAASO,IAAIF,GAEbP,EAAQO,GAERA,EAAQtB,SAASoB,QAAQC,GAEzBL,EAASM,GAETL,EAASQ,OAAOH,GAChBH,EAAQK,IAAIF,QAMT,SAASI,EAA+HZ,EAAmBa,EAAmDC,GACnN,IAAMX,EAAW,IAAIC,IACfW,EAAgB,IAAIC,IACpBC,EAAiB,IAAID,IAE3B,SAASE,EAAMV,GACb,IAAIP,EAAwCc,EAAcI,IAAIX,GAC9D,GAAIP,EAAS,OAAOA,EACpBA,EAAUY,EAAWL,GAErB,IAAIN,EAAWe,EAAeE,IAAIlB,GAClC,OAAIC,IAEAC,EAASM,IAAIR,IACf7C,QAAQC,MAAM,oDACPuB,EAASC,OAElBsB,EAASO,IAAIT,GAEbC,EAAWY,EASb,SAAkBN,GAChB,IAAMtB,EAAWsB,EAAQtB,SAASxB,IAAIwD,GACtC,OAAOE,EAA6BlC,EAAUsB,EAAQtB,UAAYsB,GAA3D,kBAA0EA,GAA1E,IAAmFtB,SAAAA,IAXnEqB,CAASN,GAAUO,GAE1CL,EAASQ,OAAOV,GAEhBc,EAAcM,IAAIb,EAASN,GAC3Be,EAAeI,IAAIpB,EAASC,GACrBA,IAQT,IAAMoB,EAAStB,EAAStC,IAAIwD,GAC5B,OAAOE,EAA2BE,EAAQtB,GAAYA,EAAkBsB,EAGnE,SAASC,EAA6DvB,EAAmBwB,EAAkB9D,GAChH,IAAM+D,EAAiB,IAAIT,IAC3B,SAASU,EAAYlB,EAAgBgB,GACnC,IAAIG,EAAUF,EAAeN,IAAIK,GAC5BG,GAASF,EAAeJ,IAAIG,EAASG,EAAU,CAAC,IAAIvB,IAAO,IAAIY,MACpE,MAA4BW,EAA5B,eAAOxB,EAAP,KAAiByB,EAAjB,KAEMC,EAAMD,EAAQT,IAAIX,GACxB,GAAIqB,EAAK,OAAOA,EAEhB,GAAI1B,EAASM,IAAID,GACf,MAAM,IAAI7B,MAAM,oDAElBwB,EAASO,IAAIF,GACb,IAAMsB,EAAapE,EAAI8C,EAASgB,EAASE,GAIzC,OAHAE,EAAQP,IAAIb,EAASsB,GACrB3B,EAASQ,OAAOH,GAETsB,EAET,OAAO9B,EAAStC,KAAI,SAAA8C,GAAO,OAAIkB,EAAYlB,EAASgB,MAGtD,SAASJ,EAAc7D,EAA6BwE,GAClD,YAAUC,IAANzE,OAA8ByE,IAAND,OAClBC,IAAND,IAEGxE,EAAE0E,SAAWF,EAAEE,QAAU1E,EAAE2E,OAAM,SAACxD,EAAOb,GAAR,OAAca,IAAUqD,EAAElE,OCpGpE,IAAMsE,EAAkG,CACtG3C,IAAK,SAAC4C,GAAD,OAAyBC,KAAK7C,IAAL,MAAA6C,MAAI,OAAQD,KAC1CzC,IAAK,SAACyC,GAAD,OAAyBC,KAAK1C,IAAL,MAAA0C,MAAI,OAAQD,KAC1C1B,IAAK,SAAC0B,GAAD,OAAyBA,EAAE9E,QAAO,SAACC,EAAGwE,GAAJ,OAAUxE,EAAIwE,IAAG,IACxDO,IAAK,SAACF,GAAD,OAAyBA,EAAE9E,QAAO,SAACC,EAAGwE,GAAJ,OAAUxE,EAAIwE,IAAG,KAE7CQ,GAA2E,kBACnFJ,GADmF,IAEtFK,IAAK,YAA8B,IAA5BA,GAA2B,eAChC,OAAIA,EAAM,EAAU,EAAIA,EAAM,EACrBA,GAAO,IAAa,GAAW,EAANA,EAAU,GACrC,EAAIA,GAEbC,SAAU,SAACL,GAAD,OAAyBA,EAAE,GAAKA,EAAE9E,QAAO,SAACC,EAAGwE,GAAJ,OAAUxE,EAAIwE,MACjEW,UAAW,+BAAEhE,EAAF,KAASgE,EAAT,KAAoBC,EAApB,KAA0BC,EAA1B,YAAsDlE,GAASgE,EAAYC,EAAOC,KAGzFC,EAAgC,IAAIzC,IAAIzC,OAAOV,KAAKkF,IAmD1D,SAASW,EAAQ9C,GACf,OAAOY,EAAYZ,GAAU,SAAA+C,GAAC,OAAIA,KAAG,SAAAC,GACnC,IAAI1B,EAAS0B,EACb,GAAIH,EAA8BpC,IAAIuC,EAAS/D,WAAyB,CACtE,IAAMuB,EAAUwC,EACR/D,EAAcuB,EAAdvB,UAEJgE,GAAY,EACV/D,EAAWsB,EAAQtB,SAASgE,SAAQ,SAAAC,GAAG,OAC1CA,EAAIlE,YAAcA,GAAcgE,GAAY,EAAME,EAAIjE,UAAY,CAACiE,MACtE7B,EAAS2B,GAAS,kBAAQzC,GAAR,IAAiBtB,SAAAA,IAAasB,EAGlD,OAAOc,KAGX,SAAS8B,EAAYpD,GACnB,SAASqD,EAAiBC,GACxB,IAD6D,EACvDhC,EAAS,IAAIN,IAD0C,UAEzCsC,GAFyC,IAE7D,2BAA2B,OAAhB5E,EAAgB,QAAA4C,EAAOD,IAAI3C,GAAO,UAAC4C,EAAOH,IAAIzC,UAAZ,QAAsB,GAAK,IAFX,8BAG7D,OAAO4C,EAcT,IARA,IAAMiC,EAAO,CACXC,OAAQ,CACNC,OAAQ,IAAIzC,IACZhB,SAAU,IAAII,IACdnB,UAAW,QAdoC,aAwBjD,IALA,IAb0BwE,EAatBC,OAAoC,EAElCC,EAAiC,CAAE1E,UAAWsE,EAAKC,OAAOvE,UAAWC,UAfjDuE,EAe2EF,EAAKC,OAAOC,QAd1G,OAAIA,GAAQP,SAAQ,+BAAEC,EAAF,KAAOS,EAAP,YAAkB1G,MAAM0G,GAAOC,KAAKV,QAgB3DW,EAAwB,IAAI9C,IAChC,MAAwBrD,OAAOV,KAAKkF,GAApC,gBAAK,IAAMlD,EAAS,KAClB6E,EAAsBzC,IAAIpC,EAAW,IA0EvC,GAxEAe,EAAWY,EAAYZ,GAAU,SAAAgD,GAC/B,GAAIO,EAAKC,OAAOxD,SAASS,IAAIuC,GAAW,CACtC,IAAMxC,EAAUwC,EACVe,EAAkB,IAAI/C,IAAIuC,EAAKC,OAAOC,QACtCvE,EAAWsB,EAAQtB,SAAS8E,QAAO,SAAAb,GACvC,IAAMS,EAAQG,EAAgB5C,IAAIgC,GAClC,OAAIS,IACFG,EAAgB1C,IAAI8B,EAAKS,EAAQ,IAC1B,MAKX,OAAK1E,EAAS+C,QAEd/C,EAAS+E,KAAKN,IACP,kBAAKnD,GAAZ,IAAqBtB,SAAAA,KAFZyE,EAIX,OAAOX,KACN,SAAAA,GACD,IAAKH,EAA8BpC,IAAIuC,EAAS/D,WAAmB,OAAO+D,EAC1E,IAAMxC,EAAUwC,EAEhB,GAAIU,GACF,GAAIA,EAAKzE,YAAcuB,EAAQvB,UAAW,CACxC,IADwC,EAClCiF,EAAgBb,EAAc7C,EAAQtB,UAAWiF,EAAe,IAAInD,IACpEoD,EAAaV,EAAKD,OACpBY,EAAQ,EAH4B,UAKCH,EAAc/F,WALf,IAKxC,2BAAkE,CAAC,IAAD,uBAAtDmG,EAAsD,KAA1CC,EAA0C,KAC1DC,EAAcnC,KAAK7C,IAAI+E,EAAT,UAAuBH,EAAWjD,IAAImD,UAAtC,QAAqD,GACrEE,GACFL,EAAa9C,IAAIiD,EAAYE,GAC7BH,GAASG,GACJL,EAAaxD,OAAO2D,IAVW,8BAYpCD,EAAQ,IACVX,EAAKD,OAASU,EACdT,EAAK1D,SAASU,IAAIF,SAGjB,CACL,IADK,EACCiE,EAAaX,EAAsB3C,IAAIX,EAAQvB,WAC/CwE,EAASJ,EAAc7C,EAAQtB,UAFhC,UAIsCuF,GAJtC,IAIL,2BAAuD,CAAC,IAAD,uBAA3CC,EAA2C,KAAhCC,EAAgC,KACjDN,EAAQ,EAENF,EAAe,IAAInD,IAH4B,UAIV2D,EAAgBxG,WAJN,IAIrD,2BAAsE,CAAC,IAAD,uBAA1DmG,EAA0D,KAA9CM,EAA8C,KAC9DhB,EAAQvB,KAAK7C,IAAIoF,EAAT,UAAyBnB,EAAOtC,IAAImD,UAApC,QAAmD,GAC7DV,IACFO,EAAa9C,IAAIiD,EAAYV,GAC7BS,GAAST,IARwC,8BAWrD,GAAIS,EAAQ,EAAG,CACbX,EAAO,CACLD,OAAQU,EACRnE,SAAU,IAAII,IAAI,CAACI,EAASkE,IAC5BzF,UAAWuB,EAAQvB,WAErB6E,EAAsBe,QACtB,QAtBC,8BAyBAnB,GAAMe,EAAWR,KAAK,CAACzD,EAASiD,IAGvC,OAAOjD,MAGLkD,EACC,cADKH,EAAKC,OAASE,KAjFb,kBAkFN,MAGP,OAAO1D,EAOF,SAAS8E,EAAa9E,EAAqB+E,GAAyG,IAArFC,EAAoF,uDAAvE,SAAChC,GAAD,OAAqD,GAEhIiC,EAAkB,CAAEC,KAAM,GAAIC,UAAW,IAAInE,KAC7CoE,EAAiB,IAAIpE,IAAI,CAAC,CAACiE,EAAQ,IAAIjE,OAEvCQ,EAAU,CAAE0D,KAAM,CAACH,GAAeI,UAAW,IAAInE,KAGvD,OAFAoE,EAAe/D,IAAIG,EAAS,IAAIR,KAChCoE,EAAejE,IAAI8D,GAAS5D,IAAI0D,EAAcvD,GACvCD,EAA6DvB,EAAUwB,GAAS,SAAChB,EAASgB,EAAS9D,GAAS,IAAD,EAG5G4D,EAFIrC,EAAcuB,EAAdvB,UAAuBoG,EAAO,SAACjD,EAAYkD,GAAb,OAAmC5H,EAAI0E,EAAGkD,IAC1EC,EAAU,SAACnD,EAAYkD,GAAb,OAAmC5H,EAAI0E,EAAGkD,IAE1D,OAAQrG,GACN,IAAK,QAASqC,EAASd,EAAS,MAChC,IAAK,MAAO,IAAK,MAAO,IAAK,MAAO,IAAK,MACvC,IAAMuC,EAAIR,EAActD,GAClBuG,EAA4B,GAC5BC,EAA6BjF,EAAQtB,SAAS8E,QAAO,SAAAxD,GACzD,IAAMkF,EAASL,EAAK7E,EAASgB,GAC7B,MAA6B,UAArBkE,EAAOzG,YACVuG,EAAgBvB,KAAKyB,EAAOhH,QAAQ,MAExChB,KAAI,SAAA0E,GAAC,OAAIiD,EAAKjD,EAAGZ,MACdmE,EAAe5C,EAAEyC,GAcvB,GAAKI,SAASD,IAOP,GAAkB,QAAd1G,GAAwC,IAAjB0G,EAAoB,CACpDrE,EAAS1C,EAAS+G,GAClB,YARA,GAAmB,QAAd1G,IACY,QAAdA,GAAuB0G,EAAe,KACxB,QAAd1G,GAAuB0G,EAAe,GAAI,CAC3CrE,EAAS1C,EAAS+G,GAClB,MAOAA,IAAiB5C,EAAE,KACrB0C,EAAgBxB,KAAKrF,EAAS+G,IACCrE,EAA7BmE,EAAgBxD,QAAU,EAAS,UAAGwD,EAAgB,UAAnB,QAAyB7G,EAASmE,EAAE,KAC7D,CAAE9D,UAAAA,EAAWC,SAAUuG,GACrC,MACF,IAAK,MAAO,IAAK,WACf,IAAMvG,EAAWsB,EAAQtB,SAASxB,KAAI,SAAA0E,GAAC,OAAIiD,EAAKjD,EAAGZ,MAC7CuB,EAAIR,EAActD,GAEtBqC,EADEpC,EAASgD,OAAM,SAAAE,GAAC,MAAoB,UAAhBA,EAAEnD,aACfL,EAASmE,EAAE7D,EAASxB,KAAI,SAAA0E,GAAC,OAAKA,EAA2B1D,YACzD,kBAAQ8B,GAAR,IAAiBtB,SAAAA,IAC5B,MAEF,IAAK,SACH,IAAM2G,EAAQN,EAAQ/E,EAAQtB,SAAS,GAAIsC,GAC3C,GAAwB,UAApBqE,EAAM5G,UAAuB,CAAC,IAAD,EACzB6G,EAAQ,UAAGtF,EAAQuF,MAAMF,EAAMnH,cAAvB,QAAkC8B,EAAQtB,SAAS,GACjE,GAAI4G,EAAU,CACZxE,EAAS5D,EAAIoI,EAAUtE,GACvB,OAGJ,MAAM,IAAI7C,MAAJ,sBAAyBM,EAAzB,wBAER,IAAK,OACH,IAAM+G,EAAQxF,EAAQtB,SAAS+G,MAAK,SAAAC,GAClC,IAAMR,EAASH,EAAQW,EAAI1E,GAC3B,GAAyB,UAArBkE,EAAOzG,UACT,MAAM,IAAIN,MAAJ,sBAAyBM,EAAzB,wBACR,YAAwB+C,IAAjB0D,EAAOhH,SAEhB4C,EAAS0E,EAAQT,EAAQS,EAAOxE,GAAW5C,OAASoD,GACpD,MAEF,IAAK,QAAU,IAAD,IACRmE,OAAWnE,EADH,UAEUxB,EAAQtB,UAFlB,IAEZ,2BAAwC,CAAC,IAAD,EAA7BkH,EAA6B,QAChCV,EAASH,EAAQa,EAAS5E,GAChC,GAAyB,UAArBkE,EAAOzG,UACT,MAAM,IAAIN,MAAJ,sBAAyBM,EAAzB,8BACgB+C,KAAZ,QAAR,EAAAmE,SAAA,eAAUzH,aAAyCsD,IAAjB0D,EAAOhH,OAAuBgH,EAAOhH,MAAQyH,EAASzH,SAC1FyH,EAAWT,IAPH,8BASZpE,EAAM,UAAG6E,SAAH,QAAevH,OAASoD,GAC9B,MAEF,IAAK,QACH,MAAiCxB,EAAQtB,SAASxB,KAAI,SAAC0E,GAAD,OAA0B1E,EAAI0E,EAAGZ,MAAvF,eAAO6E,EAAP,KAAWC,EAAX,KAAeC,EAAf,KAAsBC,EAAtB,KACA,GAAqB,UAAjBH,EAAGpH,WAA0C,UAAjBqH,EAAGrH,UACjC,MAAM,IAAIN,MAAJ,sBAAyBM,EAAzB,wBACRqC,EAAU+E,EAAG3H,QAAU4H,EAAG5H,MAAS6H,EAAQC,EAC3C,MAEF,IAAK,YACH,MAAuChG,EAAQtB,SAASxB,KAAI,SAAA0E,GAAC,OAAI1E,EAAI0E,EAAGZ,MAAxE,eAAO9C,EAAP,KAAcgE,EAAd,KAAyBC,EAAzB,KAA+BC,EAA/B,KAEEtB,EADqB,UAAnBqB,EAAK1D,WAA4C,UAAnB2D,EAAK3D,WAAyB0D,EAAKjE,QAAUkE,EAAKlE,MACzEiE,EACkB,UAApBjE,EAAMO,WAAiD,UAAxByD,EAAUzD,UACvCP,EAAMA,OAASgE,EAAUhE,MAAQiE,EAAOC,GAE3C,kBAAQpC,GAAR,IAAiBtB,SAAU,CAACR,EAAOgE,EAAWC,EAAMC,KAC5D,MAEF,IAAK,YACH,IAAMiD,EAAQR,EAAK7E,EAAQtB,SAAS,GAAIsC,GACxC,GAAwB,UAApBqE,EAAM5G,UACR,MAAM,IAAIN,MAAM,mDAClB2C,EAAS1C,EAAS4B,EAAQiG,KAAKZ,EAAMnH,QACrC,MAEF,IAAK,OACH,IAAMQ,EAAWsC,EAAQ0D,KACtBxH,KAAI,SAAA0E,GAAC,OAAIrF,EAAaqF,EAAG5B,EAAQX,SACjCmE,QAAO,SAAA5B,GAAC,OAAIA,KAEf,GAAwB,IAApBlD,EAAS+C,OACX,GAAI+C,EAAWxE,GAAU,CACvB,IAAQkG,EAASlG,EAATkG,KAENpF,OADWU,IAAT0E,GAA+B,UAATA,EACE,WAAjBlG,EAAQrB,KAAoBP,OAASoD,GAAapD,EAASC,KACxDD,EAAS2D,EAAcmE,GAAM,UACtCpF,EAASd,OAEhBc,OAD0BU,IAAjBxB,EAAQkG,MAA0C,IAApBxH,EAAS+C,OACvCvE,EAAIwB,EAASA,EAAS+C,OAAS,GAAIT,GAEnC9D,EAAI,CAAEuB,UAAWuB,EAAQkG,KAAMxH,SAAAA,GAAyCsC,GACnF,MAEF,IAAK,OACChB,EAAQmG,QAAOnF,EAAUyD,GAC7B,IAAM2B,EAAUxB,EAAejE,IAAIK,GAC/BqF,EAAcD,EAAQzF,IAAIX,EAAQ0E,MACjC2B,IACHA,EAAc,CAAE3B,KAAK,GAAD,eAAM1D,EAAQ0D,MAAd,CAAoB1E,EAAQ0E,OAAOC,UAAW,IAAInE,KACtEoE,EAAe/D,IAAIwF,EAAa,IAAI7F,KACpC4F,EAAQvF,IAAIb,EAAQ0E,KAAM2B,IAE5BvF,EAAS5D,EAAI8C,EAAQtB,SAAS,GAAI2H,GAClC,MAEF,QAASpI,EAAkBQ,GAO7B,OAJIqC,EAAOtC,aACTsC,GAAM,UAAQA,IACAtC,KAETsC,KAIJ,ICpWMwF,EAAc,CAAC,SAAU,QAAS,QAAS,SAAU,WA0DrDC,GAxDkB,CAAI,YAAJ,OADJ,CAAC,QAAS,MAAO,UAAW,QAAS,OAAQ,OAAQ,WAyDxC,CACtC,SACA,OACA,QACA,cACA,UACA,SACA,UACA,UACA,WACA,SACA,OACA,QACA,QACA,OACA,OACA,UACA,SACA,QACA,QACA,QACA,OACA,kBACA,QACA,gBACA,gBACA,SACA,OACA,YACA,cACA,QACA,OACA,OACA,SACA,QACA,YACA,SACA,OACA,eACA,QACA,UACA,oBACA,OACA,SACA,kBACA,UACA,YACA,cACA,QACA,WACA,QACA,YACA,OACA,UACA,SACA,UACA,SACA,QACA,UACA,SACA,YAwBWC,GAtBqB,UAC7BD,EAD6B,CAEhC,aAoB0B,CAC1B,gBACA,cACA,kBACA,mBAE2B,UACxBA,EACAC,GAG6B,UAC7BD,EAxBwB,CAC3B,iBACA,eACA,mBACA,mBAE2B,CAC3B,iBACA,eACA,mBACA,oBA6LwB,UA1KQ,CAChC,kBACA,gBACA,sBACA,kBACA,YACA,oBACA,gBACA,YACA,gBACA,kBACA,cACA,eACA,oBACA,kBACA,YACA,iBACA,iBACA,YACA,uBACA,uBACA,mBACA,iBACA,mBACA,eACA,cACA,gBACA,eACA,eACA,oBACA,gBACA,gBACA,WACA,sBACA,mBAImC,CACnC,YACA,oBACA,yBACA,aACA,qBACA,gBACA,gBACA,wBACA,cACA,mBACA,qBACA,cACA,mBACA,cACA,uBACA,kBACA,wBACA,eACA,qBACA,eACA,uBACA,oBACA,UACA,cACA,mBACA,aACA,sBACA,mBAIkC,CAClC,qBACA,iBACA,cACA,kBACA,eACA,aACA,cACA,mBACA,qBACA,gBACA,UACA,YACA,mBACA,cACA,mBACA,cACA,4BACA,uBACA,aACA,eACA,cACA,yBACA,WACA,mBACA,kBACA,eAI8B,CAC9B,cACA,UACA,gBACA,mBACA,cACA,iBACA,eACA,iBACA,iBACA,WACA,aACA,cACA,cACA,YACA,oBACA,aACA,YACA,WACA,oBACA,WACA,aACA,WACA,OACA,iBACA,qBACA,oBACA,cACA,YACA,gBACA,qBACA,kBACA,gBAImC,CACnC,2BACA,mBACA,0BACA,kBACA,cACA,aACA,sBACA,kBACA,gBACA,cACA,qBACA,eACA,gBACA,6BACA,aACA,YACA,eACA,eACA,oBACA,iBACA,iBACA,gBACA,uBACA,eACA,aACA,aACA,gCACA,eACA,oBACA,gB,qBCqCeE,IAAAA,GAAAA,EAAAA,EAAAA,KAAAA,KAoBAC,IA5XV,SAASC,EAASC,EAAkBC,EAAmBC,EAAuBC,EAAgBC,EAA4BC,GAU/H,IATA,IAAIC,EAASD,EAEPE,EACQ,CAAEC,gBAAgB,GAD1BD,EAEW,CAAEC,gBAAgB,GAF7BD,EAGY,CAAEE,UAAU,GAHxBF,EAIM,CAAEG,YAAY,EAAMC,eAAe,EAAMH,gBAAgB,GAEjEhE,EAAQ,EACLjG,OAAO8B,OAAOiI,GAAQM,MAAK,SAAA5F,GAAC,OAAIA,MAAMwB,IAAU,IAAI,CACzD,GAAI8D,EAAOI,WAAY,QACdJ,EAAOI,WACd,IAAMG,EAAUH,EAAWR,EAAMC,EAAQC,GACrCF,IAASW,IACXX,EAAOW,EACPP,GAAM,kBAAQA,GAAWC,IAG7B,GAAID,EAAOK,cAAe,QACjBL,EAAOK,cACd,IAAME,EAAUF,EAAcX,EAAOE,EAAMD,GACvCC,IAASW,IACXX,EAAOW,EACPP,GAAM,kBAAQA,GAAWC,IAG7B,GAAID,EAAOE,eAAgB,QAClBF,EAAOE,eACd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","sources":["Util/Util.ts","Formula/utils.ts","Formula/internal.ts","Formula/optimization.ts","Types/consts.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/common.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/BNBSplitWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/BackgroundWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/ComputeWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/DefaultSplitWorker.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export const getRandomElementFromArray = <T>(array: readonly T[]): T => array[Math.floor(Math.random() * array.length)];\r\nexport function getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nexport function getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\r\n}\r\nexport function getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\n/**\r\n * Assumes that the object entries are all primitives + objects\r\n * shallow copy the object,\r\n * deep copy the\r\n * @param obj\r\n * @returns\r\n */\r\nexport function deepClone<T>(obj: T): T {\r\n  if (!obj) return obj\r\n  if (!Object.keys(obj).length) return {} as T\r\n  const ret = { ...obj }\r\n  Object.entries(obj).forEach(([k, v]: any) => {\r\n    if (typeof v !== \"object\") return\r\n    ret[k] = JSON.parse(JSON.stringify(v))\r\n  })\r\n  return ret\r\n}\r\n\r\nexport const clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nexport const getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nexport const clamp01 = (val) => clamp(val, 0, 1)\r\nexport const clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nexport function strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nexport function hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\n\r\n//multiplies every numerical value in the obj by a multiplier.\r\nexport function objMultiplication(obj, multi) {\r\n  if (multi === 1) return obj\r\n  Object.keys(obj).forEach((prop: any) => {\r\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\r\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\r\n  })\r\n  return obj\r\n}\r\n\r\n//assign obj.[keys...] = value\r\nexport function layeredAssignment(obj, keys: readonly string[], value) {\r\n  keys.reduce((accu, key, i, arr) => {\r\n    if (i === arr.length - 1) return (accu[key] = value)\r\n    if (!accu[key]) accu[key] = {}\r\n    return accu[key]\r\n  }, obj)\r\n  return obj\r\n}\r\n//get the value in a nested object, giving array of path\r\nexport function objPathValue(obj: object | undefined, keys: readonly string[]): any {\r\n  if (!obj || !keys) return undefined;\r\n  !Array.isArray(keys) && console.error(keys)\r\n  return keys.reduce((a, k) => a?.[k], obj)\r\n}\r\n//delete the value denoted by the path. Will also delete empty objects as well.\r\nexport function deletePropPath(obj, path) {\r\n  const tempPath = [...path]\r\n  const lastKey = tempPath.pop()\r\n  const objPathed = objPathValue(obj, tempPath)\r\n  delete objPathed?.[lastKey];\r\n}\r\n\r\nexport function objClearEmpties(o) {\r\n  for (const k in o) {\r\n    if (typeof o[k] !== \"object\") continue\r\n    objClearEmpties(o[k])\r\n    if (!Object.keys(o[k]).length) delete o[k];\r\n  }\r\n}\r\nexport function crawlObject(obj: any, keys: string[] = [], validate: (o: any, keys: string[]) => boolean, cb: (o: any, keys: string[]) => void) {\r\n  if (validate(obj, keys)) cb(obj, keys)\r\n  else obj && typeof obj === \"object\" && Object.entries(obj).forEach(([key, val]) => crawlObject(val, [...keys, key], validate, cb))\r\n}\r\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\r\nexport const getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\r\n\r\nexport function evalIfFunc<T, X>(value: T | ((arg: X) => T), arg: X): T {\r\n  return typeof value === \"function\" ? (value as any)(arg) : value\r\n}\r\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\r\nexport function objectKeyMap<K extends string | number, V>(keys: readonly K[], map: (key: K, i: number) => V): StrictDict<`${K}`, V> {\r\n  return Object.fromEntries(keys.map((k, i) => [k, map(k, i)])) as any\r\n}\r\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\r\nexport function objectKeyValueMap<T, K extends string | number, V>(items: readonly T[], map: (item: T, i: number) => [K, V]): StrictDict<`${K}`, V> {\r\n  return Object.fromEntries(items.map((t, i) => map(t, i))) as any\r\n}\r\n\r\nexport function objectMap<K extends string, V, T>(obj: Record<K, Exclude<V, undefined>>, fn: (value: V, key: `${K}`, index: number) => T): Record<K, T>\r\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>>\r\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>> {\r\n  return Object.fromEntries(Object.entries(obj).map(\r\n    ([k, v], i) => [k, fn(v, k, i)]\r\n  )) as any\r\n}\r\n\r\nconst rangeGen = function* (from: number, to: number): Iterable<number> {\r\n  for (let i = from; i <= to; i++) yield i;\r\n};\r\n\r\n/** range of [from, to], inclusive */\r\nexport function range(from: number, to: number): number[] {\r\n  return [...rangeGen(from, to)]\r\n}\r\n\r\nexport function assertUnreachable(value: never): never {\r\n  throw new Error(`Should not reach this with value ${value}`)\r\n}\r\n\r\n/** Will change `arr` in-place */\r\nexport function toggleInArr<T>(arr: T[], value: T) {\r\n  const ind = arr.indexOf(value)\r\n  if (ind < 0) arr.push(value)\r\n  else arr.splice(ind, 1)\r\n}\r\n\r\nexport function toggleArr<T>(arr: T[], value: T) {\r\n  return arr.includes(value) ? arr.filter(a => a !== value) : [...arr, value]\r\n}\r\n\r\nexport function deepFreeze<T>(obj: T, layers: number = 5): T {\r\n  if (layers === 0) return obj\r\n  if (typeof obj === \"object\")\r\n    Object.values(Object.freeze(obj)).forEach(o => deepFreeze(o, layers--))\r\n  return obj\r\n}\r\n\r\nexport function arrayMove<T>(arr: T[], oldIndex: number, newIndex: number) {\r\n  if (newIndex < 0 || newIndex >= arr.length) return arr\r\n  if (oldIndex < 0 || oldIndex >= arr.length) return arr\r\n  arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n  return arr\r\n}\r\n","\r\nimport { objectKeyMap } from \"../Util/Util\"\r\nimport type { OptNode } from \"./optimization\"\r\nimport type { ComputeNode, ConstantNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, StrPrioNode, SubscriptNode, ThresholdNode } from \"./type\"\r\n\r\ntype Opt = number | OptNode\r\ntype Num = number | NumNode\r\ntype Str = string | undefined | StrNode\r\ntype N_S = Num | Str\r\ntype AnyNode = NumNode | StrNode\r\n\r\nexport const todo: OptNode = constant(NaN, { name: \"TODO\" })\r\nexport const one = percent(1), naught = percent(0)\r\nexport const none = constant(\"none\")\r\n\r\nexport function constant(value: number, info?: Info): ConstantNode<number>\r\nexport function constant(value: string | undefined, info?: Info): ConstantNode<string | undefined>\r\nexport function constant(value: number | string | undefined, info?: Info): ConstantNode<number> | ConstantNode<string | undefined>\r\nexport function constant(value: number | string | undefined, info?: Info): ConstantNode<number | string | undefined> {\r\n  return typeof value === \"number\"\r\n    ? { operation: \"const\", operands: [], type: \"number\", value, info }\r\n    : { operation: \"const\", operands: [], type: \"string\", value, info }\r\n}\r\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\r\nexport function percent(value: number, info?: Info): ConstantNode<number> {\r\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\r\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\r\n  return constant(value, { unit: \"%\", ...info })\r\n}\r\n/** Inject `info` to the node in-place */\r\nexport function infoMut(node: OptNode, info: Info): OptNode\r\nexport function infoMut(node: NumNode, info: Info): NumNode\r\nexport function infoMut(node: StrNode, info: Info): StrNode\r\nexport function infoMut(node: AnyNode, info: Info): AnyNode\r\nexport function infoMut(node: AnyNode, info: Info): AnyNode {\r\n  if (info) node.info = { ...node.info, ...info }\r\n  return node\r\n}\r\n\r\n/** `table[string] ?? defaultNode` */\r\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): LookupNode<NumNode>\r\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): LookupNode<StrNode>\r\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: N_S | \"none\", info?: Info): LookupNode<AnyNode> {\r\n  return { operation: \"lookup\", operands: defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] : [intoV(index)], table, info }\r\n}\r\n\r\n/** min( x1, x2, ... ) */\r\nexport function min(...values: Opt[]): ComputeNode<OptNode, OptNode>\r\nexport function min(...values: Num[]): ComputeNode\r\nexport function min(...values: Num[]): ComputeNode {\r\n  return { operation: \"min\", operands: intoOps(values) }\r\n}\r\n/** max( x1, x2, ... ) */\r\nexport function max(...values: Opt[]): ComputeNode<OptNode, OptNode>\r\nexport function max(...values: Num[]): ComputeNode\r\nexport function max(...values: Num[]): ComputeNode {\r\n  return { operation: \"max\", operands: intoOps(values) }\r\n}\r\n/** x1 + x2 + ... */\r\nexport function sum(...values: Opt[]): ComputeNode<OptNode, OptNode>\r\nexport function sum(...values: Num[]): ComputeNode\r\nexport function sum(...values: Num[]): ComputeNode {\r\n  return { operation: \"add\", operands: intoOps(values) }\r\n}\r\n/** x1 * x2 * ... */\r\nexport function prod(...values: Opt[]): ComputeNode<OptNode, OptNode>\r\nexport function prod(...values: Num[]): ComputeNode\r\nexport function prod(...values: Num[]): ComputeNode {\r\n  return { operation: \"mul\", operands: intoOps(values) }\r\n}\r\n/** x / (x + c) */\r\nexport function frac(x: Opt, c: Opt): ComputeNode<OptNode, OptNode>\r\nexport function frac(x: Num, c: Num): ComputeNode\r\nexport function frac(x: Num, c: Num): ComputeNode {\r\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\r\n}\r\nexport function res(base: Opt): ComputeNode<OptNode, OptNode>\r\nexport function res(base: Num): ComputeNode\r\nexport function res(base: Num): ComputeNode {\r\n  return { operation: \"res\", operands: intoOps([base]) }\r\n}\r\n\r\n/** v1 == v2 ? eq : neq */\r\nexport function compareEq(v1: Num, v2: Num, eq: Num, neq: Num, info?: Info): MatchNode<NumNode>\r\nexport function compareEq(v1: Num, v2: Num, eq: Str, neq: Str, info?: Info): MatchNode<StrNode>\r\nexport function compareEq(v1: Str, v2: Str, eq: Num, neq: Num, info?: Info): MatchNode<NumNode>\r\nexport function compareEq(v1: Str, v2: Str, eq: Str, neq: Str, info?: Info): MatchNode<StrNode>\r\nexport function compareEq(v1: N_S, v2: N_S, eq: N_S, neq: N_S, info?: Info): MatchNode<AnyNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(eq), intoV(neq)], info }\r\n}\r\n/** v1 == v2 ? pass : 0 */\r\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode>\r\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode>\r\nexport function equal(v1: N_S, v2: N_S, pass: Num, info?: Info): MatchNode<NumNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(0)], emptyOn: \"unmatch\" }\r\n}\r\n/** v1 == v2 ? pass : `undefined` */\r\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode>\r\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode>\r\nexport function equalStr(v1: N_S, v2: N_S, pass: Str, info?: Info): MatchNode<StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(undefined)], emptyOn: \"unmatch\" }\r\n}\r\n/** v1 != v2 ? pass : 0 */\r\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode>\r\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode>\r\nexport function unequal(v1: N_S, v2: N_S, pass: Num, info?: Info): MatchNode<NumNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoVInfo(pass, info)], emptyOn: \"match\" }\r\n}\r\n/** v1 != v2 ? pass : `undefined` */\r\nexport function unequalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode>\r\nexport function unequalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode>\r\nexport function unequalStr(v1: N_S, v2: N_S, pass: Str, info?: Info): MatchNode<StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(undefined), intoVInfo(pass, info)], emptyOn: \"match\" }\r\n}\r\n/** v1 >= v2 ? pass : 0 */\r\nexport function greaterEq(v1: Opt, v2: Opt, pass: Opt, info?: Info): ThresholdNode<OptNode, OptNode, OptNode>\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode>\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode> {\r\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(0)], emptyOn: \"l\" }\r\n}\r\n/** v1 >= v2 ? pass : `undefined` */\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): ThresholdNode<StrNode> {\r\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(undefined)], emptyOn: \"l\" }\r\n}\r\n/** v1 < v2 ? pass : 0 */\r\nexport function lessThan(v1: Opt, v2: Opt, pass: Opt, info?: Info): ThresholdNode<OptNode, OptNode, OptNode>\r\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode>\r\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode> {\r\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoV(0), intoVInfo(pass, info)], emptyOn: \"ge\" }\r\n}\r\n/** v1 >= v2 ? ge : le */\r\nexport function threshold(v1: Opt, v2: Opt, ge: Opt, le: Opt, info?: Info): ThresholdNode<OptNode, OptNode, OptNode>\r\nexport function threshold(v1: Num, v2: Num, ge: Num, le: Num, info?: Info): ThresholdNode<NumNode>\r\nexport function threshold(v1: Num, v2: Num, ge: Num, le: Num, info?: Info): ThresholdNode<NumNode> {\r\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoV(ge), intoV(le)], info }\r\n}\r\n\r\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\r\n  if (nodeList.operation) {\r\n    if (nodeList.operation !== \"read\")\r\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\r\n    return { ...nodeList, path: prefix }\r\n  } else {\r\n    return objectKeyMap(Object.keys(nodeList), key =>\r\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\r\n  }\r\n}\r\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\r\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\r\nexport function data(base: AnyNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\r\nexport function data(base: AnyNode, data: Data): DataNode<NumNode> | DataNode<StrNode> {\r\n  return { operation: \"data\", operands: [base as any], data }\r\n}\r\nexport function resetData(base: NumNode, data: Data, info?: Info): DataNode<NumNode>\r\nexport function resetData(base: StrNode, data: Data, info?: Info): DataNode<StrNode>\r\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<AnyNode>\r\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<AnyNode> {\r\n  return { operation: \"data\", operands: [base], data, reset: true, info }\r\n}\r\n\r\n\r\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\r\n}\r\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\r\n  return { operation: \"read\", operands: [], path, type: \"string\" }\r\n}\r\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\r\n}\r\n/**\r\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\r\n */\r\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\r\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\r\n}\r\nexport function stringPrio(...operands: Str[]): StrPrioNode {\r\n  return { operation: \"prio\", operands: intoOps(operands) }\r\n}\r\n/** list[index] */\r\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\r\n  return { operation: \"subscript\", operands: [index], list, info }\r\n}\r\n\r\nfunction intoOps(values: Num[]): NumNode[]\r\nfunction intoOps(values: Str[]): StrNode[]\r\nfunction intoOps(values: N_S[]): AnyNode[] {\r\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\r\n}\r\nfunction intoV(value: Num): NumNode\r\nfunction intoV(value: Str): StrNode\r\nfunction intoV(value: N_S): AnyNode\r\nfunction intoV(value: N_S): AnyNode {\r\n  return (typeof value !== \"object\") ? constant(value) : value\r\n}\r\nfunction intoVInfo(value: Num, info: Info | undefined): NumNode\r\nfunction intoVInfo(value: Str, info: Info | undefined): StrNode\r\nfunction intoVInfo(value: N_S, info: Info | undefined): AnyNode\r\nfunction intoVInfo(value: N_S, info: Info | undefined): AnyNode {\r\n  if (!info) return intoV(value)\r\n  return (typeof value !== \"object\") ? constant(value, info) : infoMut({ ...value }, info)\r\n}\r\n\r\ntype _NodeList = { [key: string]: NodeList } & { operation?: never }\r\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\r\n","import { AnyNode, Base, NodeData, NumNode, StrNode } from \"./type\"\r\nimport { constant } from \"./utils\"\r\n\r\nexport function deepNodeClone<T extends NodeData<NumNode | StrNode | undefined>>(data: T): T {\r\n  const map = new Map()\r\n  function internal(orig: any) {\r\n    if (typeof orig !== \"object\") return orig\r\n    const old = map.get(orig)\r\n    if (old) return old\r\n\r\n    const cache: any = Array.isArray(orig)\r\n      ? orig.map(val => internal(val))\r\n      : Object.fromEntries(Object.entries(orig).map(([key, val]) =>\r\n        [key, key === \"info\" ? val : internal(val)]))\r\n    map.set(orig, cache)\r\n    return cache\r\n  }\r\n  return internal(data)\r\n}\r\n\r\nexport function forEachNodes<T extends Base<T> = AnyNode>(formulas: T[], topDown: (formula: T) => void, bottomUp: (formula: T) => void): void {\r\n  const visiting = new Set<T>(), visited = new Set<T>()\r\n\r\n  function traverse(formula: T) {\r\n    if (visited.has(formula)) return\r\n\r\n    if (visiting.has(formula)) {\r\n      console.error(\"Found cyclical dependency during formula traversal\")\r\n      return\r\n    }\r\n    visiting.add(formula)\r\n\r\n    topDown(formula)\r\n\r\n    formula.operands.forEach(traverse)\r\n\r\n    bottomUp(formula)\r\n\r\n    visiting.delete(formula)\r\n    visited.add(formula)\r\n  }\r\n\r\n  formulas.forEach(traverse)\r\n}\r\n\r\nexport function mapFormulas<Input extends Base<Input> = AnyNode, Interim extends Base<Interim> = Input, Output extends Base<Output> = Interim>(formulas: Input[], topDownMap: (formula: Input | Interim) => Interim, bottomUpMap: (current: Interim | Output, orig: Input | Interim) => Output): Output[] {\r\n  const visiting = new Set<Input | Interim>()\r\n  const topDownMapped = new Map<Input | Interim, Output>()\r\n  const bottomUpMapped = new Map<Interim, Output>()\r\n\r\n  function check(formula: Input | Interim): Output {\r\n    let topDown: Interim | Output | undefined = topDownMapped.get(formula)\r\n    if (topDown) return topDown\r\n    topDown = topDownMap(formula)\r\n\r\n    let bottomUp = bottomUpMapped.get(topDown)\r\n    if (bottomUp) return bottomUp\r\n\r\n    if (visiting.has(topDown)) {\r\n      console.error(\"Found cyclical dependency during formula mapping\")\r\n      return constant(NaN) as any\r\n    }\r\n    visiting.add(topDown)\r\n\r\n    bottomUp = bottomUpMap(traverse(topDown), formula)\r\n\r\n    visiting.delete(topDown)\r\n\r\n    topDownMapped.set(formula, bottomUp)\r\n    bottomUpMapped.set(topDown, bottomUp)\r\n    return bottomUp\r\n  }\r\n\r\n  function traverse(formula: Interim): Interim | Output {\r\n    const operands = formula.operands.map(check)\r\n    return arrayEqual<Interim | Output>(operands, formula.operands) ? formula : { ...formula, operands }\r\n  }\r\n\r\n  const result = formulas.map(check)\r\n  return arrayEqual<Input | Output>(result, formulas) ? formulas as any : result\r\n}\r\n\r\nexport function customMapFormula<Context, Output, Input extends Base<Input>>(formulas: Input[], context: Context, map: (formula: Input, context: Context, map: (node: Input, context: Context) => Output) => Output): Output[] {\r\n  const contextMapping = new Map<Context, [Set<Input>, Map<Input, Output>]>()\r\n  function internalMap(formula: Input, context: Context): Output {\r\n    let current = contextMapping.get(context)\r\n    if (!current) contextMapping.set(context, current = [new Set(), new Map()])\r\n    const [visiting, mapping] = current\r\n\r\n    const old = mapping.get(formula)\r\n    if (old) return old\r\n\r\n    if (visiting.has(formula))\r\n      throw new Error(\"Found cyclical dependency during formula mapping\")\r\n\r\n    visiting.add(formula)\r\n    const newFormula = map(formula, context, internalMap)\r\n    mapping.set(formula, newFormula)\r\n    visiting.delete(formula)\r\n\r\n    return newFormula\r\n  }\r\n  return formulas.map(formula => internalMap(formula, context))\r\n}\r\n\r\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\r\n  if (a === undefined) return b === undefined\r\n  if (b === undefined) return false\r\n\r\n  return a.length === b.length && a.every((value, i) => value === b[i])\r\n}\r\n","import type { ArtifactBuildData } from \"../PageCharacter/CharacterDisplay/Tabs/TabOptimize/common\"\r\nimport { assertUnreachable, objPathValue } from \"../Util/Util\"\r\nimport { customMapFormula, forEachNodes, mapFormulas } from \"./internal\"\r\nimport { AnyNode, CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode, StrPrioNode, ThresholdNode } from \"./type\"\r\nimport { constant } from \"./utils\"\r\n\r\nexport type OptNode = ComputeNode<OptNode, OptNode> | ThresholdNode<OptNode, OptNode, OptNode> |\r\n  ReadNode<number> | ConstantNode<number>\r\n\r\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\r\n  min: (x: number[]): number => Math.min(...x),\r\n  max: (x: number[]): number => Math.max(...x),\r\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\r\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\r\n}\r\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\r\n  ...allCommutativeMonoidOperations,\r\n  res: ([res]: number[]): number => {\r\n    if (res < 0) return 1 - res / 2\r\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n    return 1 - res\r\n  },\r\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\r\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\r\n}\r\n\r\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\r\n\r\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): OptNode[] {\r\n  let opts = constantFold(formulas, topLevelData, shouldFold)\r\n  opts = flatten(opts)\r\n  return deduplicate(opts)\r\n}\r\nexport function precompute(formulas: OptNode[], initial: ArtifactBuildData[\"values\"], binding: (readNode: ReadNode<number> | ReadNode<string | undefined>) => string, slotCount: number): (_: ArtifactBuildData[]) => number[] {\r\n  let body = `\r\n\"use strict\";\r\n// copied from the code above\r\nfunction res(res) {\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst x0=0`; // making sure `const` has at least one entry\r\n\r\n  let i = 1;\r\n  const names = new Map<NumNode | StrNode, string>()\r\n  forEachNodes(formulas, _ => { }, f => {\r\n    const { operation, operands } = f, name = `x${i++}`, operandNames = operands.map((x: OptNode) => names.get(x)!)\r\n    names.set(f, name)\r\n    switch (operation) {\r\n      case \"read\": {\r\n        const key = binding(f)\r\n        let arr = new Array(slotCount).fill(null).map((x, i) => `(b[${i}].values[\"${key}\"] ?? 0)`)\r\n        if (initial[key] && initial[key] !== 0) {\r\n          arr = [initial[key].toString(), ...arr]\r\n        }\r\n        body += `,${name}=${arr.join('+')}`\r\n        break\r\n      }\r\n      case \"const\": names.set(f, `(${f.value})`); break\r\n      case \"add\": case \"mul\": body += `,${name}=${operandNames.join(operation === \"add\" ? \"+\" : \"*\")}`; break\r\n      case \"min\": case \"max\": body += `,${name}=Math.${operation}(${operandNames})`; break\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = operandNames\r\n        body += `,${name}=(${value}>=${threshold})?${pass}:${fail}`\r\n        break\r\n      }\r\n      case \"res\": body += `,${name}=res(${operandNames[0]})`; break\r\n      case \"sum_frac\": body += `,${name}=${operandNames[0]}/(${operandNames[0]}+${operandNames[1]})`; break\r\n\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n  body += `;\\nreturn [${formulas.map(f => names.get(f)!)}]`\r\n  return new (Function as any)(`b`, body)\r\n}\r\n\r\nfunction flatten(formulas: OptNode[]): OptNode[] {\r\n  return mapFormulas(formulas, f => f, _formula => {\r\n    let result = _formula\r\n    if (commutativeMonoidOperationSet.has(_formula.operation as Operation)) {\r\n      const formula = _formula as ComputeNode<OptNode>\r\n      const { operation } = formula\r\n\r\n      let flattened = false\r\n      const operands = formula.operands.flatMap(dep =>\r\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\r\n      result = flattened ? { ...formula, operands } : formula\r\n    }\r\n\r\n    return result\r\n  })\r\n}\r\nfunction deduplicate(formulas: OptNode[]): OptNode[] {\r\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\r\n    const result = new Map<T, number>()\r\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\r\n    return result\r\n  }\r\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\r\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\r\n  }\r\n\r\n  const wrap = {\r\n    common: {\r\n      counts: new Map<OptNode, number>(),\r\n      formulas: new Set<OptNode>(),\r\n      operation: \"add\" as Operation\r\n    }\r\n  }\r\n\r\n  while (true) {\r\n    let next: typeof wrap.common | undefined\r\n\r\n    const factored: ComputeNode<OptNode> = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\r\n\r\n    let candidatesByOperation = new Map<Operation, [ComputeNode<OptNode>, Map<OptNode, number>][]>()\r\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\r\n      candidatesByOperation.set(operation, [])\r\n\r\n    formulas = mapFormulas(formulas, _formula => {\r\n      if (wrap.common.formulas.has(_formula)) {\r\n        const formula = _formula as ComputeNode<OptNode>\r\n        const remainingCounts = new Map(wrap.common.counts)\r\n        const operands = formula.operands.filter(dep => {\r\n          const count = remainingCounts.get(dep)\r\n          if (count) {\r\n            remainingCounts.set(dep, count - 1)\r\n            return false\r\n          }\r\n          return true\r\n        })\r\n\r\n        if (!operands.length)\r\n          return factored\r\n        operands.push(factored)\r\n        return { ...formula, operands }\r\n      }\r\n      return _formula\r\n    }, _formula => {\r\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\r\n      const formula = _formula as ComputeNode<OptNode>\r\n\r\n      if (next) {\r\n        if (next.operation === formula.operation) {\r\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<OptNode, number>()\r\n          const nextCounts = next.counts\r\n          let total = 0\r\n\r\n          for (const [dependency, currentCount] of currentCounts.entries()) {\r\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\r\n            if (commonCount) {\r\n              commonCounts.set(dependency, commonCount)\r\n              total += commonCount\r\n            } else commonCounts.delete(dependency)\r\n          }\r\n          if (total > 1) {\r\n            next.counts = commonCounts\r\n            next.formulas.add(formula)\r\n          }\r\n        }\r\n      } else {\r\n        const candidates = candidatesByOperation.get(formula.operation)!\r\n        const counts = elementCounts(formula.operands)\r\n\r\n        for (const [candidate, candidateCounts] of candidates) {\r\n          let total = 0\r\n\r\n          const commonCounts = new Map<OptNode, number>()\r\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\r\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\r\n            if (count) {\r\n              commonCounts.set(dependency, count)\r\n              total += count\r\n            }\r\n          }\r\n          if (total > 1) {\r\n            next = {\r\n              counts: commonCounts,\r\n              formulas: new Set([formula, candidate]),\r\n              operation: formula.operation\r\n            }\r\n            candidatesByOperation.clear()\r\n            break\r\n          }\r\n        }\r\n        if (!next) candidates.push([formula, counts])\r\n      }\r\n\r\n      return formula\r\n    })\r\n\r\n    if (next) wrap.common = next\r\n    else break\r\n  }\r\n\r\n  return formulas\r\n}\r\n\r\n/**\r\n * Replace nodes with known values with appropriate constants,\r\n * avoiding removal of any nodes that pass `isFixed` predicate\r\n */\r\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): OptNode[] {\r\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, OptNode | StrNode> }\r\n  const origin: Context = { data: [], processed: new Map() }\r\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\r\n\r\n  const context = { data: [topLevelData], processed: new Map() }\r\n  nextContextMap.set(context, new Map())\r\n  nextContextMap.get(origin)!.set(topLevelData, context)\r\n  return customMapFormula<typeof context, OptNode | StrNode, AnyNode>(formulas, context, (formula, context, map) => {\r\n    const { operation } = formula, fold = (x: NumNode, c: typeof context) => map(x, c) as OptNode\r\n    const foldStr = (x: StrNode, c: typeof context) => map(x, c) as StrNode\r\n    let result: OptNode | StrNode\r\n    switch (operation) {\r\n      case \"const\": result = formula; break\r\n      case \"add\": case \"mul\": case \"max\": case \"min\":\r\n        const f = allOperations[operation]\r\n        const numericOperands: number[] = []\r\n        const formulaOperands: OptNode[] = formula.operands.filter(formula => {\r\n          const folded = fold(formula, context)\r\n          return (folded.operation === \"const\")\r\n            ? (numericOperands.push(folded.value), false)\r\n            : true\r\n        }).map(x => fold(x, context))\r\n        const numericValue = f(numericOperands)\r\n\r\n        // Fold degenerate cases. This may incorrectly compute NaN\r\n        // results, which shouldn't appear under expected usage.\r\n        // - zero\r\n        //   - 0 * ... = 0\r\n        // - infinity\r\n        //   - max(infinity, ...) = infinity\r\n        //   - infinity + ... = infinity\r\n        // - (-infinity)\r\n        //   - min(-infinity, ...) - infinity\r\n        //   - (-infinity) + ... = -infinity\r\n        // - NaN\r\n        //   - operation(NaN, ...) = NaN\r\n        if (!isFinite(numericValue)) {\r\n          if ((operation !== \"mul\") &&\r\n            (operation !== \"max\" || numericValue > 0) &&\r\n            (operation !== \"min\" || numericValue < 0)) {\r\n            result = constant(numericValue)\r\n            break\r\n          }\r\n        } else if (operation === \"mul\" && numericValue === 0) {\r\n          result = constant(numericValue)\r\n          break\r\n        }\r\n\r\n        if (numericValue !== f([])) // Skip vacuous values\r\n          formulaOperands.push(constant(numericValue))\r\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\r\n        else result = { operation, operands: formulaOperands }\r\n        break\r\n      case \"res\": case \"sum_frac\": {\r\n        const operands = formula.operands.map(x => fold(x, context))\r\n        const f = allOperations[operation]\r\n        if (operands.every(x => x.operation === \"const\"))\r\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\r\n        else result = { ...formula, operands }\r\n        break\r\n      }\r\n      case \"lookup\": {\r\n        const index = foldStr(formula.operands[0], context)\r\n        if (index.operation === \"const\") {\r\n          const selected = formula.table[index.value!] ?? formula.operands[1]\r\n          if (selected) {\r\n            result = map(selected, context)\r\n            break\r\n          }\r\n        }\r\n        throw new Error(`Unsupported ${operation} node while folding`)\r\n      }\r\n      case \"prio\": {\r\n        const first = formula.operands.find(op => {\r\n          const folded = foldStr(op, context)\r\n          if (folded.operation !== \"const\")\r\n            throw new Error(`Unsupported ${operation} node while folding`)\r\n          return folded.value !== undefined\r\n        })\r\n        result = first ? foldStr(first, context) : constant(undefined)\r\n        break\r\n      }\r\n      case \"small\": {\r\n        let smallest = undefined as ConstantNode<string | undefined> | undefined\r\n        for (const operand of formula.operands) {\r\n          const folded = foldStr(operand, context)\r\n          if (folded.operation !== \"const\")\r\n            throw new Error(`Unsupported ${operation} node while folding`)\r\n          if (smallest?.value === undefined || (folded.value !== undefined && folded.value < smallest.value))\r\n            smallest = folded\r\n        }\r\n        result = smallest ?? constant(undefined)\r\n        break\r\n      }\r\n      case \"match\": {\r\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => map(x, context))\r\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\r\n          throw new Error(`Unsupported ${operation} node while folding`)\r\n        result = (v1.value === v2.value) ? match : unmatch\r\n        break\r\n      }\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = formula.operands.map(x => map(x, context) as OptNode)\r\n        if (pass.operation === \"const\" && fail.operation === \"const\" && pass.value === fail.value)\r\n          result = pass\r\n        else if (value.operation === \"const\" && threshold.operation === \"const\")\r\n          result = value.value >= threshold.value ? pass : fail\r\n        else\r\n          result = { ...formula, operands: [value, threshold, pass, fail] }\r\n        break\r\n      }\r\n      case \"subscript\": {\r\n        const index = fold(formula.operands[0], context)\r\n        if (index.operation !== \"const\")\r\n          throw new Error(\"Found non-constant subscript node while folding\")\r\n        result = constant(formula.list[index.value])\r\n        break\r\n      }\r\n      case \"read\": {\r\n        const operands = context.data\r\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\r\n          .filter(x => x)\r\n\r\n        if (operands.length === 0) {\r\n          if (shouldFold(formula)) {\r\n            const { accu } = formula\r\n            if (accu === undefined || accu === \"small\")\r\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\r\n            else result = constant(allOperations[accu]([]))\r\n          } else result = formula\r\n        } else if (formula.accu === undefined || operands.length === 1)\r\n          result = map(operands[operands.length - 1], context)\r\n        else\r\n          result = map({ operation: formula.accu, operands } as ComputeNode | StrPrioNode, context)\r\n        break\r\n      }\r\n      case \"data\": {\r\n        if (formula.reset) context = origin\r\n        const nextMap = nextContextMap.get(context)!\r\n        let nextContext = nextMap.get(formula.data)\r\n        if (!nextContext) {\r\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\r\n          nextContextMap.set(nextContext, new Map())\r\n          nextMap.set(formula.data, nextContext)\r\n        }\r\n        result = map(formula.operands[0], nextContext)\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n\r\n    if (result.info) {\r\n      result = { ...result }\r\n      delete result.info\r\n    }\r\n    return result\r\n  }) as OptNode[]\r\n}\r\n\r\nexport const testing = {\r\n  constantFold, flatten, deduplicate\r\n}\r\n","export const allHitModes = [\"hit\", \"avgHit\", \"critHit\"] as const\r\nexport const allRegions = [\"mondstadt\", \"liyue\", \"inazuma\", \"sumeru\", \"fontaine\", \"natlan\", \"snezhnaya\", \"khaenriah\"] as const\r\nexport const allAmpReactions = [\"vaporize\", \"melt\",] as const\r\nexport const allAdditiveReactions = [\"spread\", \"aggravate\"] as const\r\nexport const allArtifactSetCount = [1, 2, 3, 4, 5] as const\r\nexport const allRarities = [5, 4, 3, 2, 1] as const\r\nexport const allArtifactRarities = [5, 4, 3] as const\r\nexport const allSlotKeys = [\"flower\", \"plume\", \"sands\", \"goblet\", \"circlet\"] as const\r\nexport const allElements = ['anemo', 'geo', 'electro', 'hydro', 'pyro', 'cryo', 'dendro'] as const\r\nexport const allElementsWithPhy = [\"physical\", ...allElements] as const\r\nexport const allInfusionAuraElements = [\"pyro\", 'cryo', 'hydro'] as const\r\nexport const allWeaponTypeKeys = ['sword', 'claymore', 'polearm', 'bow', 'catalyst'] as const\r\nexport const allRollColorKeys = ['roll1', 'roll2', 'roll3', 'roll4', 'roll5', 'roll6'] as const\r\nexport const allAscension = [0, 1, 2, 3, 4, 5, 6] as const\r\nexport const allRefinement = [1, 2, 3, 4, 5] as const\r\nexport const substatType = [\"max\", \"mid\", \"min\"] as const\r\nexport const genderKeys = [\"F\", \"M\"] as const\r\nexport type Gender = typeof genderKeys[number]\r\n\r\n\r\nexport const allArtifactSets = [\r\n  \"Adventurer\",\r\n  \"ArchaicPetra\",\r\n  \"Berserker\",\r\n  \"BlizzardStrayer\",\r\n  \"BloodstainedChivalry\",\r\n  \"BraveHeart\",\r\n  \"CrimsonWitchOfFlames\",\r\n  \"DeepwoodMemories\",\r\n  \"DefendersWill\",\r\n  \"DesertPavilionChronicle\",\r\n  \"EchoesOfAnOffering\",\r\n  \"EmblemOfSeveredFate\",\r\n  \"FlowerOfParadiseLost\",\r\n  \"Gambler\",\r\n  \"GildedDreams\",\r\n  \"GladiatorsFinale\",\r\n  \"HeartOfDepth\",\r\n  \"HuskOfOpulentDreams\",\r\n  \"Instructor\",\r\n  \"Lavawalker\",\r\n  \"LuckyDog\",\r\n  \"MaidenBeloved\",\r\n  \"MartialArtist\",\r\n  \"NoblesseOblige\",\r\n  \"OceanHuedClam\",\r\n  \"PaleFlame\",\r\n  \"PrayersForDestiny\",\r\n  \"PrayersForIllumination\",\r\n  \"PrayersForWisdom\",\r\n  \"PrayersToSpringtime\",\r\n  \"ResolutionOfSojourner\",\r\n  \"RetracingBolide\",\r\n  \"Scholar\",\r\n  \"ShimenawasReminiscence\",\r\n  \"TenacityOfTheMillelith\",\r\n  \"TheExile\",\r\n  \"ThunderingFury\",\r\n  \"Thundersoother\",\r\n  \"TinyMiracle\",\r\n  \"TravelingDoctor\",\r\n  \"VermillionHereafter\",\r\n  \"ViridescentVenerer\",\r\n  \"WanderersTroupe\",\r\n] as const\r\nexport const nonTravelerCharacterKeys = [\r\n  \"Albedo\",\r\n  \"Aloy\",\r\n  \"Amber\",\r\n  \"AratakiItto\",\r\n  \"Barbara\",\r\n  \"Beidou\",\r\n  \"Bennett\",\r\n  \"Candace\",\r\n  \"Chongyun\",\r\n  \"Collei\",\r\n  \"Cyno\",\r\n  \"Diluc\",\r\n  \"Diona\",\r\n  \"Dori\",\r\n  \"Eula\",\r\n  \"Faruzan\",\r\n  \"Fischl\",\r\n  \"Ganyu\",\r\n  \"Gorou\",\r\n  \"HuTao\",\r\n  \"Jean\",\r\n  \"KaedeharaKazuha\",\r\n  \"Kaeya\",\r\n  \"KamisatoAyaka\",\r\n  \"KamisatoAyato\",\r\n  \"Keqing\",\r\n  \"Klee\",\r\n  \"KujouSara\",\r\n  \"KukiShinobu\",\r\n  \"Layla\",\r\n  \"Lisa\",\r\n  \"Mona\",\r\n  \"Nahida\",\r\n  \"Nilou\",\r\n  \"Ningguang\",\r\n  \"Noelle\",\r\n  \"Qiqi\",\r\n  \"RaidenShogun\",\r\n  \"Razor\",\r\n  \"Rosaria\",\r\n  \"SangonomiyaKokomi\",\r\n  \"Sayu\",\r\n  \"Shenhe\",\r\n  \"ShikanoinHeizou\",\r\n  \"Sucrose\",\r\n  \"Tartaglia\",\r\n  \"TheWanderer\",\r\n  \"Thoma\",\r\n  \"Tighnari\",\r\n  \"Venti\",\r\n  \"Xiangling\",\r\n  \"Xiao\",\r\n  \"Xingqiu\",\r\n  \"Xinyan\",\r\n  \"YaeMiko\",\r\n  \"Yanfei\",\r\n  \"Yelan\",\r\n  \"Yoimiya\",\r\n  \"YunJin\",\r\n  \"Zhongli\",\r\n] as const\r\nexport const locationCharacterKeys = [\r\n  ...nonTravelerCharacterKeys,\r\n  \"Traveler\",\r\n] as const\r\nexport const travelerElements = [\r\n  \"anemo\",\r\n  \"geo\",\r\n  \"electro\",\r\n  \"dendro\"\r\n] as const\r\nexport const travelerFKeys = [\r\n  \"TravelerAnemoF\",\r\n  \"TravelerGeoF\",\r\n  \"TravelerElectroF\",\r\n  \"TravelerDendroF\",\r\n] as const\r\nexport const travelerMKeys = [\r\n  \"TravelerAnemoM\",\r\n  \"TravelerGeoM\",\r\n  \"TravelerElectroM\",\r\n  \"TravelerDendroM\",\r\n] as const\r\nexport const travelerKeys = [\r\n  \"TravelerAnemo\",\r\n  \"TravelerGeo\",\r\n  \"TravelerElectro\",\r\n  \"TravelerDendro\",\r\n] as const\r\nexport const allCharacterKeys = [\r\n  ...nonTravelerCharacterKeys,\r\n  ...travelerKeys\r\n] as const\r\n\r\nexport const allCharacterSheetKeys = [\r\n  ...nonTravelerCharacterKeys,\r\n  ...travelerFKeys,\r\n  ...travelerMKeys,\r\n]\r\n\r\nexport const allWeaponSwordKeys = [\r\n  \"AmenomaKageuchi\",\r\n  \"AquilaFavonia\",\r\n  \"BlackcliffLongsword\",\r\n  \"CinnabarSpindle\",\r\n  \"CoolSteel\",\r\n  \"KagotsurubeIsshin\",\r\n  \"DarkIronSword\",\r\n  \"DullBlade\",\r\n  \"FavoniusSword\",\r\n  \"FesteringDesire\",\r\n  \"FilletBlade\",\r\n  \"FreedomSworn\",\r\n  \"HaranGeppakuFutsu\",\r\n  \"HarbingerOfDawn\",\r\n  \"IronSting\",\r\n  \"FloralRainfall\",\r\n  \"KeyOfKhajNisut\",\r\n  \"LionsRoar\",\r\n  \"MistsplitterReforged\",\r\n  \"PrimordialJadeCutter\",\r\n  \"PrototypeRancour\",\r\n  \"RoyalLongsword\",\r\n  \"SacrificialSword\",\r\n  \"SapwoodBlade\",\r\n  \"SilverSword\",\r\n  \"SkyriderSword\",\r\n  \"SkywardBlade\",\r\n  \"SummitShaper\",\r\n  \"SwordOfDescension\",\r\n  \"TheAlleyFlash\",\r\n  \"TheBlackSword\",\r\n  \"TheFlute\",\r\n  \"TravelersHandySword\",\r\n  \"XiphosMoonlight\",\r\n] as const\r\nexport type WeaponSwordKey = typeof allWeaponSwordKeys[number]\r\n\r\nexport const allWeaponClaymoreKeys = [\r\n  \"Akuoumaru\",\r\n  \"BlackcliffSlasher\",\r\n  \"BloodtaintedGreatsword\",\r\n  \"DebateClub\",\r\n  \"FavoniusGreatsword\",\r\n  \"FerrousShadow\",\r\n  \"ForestRegalia\",\r\n  \"KatsuragikiriNagamasa\",\r\n  \"LithicBlade\",\r\n  \"LuxuriousSeaLord\",\r\n  \"MakhairaAquamarine\",\r\n  \"OldMercsPal\",\r\n  \"PrototypeArchaic\",\r\n  \"Rainslasher\",\r\n  \"RedhornStonethresher\",\r\n  \"RoyalGreatsword\",\r\n  \"SacrificialGreatsword\",\r\n  \"SerpentSpine\",\r\n  \"SkyriderGreatsword\",\r\n  \"SkywardPride\",\r\n  \"SnowTombedStarsilver\",\r\n  \"SongOfBrokenPines\",\r\n  \"TheBell\",\r\n  \"TheUnforged\",\r\n  \"WasterGreatsword\",\r\n  \"Whiteblind\",\r\n  \"WhiteIronGreatsword\",\r\n  \"WolfsGravestone\",\r\n] as const\r\nexport type WeaponClaymoreKey = typeof allWeaponClaymoreKeys[number]\r\n\r\nexport const allWeaponPolearmKeys = [\r\n  \"BeginnersProtector\",\r\n  \"BlackcliffPole\",\r\n  \"BlackTassel\",\r\n  \"CalamityQueller\",\r\n  \"CrescentPike\",\r\n  \"Deathmatch\",\r\n  \"DragonsBane\",\r\n  \"DragonspineSpear\",\r\n  \"EngulfingLightning\",\r\n  \"FavoniusLance\",\r\n  \"Halberd\",\r\n  \"IronPoint\",\r\n  \"KitainCrossSpear\",\r\n  \"LithicSpear\",\r\n  \"MissiveWindspear\",\r\n  \"Moonpiercer\",\r\n  \"PrimordialJadeWingedSpear\",\r\n  \"PrototypeStarglitter\",\r\n  \"RoyalSpear\",\r\n  \"SkywardSpine\",\r\n  \"StaffOfHoma\",\r\n  \"StaffOfTheScarletSands\",\r\n  \"TheCatch\",\r\n  \"VortexVanquisher\",\r\n  \"WavebreakersFin\",\r\n  \"WhiteTassel\",\r\n] as const\r\nexport type WeaponPoleArmKey = typeof allWeaponPolearmKeys[number]\r\n\r\nexport const allWeaponBowKeys = [\r\n  \"AlleyHunter\",\r\n  \"AmosBow\",\r\n  \"AquaSimulacra\",\r\n  \"BlackcliffWarbow\",\r\n  \"CompoundBow\",\r\n  \"ElegyForTheEnd\",\r\n  \"EndOfTheLine\",\r\n  \"FadingTwilight\",\r\n  \"FavoniusWarbow\",\r\n  \"Hamayumi\",\r\n  \"HuntersBow\",\r\n  \"HuntersPath\",\r\n  \"KingsSquire\",\r\n  \"Messenger\",\r\n  \"MitternachtsWaltz\",\r\n  \"MouunsMoon\",\r\n  \"PolarStar\",\r\n  \"Predator\",\r\n  \"PrototypeCrescent\",\r\n  \"RavenBow\",\r\n  \"RecurveBow\",\r\n  \"RoyalBow\",\r\n  \"Rust\",\r\n  \"SacrificialBow\",\r\n  \"SeasonedHuntersBow\",\r\n  \"SharpshootersOath\",\r\n  \"SkywardHarp\",\r\n  \"Slingshot\",\r\n  \"TheStringless\",\r\n  \"TheViridescentHunt\",\r\n  \"ThunderingPulse\",\r\n  \"WindblumeOde\",\r\n] as const\r\nexport type WeaponBowKey = typeof allWeaponBowKeys[number]\r\n\r\nexport const allWeaponCatalystKeys = [\r\n  \"TullaytullahsRemembrance\",\r\n  \"ApprenticesNotes\",\r\n  \"AThousandFloatingDreams\",\r\n  \"BlackcliffAgate\",\r\n  \"DodocoTales\",\r\n  \"EmeraldOrb\",\r\n  \"EverlastingMoonglow\",\r\n  \"EyeOfPerception\",\r\n  \"FavoniusCodex\",\r\n  \"Frostbearer\",\r\n  \"FruitOfFulfillment\",\r\n  \"HakushinRing\",\r\n  \"KagurasVerity\",\r\n  \"LostPrayerToTheSacredWinds\",\r\n  \"MagicGuide\",\r\n  \"MappaMare\",\r\n  \"MemoryOfDust\",\r\n  \"OathswornEye\",\r\n  \"OtherworldlyStory\",\r\n  \"PocketGrimoire\",\r\n  \"PrototypeAmber\",\r\n  \"RoyalGrimoire\",\r\n  \"SacrificialFragments\",\r\n  \"SkywardAtlas\",\r\n  \"SolarPearl\",\r\n  \"TheWidsith\",\r\n  \"ThrillingTalesOfDragonSlayers\",\r\n  \"TwinNephrite\",\r\n  \"WanderingEvenstar\",\r\n  \"WineAndSong\",\r\n] as const\r\nexport type WeaponCatalystKey = typeof allWeaponCatalystKeys[number]\r\n\r\nexport const allWeaponKeys = [\r\n  ...allWeaponSwordKeys,\r\n  ...allWeaponClaymoreKeys,\r\n  ...allWeaponPolearmKeys,\r\n  ...allWeaponBowKeys,\r\n  ...allWeaponCatalystKeys,\r\n] as const\r\nexport type WeaponKey = WeaponSwordKey | WeaponClaymoreKey | WeaponPoleArmKey | WeaponBowKey | WeaponCatalystKey\r\n\r\nexport const characterSpecializedStatKeys = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"dendro_dmg_\"] as const\r\n\r\nexport type HitModeKey = typeof allHitModes[number]\r\nexport type Region = typeof allRegions[number]\r\nexport type AmpReactionKey = typeof allAmpReactions[number]\r\nexport type AdditiveReactionKey = typeof allAdditiveReactions[number]\r\nexport type SetNum = typeof allArtifactSetCount[number]\r\nexport type Rarity = typeof allRarities[number]\r\nexport type ArtifactRarity = typeof allArtifactRarities[number]\r\nexport type SlotKey = typeof allSlotKeys[number]\r\nexport type ElementKey = typeof allElements[number]\r\nexport type ElementKeyWithPhy = typeof allElementsWithPhy[number]\r\nexport type InfusionAuraElements = typeof allInfusionAuraElements[number]\r\nexport type ArtifactSetKey = typeof allArtifactSets[number]\r\nexport type NonTravelerCharacterKey = typeof nonTravelerCharacterKeys[number]\r\nexport type CharacterKey = typeof allCharacterKeys[number]\r\nexport type CharacterSheetKey = typeof allCharacterSheetKeys[number]\r\nexport type LocationCharacterKey = typeof locationCharacterKeys[number]\r\nexport type TravelerKey = typeof travelerKeys[number]\r\nexport type TravelerElementKey = typeof travelerElements[number]\r\nexport type WeaponTypeKey = typeof allWeaponTypeKeys[number]\r\nexport type RollColorKey = typeof allRollColorKeys[number]\r\nexport type Ascension = typeof allAscension[number]\r\nexport type Refinement = typeof allRefinement[number]\r\nexport type CharacterSpecializedStatKey = typeof characterSpecializedStatKeys[number]\r\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\r\nexport const allowedAmpReactions: Dict<ElementKey, AmpReactionKey[]> = {\r\n  pyro: [\"vaporize\", \"melt\"],\r\n  hydro: [\"vaporize\"],\r\n  cryo: [\"melt\"],\r\n  anemo: [\"vaporize\", \"melt\"],\r\n}\r\nexport const allowedAdditiveReactions: Dict<ElementKey, AdditiveReactionKey[]> = {\r\n  dendro: [\"spread\"],\r\n  electro: [\"aggravate\"],\r\n  anemo: [\"aggravate\"],\r\n}\r\n\r\nexport type SubstatType = typeof substatType[number]\r\n\r\nexport function charKeyToLocCharKey(charKey: CharacterKey): LocationCharacterKey {\r\n  if (travelerKeys.includes(charKey as TravelerKey)) return \"Traveler\"\r\n  return charKey as LocationCharacterKey\r\n}\r\n\r\nexport function TravelerToElement(key: TravelerKey, element: TravelerElementKey): TravelerKey {\r\n  return \"Traveler\" + element.toUpperCase().slice(0, 1) + element.slice(1) as TravelerKey\r\n}\r\n\r\nexport type LocationKey = LocationCharacterKey | \"\"\r\n\r\nexport function charKeyToCharName(ck: CharacterKey, gender: Gender): string {\r\n  return ck.startsWith(\"Traveler\") ? \"Traveler\" + gender : ck\r\n}\r\n","import { ArtSetExclusion } from \"../../../../Database/DataManagers/BuildSettingData\";\r\nimport { forEachNodes, mapFormulas } from \"../../../../Formula/internal\";\r\nimport { allOperations, constantFold, OptNode } from \"../../../../Formula/optimization\";\r\nimport { ConstantNode } from \"../../../../Formula/type\";\r\nimport { constant, customRead, max, min, threshold } from \"../../../../Formula/utils\";\r\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from \"../../../../Types/consts\";\r\nimport { assertUnreachable, objectKeyMap, objectMap, range } from \"../../../../Util/Util\";\r\n\r\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\r\nexport function pruneAll(nodes: OptNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion, forced: Dict<MicropassOperation, boolean>): { nodes: OptNode[], arts: ArtifactsBySlot } {\r\n  let should = forced\r\n  /** If `key` makes progress, all operations in `value` should be performed */\r\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\r\n    pruneOrder: { pruneNodeRange: true },\r\n    pruneArtRange: { pruneNodeRange: true },\r\n    pruneNodeRange: { reaffine: true },\r\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\r\n  }\r\n  let count = 0\r\n  while (Object.values(should).some(x => x) && count++ < 20) {\r\n    if (should.pruneOrder) {\r\n      delete should.pruneOrder\r\n      const newArts = pruneOrder(arts, numTop, exclusion)\r\n      if (arts !== newArts) {\r\n        arts = newArts\r\n        should = { ...should, ...deps.pruneOrder }\r\n      }\r\n    }\r\n    if (should.pruneArtRange) {\r\n      delete should.pruneArtRange\r\n      const newArts = pruneArtRange(nodes, arts, minimum)\r\n      if (arts !== newArts) {\r\n        arts = newArts\r\n        should = { ...should, ...deps.pruneArtRange }\r\n      }\r\n    }\r\n    if (should.pruneNodeRange) {\r\n      delete should.pruneNodeRange\r\n      const newNodes = pruneNodeRange(nodes, arts)\r\n      if (nodes !== newNodes) {\r\n        nodes = newNodes\r\n        should = { ...should, ...deps.pruneNodeRange }\r\n      }\r\n    }\r\n    if (should.reaffine) {\r\n      delete should.reaffine\r\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\r\n      if (nodes !== newNodes || arts !== newArts) {\r\n        nodes = newNodes\r\n        arts = newArts\r\n        should = { ...should, ...deps.reaffine }\r\n      }\r\n    }\r\n  }\r\n  return { nodes, arts }\r\n}\r\n\r\nexport function pruneExclusion(nodes: OptNode[], exclusion: ArtSetExclusion): OptNode[] {\r\n  const maxValues: Dict<keyof typeof exclusion, number> = {}\r\n  for (const [key, e] of Object.entries(exclusion)) {\r\n    if (!e.includes(4)) continue\r\n    maxValues[key] = e.includes(2) ? 1 : 3\r\n  }\r\n  return mapFormulas(nodes, f => f, f => {\r\n    if (f.operation !== \"threshold\") return f\r\n\r\n    const [v, t, pass, fail] = f.operands\r\n    if (v.operation === \"read\" && t.operation === \"const\") {\r\n      const key = v.path[v.path.length - 1], thres = t.value\r\n      if (key in maxValues) {\r\n        const max: number = maxValues[key]\r\n        if (max < thres) return fail\r\n        if (thres === 2 && exclusion[key]!.includes(2))\r\n          return threshold(v, 4, pass, fail)\r\n      }\r\n    }\r\n    return f\r\n  })\r\n}\r\n\r\nfunction reaffine(nodes: OptNode[], arts: ArtifactsBySlot, forceRename: boolean = false): { nodes: OptNode[], arts: ArtifactsBySlot } {\r\n  const affineNodes = new Set<OptNode>(), topLevelAffine = new Set<OptNode>()\r\n\r\n  function visit(node: OptNode, isAffine: boolean) {\r\n    if (isAffine) affineNodes.add(node)\r\n    else node.operands.forEach(op => affineNodes.has(op) && topLevelAffine.add(op))\r\n  }\r\n\r\n  const dynKeys = new Set<string>()\r\n\r\n  forEachNodes(nodes, _ => { }, f => {\r\n    const { operation } = f\r\n    switch (operation) {\r\n      case \"read\":\r\n        dynKeys.add(f.path[1])\r\n        visit(f, true)\r\n        break\r\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\r\n      case \"mul\": {\r\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\r\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\r\n        break\r\n      }\r\n      case \"const\": visit(f, true); break\r\n      case \"res\": case \"threshold\": case \"sum_frac\":\r\n      case \"max\": case \"min\": visit(f, false); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n\r\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\") &&\r\n    Object.keys(arts.base).length === dynKeys.size)\r\n    return { nodes, arts }\r\n\r\n  let current = -1\r\n  function nextDynKey(): string {\r\n    while (dynKeys.has(`${++current}`));\r\n    return `${current}`\r\n  }\r\n\r\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\r\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\r\n  const affineMap = new Map(affine.map(node => [node,\r\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\r\n      ? node\r\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\r\n  nodes = mapFormulas(nodes, f => affineMap.get(f) ?? f, f => f)\r\n\r\n  function reaffineArt(stat: DynStat): DynStat {\r\n    const values = constantFold([...affineMap.keys()], {\r\n      dyn: objectMap(stat, (value) => constant(value))\r\n    } as any, _ => true)\r\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\r\n  }\r\n  const result = {\r\n    nodes, arts: {\r\n      base: reaffineArt(arts.base),\r\n      values: objectKeyMap(allSlotKeys, slot =>\r\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\r\n    }\r\n  }\r\n  const offsets = Object.entries(reaffineArt({}))\r\n  for (const arts of Object.values(result.arts.values))\r\n    for (const { values } of arts)\r\n      for (const [key, baseValue] of offsets)\r\n        values[key] -= baseValue\r\n  return result\r\n}\r\n/** Remove artifacts that cannot be in top `numTop` builds */\r\nfunction pruneOrder(arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion): ArtifactsBySlot {\r\n  let progress = false\r\n  const noRainbow = !exclusion.rainbow?.length\r\n  const noSwitchIn = new Set(Object.entries(exclusion).filter(([_, v]) => v.length).map(([k]) => k) as ArtifactSetKey[])\r\n  const noSwitchOut = new Set(Object.entries(exclusion).filter(([_, v]) => v.includes(2) && !v.includes(4)).map(([k]) => k) as ArtifactSetKey[])\r\n  const values = objectKeyMap(allSlotKeys, slot => {\r\n    const list = arts.values[slot]\r\n    const newList = list.filter(art => {\r\n      let count = 0\r\n      return list.every(other => {\r\n        const greaterEqual = Object.entries(other.values).every(([k, o]) => o >= art.values[k])\r\n        const greater = Object.entries(other.values).some(([k, o]) => o > art.values[k])\r\n        if (greaterEqual && (greater || other.id > art.id) &&\r\n          ((noRainbow && !noSwitchIn.has(other.set!) && !noSwitchOut.has(art.set!)) || art.set === other.set))\r\n          count++\r\n        return count < numTop\r\n      })\r\n    })\r\n    if (newList.length !== list.length) progress = true\r\n    return newList\r\n  })\r\n  return progress ? { base: arts.base, values } : arts\r\n}\r\n/** Remove artifacts that cannot reach `minimum` in any build */\r\nfunction pruneArtRange(nodes: OptNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  const wrap = { arts }\r\n  while (true) {\r\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\r\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\r\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\r\n\r\n    let progress = false\r\n    const values = objectKeyMap(allSlotKeys, slot => {\r\n      const result = wrap.arts.values[slot].filter(art => {\r\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\r\n        const newRange = computeNodeRange(nodes, read)\r\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\r\n      })\r\n      if (result.length !== wrap.arts.values[slot].length)\r\n        progress = true\r\n      return result\r\n    })\r\n    if (!progress) break\r\n    wrap.arts = { base: wrap.arts.base, values }\r\n  }\r\n  return wrap.arts\r\n}\r\nfunction pruneNodeRange(nodes: OptNode[], arts: ArtifactsBySlot): OptNode[] {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\r\n  const nodeRange = computeNodeRange(nodes, reads)\r\n\r\n  return mapFormulas(nodes, f => {\r\n    {\r\n      const { min, max } = nodeRange.get(f)!\r\n      if (min === max) return constant(min)\r\n    }\r\n    const { operation } = f\r\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\r\n    switch (operation) {\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = operandRanges\r\n        if (value.min >= threshold.max) return f.operands[2]\r\n        else if (value.max < threshold.min) return f.operands[3]\r\n        if (pass.max === pass.min &&\r\n          fail.max === fail.min &&\r\n          pass.min === fail.min && isFinite(pass.min))\r\n          return constant(pass.max)\r\n        break\r\n      }\r\n      case \"min\": {\r\n        const newOperands = f.operands.filter((_, i) => {\r\n          const op1 = operandRanges[i]\r\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\r\n        })\r\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\r\n        break\r\n      }\r\n      case \"max\": {\r\n        const newOperands = f.operands.filter((_, i) => {\r\n          const op1 = operandRanges[i]\r\n          return operandRanges.every(op2 => op1.max >= op2.min)\r\n        })\r\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\r\n        break\r\n      }\r\n    }\r\n    return f\r\n  }, f => f)\r\n}\r\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\r\n  const result: DynMinMax = {}\r\n  ranges.forEach(range => {\r\n    Object.entries(range).forEach(([key, value]) => {\r\n      if (result[key]) {\r\n        result[key].min += value.min\r\n        result[key].max += value.max\r\n      } else result[key] = { ...value }\r\n    })\r\n  })\r\n  return result\r\n}\r\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\r\n  const result: DynMinMax = {}\r\n  if (arts.length) {\r\n    Object.keys(arts[0].values)\r\n      .filter(key => arts.every(art => art.values[key]))\r\n      .forEach(key => result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\r\n    arts.forEach(({ values }) => {\r\n      for (const [key, value] of Object.entries(values)) {\r\n        if (!result[key]) result[key] = { min: 0, max: value }\r\n        else {\r\n          if (result[key].max < value) result[key].max = value\r\n          if (result[key].min > value) result[key].min = value\r\n        }\r\n      }\r\n    })\r\n  }\r\n  return result\r\n}\r\nexport function computeFullArtRange(arts: ArtifactsBySlot): DynMinMax {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  return addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\r\n}\r\nexport function computeNodeRange(nodes: OptNode[], reads: DynMinMax): Map<OptNode, MinMax> {\r\n  const range = new Map<OptNode, MinMax>()\r\n\r\n  forEachNodes(nodes, _ => { }, f => {\r\n    const { operation } = f\r\n    const operands = f.operands.map(op => range.get(op)!)\r\n    let current: MinMax\r\n    switch (operation) {\r\n      case \"read\":\r\n        if (f.path[0] !== \"dyn\")\r\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\r\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\r\n        break\r\n      case \"const\": current = computeMinMax([f.value]); break\r\n      case \"add\": case \"min\": case \"max\":\r\n        current = {\r\n          min: allOperations[operation](operands.map(x => x.min)),\r\n          max: allOperations[operation](operands.map(x => x.max)),\r\n        }; break\r\n      case \"res\": current = {\r\n        min: allOperations[operation]([operands[0].max]),\r\n        max: allOperations[operation]([operands[0].min]),\r\n      }; break\r\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\r\n        accu.min * current.min, accu.min * current.max,\r\n        accu.max * current.min, accu.max * current.max,\r\n      ])); break\r\n      case \"threshold\":\r\n        if (operands[0].min >= operands[1].max) current = operands[2]\r\n        else if (operands[0].max < operands[1].min) current = operands[3]\r\n        else current = computeMinMax([], [operands[2], operands[3]])\r\n        break\r\n      case \"sum_frac\": {\r\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\r\n        if (sum.min <= 0 && sum.max >= 0)\r\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\r\n        else\r\n          // TODO: Check this\r\n          current = computeMinMax([\r\n            x.min / sum.min, x.min / sum.max,\r\n            x.max / sum.min, x.max / sum.max\r\n          ])\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n    range.set(f, current)\r\n  })\r\n  return range\r\n}\r\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\r\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\r\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\r\n  return { min, max }\r\n}\r\n\r\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\r\n  return {\r\n    base: arts.base,\r\n    values: objectKeyMap(allSlotKeys, slot => {\r\n      const filter = filters[slot]\r\n      switch (filter.kind) {\r\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\r\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set!))\r\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set!))\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\r\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\r\n}\r\nexport function mergePlot(plots: PlotData[]): PlotData {\r\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\r\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\r\n  while (keys.size > maxCount) {\r\n    scale *= reductionScaling\r\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\r\n  }\r\n  const result: PlotData = {}\r\n  for (const plot of plots)\r\n    for (const build of Object.values(plot)) {\r\n      const x = Math.round(build.plot! / scale) * scale\r\n      if (!result[x] || result[x]!.value < build.value)\r\n        result[x] = build\r\n    }\r\n  return result\r\n}\r\n\r\nexport function countBuilds(arts: ArtifactsBySlot): number {\r\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\r\n}\r\n\r\n\r\nexport function* filterFeasiblePerm(filters: Iterable<RequestFilter>, _artSets: ArtifactsBySlot): Iterable<RequestFilter> {\r\n  const artSets = objectMap(_artSets.values, values => new Set(values.map(v => v.set)))\r\n  filter_loop: for (const filter of filters) {\r\n    for (const [slot, f] of Object.entries(filter)) {\r\n      const available = artSets[slot]!\r\n      switch (f.kind) {\r\n        case \"required\": if ([...f.sets].every(s => !available.has(s))) continue filter_loop; break\r\n        case \"exclude\": if ([...available].every(s => f.sets.has(s!))) continue filter_loop; break\r\n        case \"id\": break\r\n      }\r\n    }\r\n    yield filter\r\n  }\r\n}\r\nexport function exclusionToAllowed(exclusion: number[] | undefined): Set<number> {\r\n  return new Set(exclusion?.includes(2)\r\n    ? exclusion.includes(4) ? [0, 1] : [0, 1, 4, 5]\r\n    : exclusion?.includes(4) ? [0, 1, 2, 3] : [0, 1, 2, 3, 4, 5])\r\n}\r\n/** A *disjoint* set of `RequestFilter` satisfying the exclusion rules */\r\nexport function* artSetPerm(exclusion: ArtSetExclusion, _artSets: ArtifactSetKey[]): Iterable<RequestFilter> {\r\n  /**\r\n   * This generation algorithm is separated into two parts:\r\n   * - \"Shape\" generation\r\n   *   - It first generates all build \"shapes\", e.g., AABBC, ABBCD\r\n   *   - It then filters the generated shapes according to the rainbow exclusion, e.g., removes ABBCD if excluding 3 rainbows\r\n   *   - It then merges the remaining shapes into wildcards, e.g. AABAA + AABAB + AABAC => AABA*\r\n   * - Shape filling\r\n   *   - From the given shapes, it tries to fill in all non-rainbow slots, e.g., slots A and B of AABBC, with actual artifacts\r\n   *   - It then fills the rainbow slots, e.g., slot C of AABBC while ensuring the exclusion rule of each sets\r\n   */\r\n  const artSets = [...new Set(_artSets)], allowedRainbows = exclusionToAllowed(exclusion.rainbow)\r\n  let shapes: number[][] = []\r\n  function populateShapes(current: number[], list: Set<number>, rainbows: number[]) {\r\n    if (current.length === 5) {\r\n      if (allowedRainbows.has(rainbows.length))\r\n        shapes.push(current)\r\n      return\r\n    }\r\n    for (const i of list) populateShapes([...current, i], list, rainbows.filter(j => j !== i))\r\n    populateShapes([...current, current.length], new Set([...list, current.length]), [...rainbows, current.length])\r\n  }\r\n  populateShapes([0], new Set([0]), [0])\r\n  function indexOfShape(shape: number[], replacing: number) {\r\n    if (range(replacing + 1, 4).some(i => shape[i] !== 5))\r\n      return undefined\r\n    shape = [...shape]\r\n    shape[replacing] = 5\r\n    return shape.reduce((a, b) => a * 6 + b, 0)\r\n  }\r\n  for (let replacing = 4; replacing >= 0; replacing--) {\r\n    const required: Map<number, number> = new Map()\r\n    for (const shape of shapes) {\r\n      const id = indexOfShape(shape, replacing)\r\n      if (id === undefined) continue\r\n      required.set(id, (required.get(id) ?? new Set(shape.slice(0, replacing)).size + 1) - 1)\r\n    }\r\n    for (const [id, remaining] of required.entries()) {\r\n      if (remaining === 0) {\r\n        const shape = [...shapes.find(shape => indexOfShape(shape, replacing) === id)!]\r\n        shape[replacing] = 5\r\n        shapes = shapes.filter(shape => indexOfShape(shape, replacing) !== id)\r\n        shapes.push(shape)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Shapes are now calculated and merged, proceed to fill in the sets\r\n\r\n  const noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\r\n  const result: RequestFilter = objectKeyMap(allSlotKeys, _ => noFilter)\r\n\r\n  const counts = { ...objectMap(exclusion, _ => 0), ...objectKeyMap(artSets, _ => 0) }\r\n  const allowedCounts = objectMap(exclusion, exclusionToAllowed)\r\n\r\n  function* check(shape: number[]) {\r\n    const used: Set<ArtifactSetKey> = new Set()\r\n    let groupped: number[][] = [], rainbows: number[] = []\r\n    for (const i of shape) {\r\n      groupped.push([])\r\n      if (i === 5) rainbows.push(groupped.length - 1)\r\n      else groupped[i].push(groupped.length - 1)\r\n    }\r\n    groupped = groupped.filter(v => v.length).sort((a, b) => b.length - a.length)\r\n    let usableRainbows = rainbows.length\r\n\r\n    // Inception.. because js doesn't like functions inside a for-loop\r\n    function* check(i: number) {\r\n      if (i === groupped.length)\r\n        return yield* check_free(0)\r\n\r\n      for (const set of artSets) {\r\n        if (used.has(set)) continue\r\n        const length = groupped[i].length, allowedSet = allowedCounts[set]\r\n        let requiredRainbows = 0\r\n\r\n        if (allowedSet && !allowedSet.has(length)) {\r\n          // Look ahead and see if we have enough rainbows to fill to the next `allowedSet` if we use the current set\r\n          requiredRainbows = (range(length + 1, 5).find(l => allowedSet.has(l)) ?? 6) - length\r\n          if (requiredRainbows > usableRainbows) continue // Not enough rainbows. Next..\r\n        }\r\n\r\n        used.add(set)\r\n        counts[set] = groupped[i].length\r\n        groupped[i].forEach(j => result[allSlotKeys[j]] = { kind: \"required\", sets: new Set([set]) })\r\n        usableRainbows -= requiredRainbows\r\n\r\n        yield* check(i + 1)\r\n\r\n        usableRainbows += requiredRainbows\r\n        counts[set] = 0\r\n        used.delete(set)\r\n      }\r\n    }\r\n    // We separate filling rainbow slots from groupped slots because it has an entirely\r\n    // different set of rules regarding what can be filled and what states to be kept.\r\n    function* check_free(i: number) {\r\n      const remaining = rainbows.length - i, isolated: ArtifactSetKey[] = [], missing: ArtifactSetKey[] = [], rejected: ArtifactSetKey[] = []\r\n      let required = 0\r\n      for (const set of artSets) {\r\n        const allowedSet = allowedCounts[set], count = counts[set]\r\n        if (!allowedSet) continue\r\n        if (range(1, remaining).every(j => !allowedSet.has(count + j))) rejected.push(set)\r\n        else if (!allowedSet.has(count)) {\r\n          required += [...allowedSet].find(x => x > count)! - count\r\n          missing.push(set)\r\n        }\r\n        else if (range(0, remaining).some(j => !allowedSet.has(count + j))) isolated.push(set)\r\n      }\r\n      if (required > remaining) return\r\n      if (i === rainbows.length) {\r\n        yield { ...result }\r\n        return\r\n      }\r\n      if (required === remaining) {\r\n        for (const set of missing) {\r\n          counts[set]++\r\n          result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\r\n          yield* check_free(i + 1)\r\n          counts[set]--\r\n        }\r\n        return\r\n      }\r\n      for (const set of [...isolated, ...missing]) {\r\n        counts[set]++\r\n        result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\r\n        yield* check_free(i + 1)\r\n        counts[set]--\r\n      }\r\n      result[allSlotKeys[rainbows[i]]] = { kind: \"exclude\", sets: new Set([...missing, ...rejected, ...isolated]) }\r\n      yield* check_free(i + 1)\r\n    }\r\n    yield* check(0)\r\n  }\r\n  for (const shape of shapes) yield* check(shape)\r\n}\r\n\r\nexport type RequestFilter = StrictDict<SlotKey,\r\n  { kind: \"required\", sets: Set<ArtifactSetKey> } |\r\n  { kind: \"exclude\", sets: Set<ArtifactSetKey> } |\r\n  { kind: \"id\", ids: Set<string> }\r\n>\r\n\r\nexport type DynStat = { [key in string]: number }\r\nexport type ArtifactBuildData = {\r\n  id: string\r\n  set?: ArtifactSetKey\r\n  values: DynStat\r\n}\r\nexport type ArtifactsBySlot = { base: DynStat, values: StrictDict<SlotKey, ArtifactBuildData[]> }\r\n\r\nexport type PlotData = Dict<number, Build>\r\nexport interface Build {\r\n  value: number\r\n  plot?: number\r\n  artifactIds: string[]\r\n}\r\n\r\nexport type DynMinMax = { [key in string]: MinMax }\r\nexport type MinMax = { min: number, max: number }\r\n","import { customMapFormula, forEachNodes } from \"../../../../Formula/internal\";\r\nimport { allOperations, OptNode } from \"../../../../Formula/optimization\";\r\nimport { ConstantNode } from \"../../../../Formula/type\";\r\nimport { prod, threshold } from \"../../../../Formula/utils\";\r\nimport { SlotKey } from \"../../../../Types/consts\";\r\nimport { assertUnreachable, objectKeyValueMap, objectMap } from \"../../../../Util/Util\";\r\nimport type { InterimResult, Setup, SplitWorker } from \"./BackgroundWorker\";\r\nimport { ArtifactBuildData, ArtifactsBySlot, computeFullArtRange, computeNodeRange, countBuilds, DynStat, filterArts, MinMax, pruneAll, RequestFilter } from \"./common\";\r\n\r\ntype Approximation = {\r\n  base: number,\r\n  /** optimization target contribution from a given artifact (id) */\r\n  conts: StrictDict<string, number>\r\n}\r\ntype Filter = {\r\n  nodes: OptNode[], arts: ArtifactsBySlot\r\n  /**\r\n   * The contribution of each artifact to the optimization target. The (over)estimated\r\n   * optimization target value is the sum of contributions of all artifacts in the build.\r\n   */\r\n  approxs: Approximation[], maxConts: Record<SlotKey, number>[]\r\n  /** How many times has this filter been splitted */\r\n  age: number\r\n  /** Total number of builds in this filter */\r\n  count: number\r\n  /** Whether or not this filter is in a valid (calculated) state */\r\n  calculated?: boolean\r\n}\r\nexport class BNBSplitWorker implements SplitWorker {\r\n  min: number[]\r\n  nodes: OptNode[]\r\n  arts: ArtifactsBySlot\r\n  maxBuilds: number\r\n\r\n  /**\r\n   * Filters are not neccessarily in a valid state, i.e., \"calculated\".\r\n   * We amortize the calculation to 1-per-split so that the calculation\r\n   * overhead doesn't lead to lag.\r\n   */\r\n  filters: Filter[] = []\r\n  interim: InterimResult | undefined\r\n  firstUncalculated = 0\r\n\r\n  callback: (interim: InterimResult) => void\r\n\r\n  constructor({ arts, optimizationTarget, filters, maxBuilds }: Setup, callback: (interim: InterimResult) => void) {\r\n    this.arts = arts\r\n    this.min = [-Infinity, ...filters.map(x => x.min)]\r\n    this.nodes = [optimizationTarget, ...filters.map(x => x.value)]\r\n    this.callback = callback\r\n    this.maxBuilds = maxBuilds\r\n\r\n    // make sure we can approximate it\r\n    linearUpperBound(this.nodes, arts)\r\n  }\r\n\r\n  addFilter(filter: RequestFilter): void {\r\n    const arts = filterArts(this.arts, filter), count = countBuilds(arts)\r\n    if (count)\r\n      this.filters.push({ nodes: this.nodes, arts, maxConts: [], approxs: [], age: 0, count })\r\n  }\r\n  split(newThreshold: number, minCount: number): RequestFilter | undefined {\r\n    if (newThreshold > this.min[0]) {\r\n      this.min[0] = newThreshold\r\n      // All calculations become stale\r\n      this.firstUncalculated = 0\r\n      this.filters.forEach(filter => delete filter.calculated)\r\n    }\r\n    if (this.firstUncalculated < this.filters.length)\r\n      this.calculateFilter(this.firstUncalculated++) // Amortize the filter calculation to 1-per-split\r\n\r\n    while (this.filters.length) {\r\n      const filter = this.getApproxFilter(), { arts, count } = filter\r\n      this.reportInterim(false)\r\n      if (!count) continue\r\n\r\n      if (count <= minCount) {\r\n        this.reportInterim(true)\r\n        return objectMap(arts.values, arts => ({ kind: \"id\" as const, ids: new Set(arts.map(art => art.id)) }))\r\n      }\r\n      this.splitOldFilter(filter)\r\n    }\r\n    this.reportInterim(true)\r\n    return undefined\r\n  }\r\n\r\n  reportInterim(forced = false) {\r\n    if (this.interim && (this.interim.skipped > 1000000 || forced === true)) {\r\n      this.callback(this.interim)\r\n      this.interim = undefined\r\n    }\r\n  }\r\n\r\n  splitOldFilter({ nodes, arts, approxs, age }: Filter) {\r\n    /**\r\n     * Split the artifacts in each slot into high/low main (index 0) contribution along 1/3 of the\r\n     * contribution range. If the main contribution of a slot is in range 500-2000, the the high-\r\n     * contibution artifact has contribution of at least 1500, and the rest are low-contribution.\r\n     */\r\n    const splitted = objectMap(arts.values, arts => {\r\n      const remaining = arts.map((art) => ({ art, cont: approxs[0].conts[art.id] }))\r\n        .sort(({ cont: c1 }, { cont: c2 }) => c2 - c1)\r\n      const minCont = remaining[remaining.length - 1]?.cont ?? 0\r\n      let contCutoff = remaining.reduce((accu, { cont }) => accu + cont, -minCont * remaining.length) / 3\r\n\r\n      const index = Math.max(1, remaining.findIndex(({ cont }) => (contCutoff -= cont - minCont) <= 0))\r\n      const lowArts = remaining.splice(index).map(({ art }) => art), highArts = remaining.map(({ art }) => art)\r\n      return {\r\n        high: { arts: highArts, maxConts: approxs.map(approx => maxContribution(highArts, approx)), },\r\n        low: { arts: lowArts, maxConts: approxs.map(approx => maxContribution(lowArts, approx)) },\r\n      }\r\n    })\r\n    const remaining = Object.keys(splitted), { filters } = this\r\n    const current: StrictDict<SlotKey, ArtifactBuildData[]> = {} as any\r\n    const currentCont: StrictDict<SlotKey, number[]> = {} as any\r\n    function partialSplit(count: number) {\r\n      if (!remaining.length) {\r\n        const maxConts = approxs.map((_, i) => objectMap(currentCont, val => val[i]))\r\n        const currentArts = { base: arts.base, values: { ...current } }\r\n        filters.push({ nodes, arts: currentArts, maxConts, approxs, age: age + 1, count })\r\n        return\r\n      }\r\n      const slot = remaining.pop()!, { high, low } = splitted[slot]\r\n      if (low.arts.length) {\r\n        current[slot] = low.arts\r\n        currentCont[slot] = low.maxConts\r\n        partialSplit(count * low.arts.length)\r\n      }\r\n      if (high.arts.length) {\r\n        current[slot] = high.arts\r\n        currentCont[slot] = high.maxConts\r\n        partialSplit(count * high.arts.length)\r\n      }\r\n      remaining.push(slot)\r\n    }\r\n    partialSplit(1)\r\n  }\r\n\r\n  /** *Precondition*: `this.filters` must not be empty */\r\n  getApproxFilter(): Filter {\r\n    this.calculateFilter(this.filters.length - 1)\r\n    if (this.firstUncalculated > this.filters.length)\r\n      this.firstUncalculated = this.filters.length\r\n    return this.filters.pop()!\r\n  }\r\n  /** Update calculate on filter at index `i` if not done so already */\r\n  calculateFilter(i: number): void {\r\n    let { nodes, arts, maxConts, approxs, age, count: oldCount, calculated } = this.filters[i]\r\n    if (calculated) return\r\n    if (age < 3 || age % 5 === 2) { // Make sure the condition includes initial filter `age === 0`\r\n      // Either the filter is so early that we can get a good cutoff, or the problem has\r\n      // gotten small enough that the old approximation becomes inaccurate\r\n      ({ nodes, arts } = pruneAll(nodes, this.min, arts, this.maxBuilds, {}, { pruneNodeRange: true }))\r\n      if (Object.values(arts.values).every(x => x.length)) {\r\n        approxs = approximation(nodes, arts)\r\n        maxConts = approxs.map(approx => objectMap(arts.values, val => maxContribution(val, approx)))\r\n      }\r\n    }\r\n    // Removing artifacts that doesn't meet the required opt target contributions.\r\n    //\r\n    // We could actually loop `newValues` computation if the removed artifacts have\r\n    // the highest contribution in one of the target node as the removal will raise\r\n    // the required contribution even further. However, once is generally enough.\r\n    const leadingConts = maxConts.map((cont, i) => Object.values(cont)\r\n      .reduce((accu, val) => accu + val, approxs[i].base - this.min[i]))\r\n    const newValues = objectMap(arts.values, (arts, slot) => {\r\n      const requiredConts = leadingConts.map((lc, i) => maxConts[i][slot] - lc)\r\n      return arts.filter(({ id }) => approxs.every(({ conts }, i) => conts[id] > requiredConts[i]))\r\n    })\r\n    arts = { base: arts.base, values: newValues }\r\n    const newCount = countBuilds(arts)\r\n    if (newCount !== oldCount)\r\n      if (this.interim) this.interim.skipped += oldCount - newCount\r\n      else this.interim = { command: \"interim\", buildValues: undefined, tested: 0, failed: 0, skipped: oldCount - newCount }\r\n    this.filters[i] = { nodes, arts, maxConts, approxs, age, count: newCount, calculated: true }\r\n  }\r\n}\r\n\r\nfunction maxContribution(arts: ArtifactBuildData[], approximation: Approximation): number {\r\n  return Math.max(...arts.map(({ id }) => approximation.conts[id]!))\r\n}\r\nfunction approximation(nodes: OptNode[], arts: ArtifactsBySlot): Approximation[] {\r\n  return linearUpperBound(nodes, arts).map(weight => ({\r\n    base: dot(arts.base, weight, weight.$c),\r\n    conts: objectKeyValueMap(Object.values(arts.values).flat(),\r\n      data => [data.id, dot(data.values, weight, 0)])\r\n  }))\r\n}\r\nfunction dot(values: DynStat, lin: DynStat, c: number): number {\r\n  return Object.entries(values).reduce((accu, [k, v]) => accu + (lin[k] ?? 0) * v, c)\r\n}\r\n\r\nfunction weightedSum(...entries: readonly (readonly [number, Linear])[]): Linear\r\nfunction weightedSum(...entries: readonly (readonly [number, DynStat])[]): DynStat\r\nfunction weightedSum(...entries: readonly (readonly [number, DynStat])[]): DynStat {\r\n  const result = {}\r\n  for (const [weight, entry] of entries)\r\n    for (const [k, v] of Object.entries(entry))\r\n      result[k] = (result[k] ?? 0) + weight * v\r\n  return result\r\n}\r\nexport type Linear = DynStat & { $c: number }\r\n/** Compute a linear upper bound of `nodes` */\r\nexport function linearUpperBound(nodes: OptNode[], arts: ArtifactsBySlot): Linear[] {\r\n  const cents = weightedSum([1, arts.base], ...Object.values(arts.values).map(arts =>\r\n    [1 / arts.length, weightedSum(...arts.map(art => [1, art.values] as const))] as const))\r\n  const getCent = (lin: Linear) => dot(cents, lin, lin.$c)\r\n\r\n  const minMaxes = new Map<OptNode, MinMax>()\r\n  forEachNodes(nodes, f => {\r\n    const { operation } = f\r\n    if (operation === \"mul\") minMaxes.set(f, { min: NaN, max: NaN })\r\n    switch (operation) {\r\n      case \"mul\": case \"min\": case \"max\": case \"threshold\": case \"res\": case \"sum_frac\":\r\n        f.operands.forEach(op => minMaxes.set(op, { min: NaN, max: NaN })); break\r\n    }\r\n  }, _ => _)\r\n  const nodeRanges = computeNodeRange([...minMaxes.keys()], computeFullArtRange(arts))\r\n  for (const [node, minMax] of nodeRanges.entries()) minMaxes.set(node, minMax)\r\n\r\n  function slopePoint(slope: number, x0: number, y0: number, lin: Linear): Linear {\r\n    return weightedSum([1, { $c: y0 - slope * x0 }], [slope, lin])\r\n  }\r\n  function interpolate(x0: number, y0: number, x1: number, y1: number, lin: Linear, upper: boolean): Linear {\r\n    if (Math.abs(x0 - x1) < 1e-10)\r\n      return { $c: upper ? Math.max(y0, y1) : Math.min(y0, y1) }\r\n    return slopePoint((y1 - y0) / (x1 - x0), x0, y0, lin)\r\n  }\r\n\r\n  const upper = \"u\", lower = \"l\", outward = \"o\"\r\n  type Context = typeof upper | typeof lower | typeof outward\r\n  return customMapFormula<Context, Linear, OptNode>(nodes, upper, (f, context, _map) => {\r\n    const { operation } = f\r\n    const map: (op: OptNode, c?: Context) => Linear = (op, c = context) => _map(op, c)\r\n    const oppositeContext = context === upper ? lower : upper\r\n\r\n    if (context === outward) {\r\n      const { min, max } = minMaxes.get(f)!\r\n      if (min < 0 && max > 0)\r\n        // TODO: We can bypass this restriction by converting `f`\r\n        // to `min(f, 0)` or `max(f, 0)` as appropriate\r\n        throw new PolyError(\"Zero-crossing\", operation)\r\n      return map(f, max <= 0 ? lower : upper)\r\n    }\r\n\r\n    switch (operation) {\r\n      case \"const\": return { $c: f.value }\r\n      case \"read\": return { $c: 0, [f.path[1]]: 1 }\r\n      case \"add\": return weightedSum(...f.operands.map(op => [1, map(op)] as const))\r\n      case \"min\": case \"max\": {\r\n        const op = allOperations[operation]\r\n        const xs = f.operands.filter(op => op.operation !== \"const\"), [xOp] = xs\r\n        if (xs.length !== 1) throw new PolyError(\"Multivariate\", operation)\r\n\r\n        const x = map(xOp), c = op(f.operands.filter(op => op.operation === \"const\")\r\n          .map(c => (c as ConstantNode<number>).value))\r\n        if ((operation === \"max\" && context === lower) || (operation === \"min\" && context === upper))\r\n          return x\r\n        const { min, max } = minMaxes.get(xOp)!, yMin = op([min, c]), yMax = op([max, c])\r\n        return interpolate(min, yMin, max, yMax, x, context === upper)\r\n      }\r\n      case \"res\": {\r\n        if (context !== upper) throw new PolyError(\"Unsupported direction\", operation)\r\n        const op = allOperations[operation]\r\n        const [xOp] = f.operands, { min, max } = minMaxes.get(xOp)!\r\n        const x = map(xOp, oppositeContext)\r\n        // Linear region 1 - base/2 or concave region with peak at base = 0\r\n        if (min < 0 && max < 1.75) return weightedSum([1, { $c: 1 }], [-0.5, x])\r\n        // Clamp `min` to guarantee upper bound\r\n        else return interpolate(min, op([min]), max, op([max]), x, context === upper)\r\n      }\r\n      case \"sum_frac\": {\r\n        if (context !== upper) throw new PolyError(\"Unsupported direction\", operation)\r\n        const [xOp, cOp] = f.operands\r\n        if (cOp.operation !== \"const\") throw new PolyError(\"Non-constant node\", operation)\r\n        const x = map(xOp), c = cOp.value, { min, max } = minMaxes.get(xOp)!\r\n        const loc = Math.sqrt((min + c) * (max + c))\r\n        if (min <= -c) throw new PolyError(\"Unsupported pattern\", operation)\r\n        return slopePoint(c / (c + loc) / (c + loc), loc, loc / (loc + c), x)\r\n      }\r\n      case \"threshold\": {\r\n        const [vOp, tOp, pOp, fOp] = f.operands\r\n        if (fOp.operation !== \"const\" || tOp.operation !== \"const\")\r\n          throw new PolyError(\"Non-constant node\", operation)\r\n        if (pOp.operation !== \"const\") {\r\n          if (fOp.value !== 0) throw new PolyError(\"Unsupported pattern\", operation)\r\n\r\n          const threshOp = threshold(vOp, tOp, 1, fOp), mulOp = prod(threshOp, pOp)\r\n          // Populate `minMaxes` to ensure consistency\r\n          const { min, max } = minMaxes.get(pOp)!\r\n          minMaxes.set(threshOp, { min: 0, max: 1 })\r\n          minMaxes.set(mulOp, { min: Math.min(min, 0), max: Math.max(max, 0) })\r\n          return map(mulOp)\r\n        }\r\n        const { min, max } = minMaxes.get(vOp)!\r\n        const thresh = tOp.value, pass = pOp.value, fail = fOp.value\r\n        const isFirstHalf = (pass > fail) === (context === upper)\r\n\r\n        const v = map(vOp, pass > fail ? context : oppositeContext)\r\n        const yThresh = isFirstHalf ? pass : fail\r\n        const slope = (pass - fail) / (isFirstHalf ? (thresh - min) : (max - thresh))\r\n        return slopePoint(slope, thresh, yThresh, v)\r\n      }\r\n      case \"mul\": {\r\n        const { min, max } = minMaxes.get(f)!\r\n        if (min < 0 && max > 0) throw new PolyError(\"Zero-crossing\", operation)\r\n        if ((min < 0 && context !== lower) || (max > 0 && context !== upper))\r\n          throw new PolyError(\"Unsupported direction\", operation)\r\n\r\n        // For x/a >= 0, sum{x/a} <= n, and k > 0, it follows that\r\n        //\r\n        //   k prod{x} <= k/n prod{a} sum{x/a}\r\n        //\r\n        // This follows from AM-GM; prod{x/a} <= (sum{x/a}/n)^n <= sum{x/a}/n\r\n        const operands = [...f.operands], flattenedOperands: OptNode[] = []\r\n        let coeff = 1\r\n        while (operands.length) {\r\n          const operand = operands.pop()!\r\n          if (operand.operation === \"mul\") operands.push(...operand.operands)\r\n          else if (operand.operation === \"const\") coeff *= operand.value;\r\n          else flattenedOperands.push(operand)\r\n        }\r\n        const lins = flattenedOperands.map(op => map(op, outward))\r\n        const ranges = flattenedOperands.map(op => minMaxes.get(op)!)\r\n\r\n        // Set `a` to the centroid of `x`, normalizing so that `sum{x/a} = n`\r\n        const cents = lins.map(getCent)\r\n        const factor = cents.reduce((accu, cent, i) => accu + (cent >= 0 ? ranges[i].max : ranges[i].min) / cent, 0)\r\n        const prod = cents.reduce((a, b) => a * factor * b / lins.length, coeff / factor)\r\n        return weightedSum(...lins.map((op, i) => [prod / cents[i], op] as const))\r\n      }\r\n\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n}\r\nclass PolyError extends Error {\r\n  constructor(cause: string, operation: string) {\r\n    super(`Found ${cause} in ${operation} node when generating polynomial upper bound`)\r\n  }\r\n}\r\n","import { ArtSetExclusion } from '../../../../Database/DataManagers/BuildSettingData'\r\nimport { OptNode } from '../../../../Formula/optimization'\r\nimport { assertUnreachable } from '../../../../Util/Util'\r\nimport { BNBSplitWorker } from \"./BNBSplitWorker\"\r\nimport { ArtifactsBySlot, artSetPerm, Build, countBuilds, filterArts, filterFeasiblePerm, PlotData, RequestFilter } from \"./common\"\r\nimport { ComputeWorker } from \"./ComputeWorker\"\r\nimport { DefaultSplitWorker } from './DefaultSplitWorker'\r\n\r\nlet id: number, splitWorker: SplitWorker, computeWorker: ComputeWorker\r\n\r\nonmessage = ({ data }: { data: WorkerCommand }) => {\r\n  const { command } = data\r\n  let result: WorkerResult\r\n  switch (command) {\r\n    case \"setup\":\r\n      id = data.id\r\n      const splitID = `split${id}`, computeID = `compute${id}`\r\n      try {\r\n        splitWorker = new BNBSplitWorker(data, interim => postMessage({ id, source: splitID, ...interim }))\r\n      } catch {\r\n        splitWorker = new DefaultSplitWorker(data, interim => postMessage({ id, source: splitID, ...interim }))\r\n      }\r\n      computeWorker = new ComputeWorker(data, interim => postMessage({ id, source: computeID, ...interim }))\r\n      result = { command: \"iterate\" }\r\n      break\r\n    case \"split\": {\r\n      if (data.filter) splitWorker.addFilter(data.filter)\r\n      const filter = splitWorker.split(data.threshold, data.minCount)\r\n      result = { command: \"split\", filter }\r\n      break\r\n    }\r\n    case \"iterate\": {\r\n      const { threshold, filter } = data\r\n      computeWorker.compute(threshold, filter)\r\n      result = { command: \"iterate\" }\r\n      break\r\n    }\r\n    case \"finalize\": {\r\n      computeWorker.refresh(true)\r\n      const { builds, plotData } = computeWorker\r\n      result = { command: \"finalize\", builds, plotData }\r\n      break\r\n    }\r\n    case \"count\": {\r\n      const { exclusion } = data, arts = computeWorker.arts\r\n      const setPerm = filterFeasiblePerm(artSetPerm(exclusion, [...new Set(Object.values(arts.values).flatMap(x => x.map(x => x.set!)))]), arts)\r\n      let counts = data.arts.map(_ => 0)\r\n      for (const perm of setPerm)\r\n        data.arts.forEach((arts, i) => counts[i] += countBuilds(filterArts(arts, perm)));\r\n      result = { command: \"count\", counts }\r\n      break\r\n    }\r\n    default: assertUnreachable(command)\r\n  }\r\n  postMessage({ id, ...result })\r\n}\r\n\r\nexport interface SplitWorker {\r\n  addFilter(filter: RequestFilter): void\r\n  split(newThreshold: number, minCount: number): RequestFilter | undefined\r\n}\r\n\r\nexport type WorkerCommand = Setup | Split | Iterate | Finalize | Count\r\nexport type WorkerResult = SourcedInterimResult | SplitResult | IterateResult | FinalizeResult | CountResult\r\n\r\nexport interface Setup {\r\n  command: \"setup\"\r\n\r\n  id: number\r\n  arts: ArtifactsBySlot\r\n\r\n  optimizationTarget: OptNode\r\n  filters: { value: OptNode, min: number }[]\r\n  plotBase: OptNode | undefined,\r\n  maxBuilds: number\r\n}\r\nexport interface Split {\r\n  command: \"split\"\r\n  threshold: number\r\n  minCount: number\r\n  filter?: RequestFilter\r\n}\r\nexport interface Iterate {\r\n  command: \"iterate\"\r\n  threshold: number\r\n  filter: RequestFilter\r\n}\r\n\r\nexport interface Finalize {\r\n  command: \"finalize\"\r\n}\r\nexport interface Count {\r\n  command: \"count\"\r\n  arts: ArtifactsBySlot[]\r\n  exclusion: ArtSetExclusion\r\n}\r\nexport interface SplitResult {\r\n  command: \"split\"\r\n  filter: RequestFilter | undefined\r\n}\r\nexport interface IterateResult {\r\n  command: \"iterate\"\r\n}\r\nexport interface FinalizeResult {\r\n  command: \"finalize\"\r\n  builds: Build[]\r\n  plotData?: PlotData\r\n}\r\nexport interface CountResult {\r\n  command: \"count\"\r\n  counts: number[]\r\n}\r\nexport interface InterimResult {\r\n  command: \"interim\"\r\n  buildValues: number[] | undefined\r\n  /** The number of builds since last report, including failed builds */\r\n  tested: number\r\n  /** The number of builds that does not meet the min-filter requirement since last report */\r\n  failed: number\r\n  skipped: number\r\n}\r\nexport interface SourcedInterimResult extends InterimResult {\r\n  /** the source of the message, must be unique for each source of `buildValues` */\r\n  source: string\r\n}\r\n","import { optimize, OptNode, precompute } from '../../../../Formula/optimization';\r\nimport type { InterimResult, Setup } from './BackgroundWorker';\r\nimport { ArtifactBuildData, ArtifactsBySlot, Build, countBuilds, filterArts, mergePlot, PlotData, pruneAll, RequestFilter } from './common';\r\n\r\nexport class ComputeWorker {\r\n  builds: Build[] = []\r\n  buildValues: number[] | undefined = undefined\r\n  plotData: PlotData | undefined\r\n  threshold: number = -Infinity\r\n  maxBuilds: number\r\n  min: number[]\r\n\r\n  arts: ArtifactsBySlot\r\n  nodes: OptNode[]\r\n\r\n  callback: (interim: InterimResult) => void\r\n\r\n  constructor({ arts, optimizationTarget, filters, plotBase, maxBuilds }: Setup, callback: (interim: InterimResult) => void) {\r\n    this.arts = arts\r\n    this.min = filters.map(x => x.min)\r\n    this.maxBuilds = maxBuilds\r\n    this.callback = callback\r\n    this.nodes = filters.map(x => x.value)\r\n    this.nodes.push(optimizationTarget)\r\n    if (plotBase) {\r\n      this.plotData = {}\r\n      this.nodes.push(plotBase)\r\n    }\r\n    this.nodes = optimize(this.nodes, {}, _ => false)\r\n  }\r\n\r\n  compute(newThreshold: number, filter: RequestFilter) {\r\n    if (this.threshold > newThreshold) this.threshold = newThreshold\r\n    const { min, interimReport } = this, self = this // `this` in nested functions means different things\r\n    let preArts = filterArts(this.arts, filter)\r\n    const totalCount = countBuilds(preArts), oldMaxBuildCount = this.builds.length\r\n\r\n    let nodes = this.nodes;\r\n    ({ nodes, arts: preArts } = pruneAll(nodes, min, preArts, this.maxBuilds, {}, {\r\n      pruneArtRange: true, pruneNodeRange: true,\r\n    }))\r\n    const arts = Object.values(preArts.values).sort((a, b) => a.length - b.length)\r\n    const compute = precompute(nodes, preArts.base, f => f.path[1], arts.length)\r\n\r\n    const buffer = Array<ArtifactBuildData>(arts.length)\r\n    const count = { tested: 0, failed: 0, skipped: totalCount - countBuilds(preArts) }\r\n\r\n    function permute(i: number) {\r\n      if (i < 0) {\r\n        const result = compute(buffer)\r\n        if (min.every((m, i) => (m <= result[i]))) {\r\n          const value = result[min.length], { builds, plotData } = self\r\n          let build: Build | undefined\r\n          if (value >= self.threshold) {\r\n            build = { value, artifactIds: buffer.map(x => x.id) }\r\n            builds.push(build)\r\n          }\r\n          if (plotData) {\r\n            const x = result[min.length + 1]\r\n            if (!plotData[x] || plotData[x]!.value < value) {\r\n              if (!build) build = { value, artifactIds: buffer.map(x => x.id) }\r\n              build.plot = x\r\n              plotData[x] = build\r\n            }\r\n          }\r\n        }\r\n        else count.failed += 1\r\n        return\r\n      }\r\n      arts[i].forEach(art => {\r\n        buffer[i] = art\r\n        permute(i - 1)\r\n      })\r\n      if (i === 0) {\r\n        count.tested += arts[0].length\r\n        if (count.tested > 1 << 16)\r\n          interimReport(count)\r\n      }\r\n    }\r\n\r\n    permute(arts.length - 1)\r\n    interimReport(count, this.builds.length > oldMaxBuildCount)\r\n  }\r\n\r\n  refresh(force: boolean): void {\r\n    const { maxBuilds } = this\r\n    if (Object.keys(this.plotData ?? {}).length >= 100000)\r\n      this.plotData = mergePlot([this.plotData!])\r\n\r\n    if (this.builds.length >= 1000 || force) {\r\n      this.builds = this.builds\r\n        .sort((a, b) => b.value - a.value)\r\n        .slice(0, maxBuilds)\r\n      this.buildValues = this.builds.map(x => x.value)\r\n      this.threshold = Math.max(this.threshold, this.buildValues[maxBuilds - 1] ?? -Infinity)\r\n    }\r\n  }\r\n  interimReport = (count: { tested: number, failed: number, skipped: number }, forced = false) => {\r\n    this.refresh(forced)\r\n    this.callback({ command: \"interim\", buildValues: this.buildValues, ...count })\r\n    this.buildValues = undefined\r\n    count.tested = 0\r\n    count.failed = 0\r\n    count.skipped = 0\r\n  }\r\n}\r\n","import { allSlotKeys } from '../../../../Types/consts';\r\nimport type { InterimResult, Setup, SplitWorker } from './BackgroundWorker';\r\nimport { ArtifactsBySlot, countBuilds, filterArts, RequestFilter } from './common';\r\n\r\nexport class DefaultSplitWorker implements SplitWorker {\r\n  arts: ArtifactsBySlot\r\n  filters: RequestFilter[] = []\r\n\r\n  constructor({ arts }: Setup, _callback: (interim: InterimResult) => void) {\r\n    this.arts = arts\r\n  }\r\n  addFilter(filter: RequestFilter) {\r\n    this.filters.push(filter)\r\n  }\r\n  split(_newThreshold: number, minCount: number) {\r\n    while (this.filters.length) {\r\n      const filter = this.filters.pop()!, count = countBuilds(filterArts(this.arts, filter))\r\n      if (count <= minCount) return filter\r\n      splitBySetOrID(this.arts, filter, minCount).forEach(filter => this.addFilter(filter))\r\n    }\r\n  }\r\n}\r\n\r\nfunction splitBySetOrID(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): RequestFilter[] {\r\n  const arts = filterArts(_arts, filter)\r\n\r\n  const candidates = allSlotKeys\r\n    .map(slot => ({ slot, sets: new Set(arts.values[slot].map(x => x.set)) }))\r\n    .filter(({ sets }) => sets.size > 1)\r\n  if (!candidates.length)\r\n    return splitByID(arts, filter, limit)\r\n  const { sets, slot } = candidates.reduce((a, b) => a.sets.size < b.sets.size ? a : b)\r\n  return [...sets].map(set => ({ ...filter, [slot]: { kind: \"required\", sets: new Set([set]) } }))\r\n}\r\nfunction splitByID(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): RequestFilter[] {\r\n  const arts = filterArts(_arts, filter)\r\n  const count = countBuilds(arts)\r\n\r\n  const candidates = allSlotKeys\r\n    .map(slot => ({ slot, length: arts.values[slot].length }))\r\n    .filter(x => x.length > 1)\r\n  const { slot, length } = candidates.reduce((a, b) => a.length < b.length ? a : b)\r\n\r\n  const numChunks = Math.ceil(count / limit)\r\n  const boundedNumChunks = Math.min(numChunks, length)\r\n  const chunk = Array(boundedNumChunks).fill(0).map(_ => new Set<string>())\r\n  arts.values[slot].forEach(({ id }, i) => chunk[i % boundedNumChunks].add(id))\r\n  return chunk.map(ids => ({ ...filter, [slot]: { kind: \"id\", ids } }))\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [251], function() { return __webpack_require__(18349); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"bb78a552\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/little-bro/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t349: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunklittle_bro\"] = self[\"webpackChunklittle_bro\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(251).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["objPathValue","obj","keys","Array","isArray","console","error","reduce","a","k","objectKeyMap","map","Object","fromEntries","i","objectKeyValueMap","items","t","objectMap","fn","entries","v","rangeGen","from","to","range","assertUnreachable","value","Error","constant","NaN","name","percent","info","operation","operands","type","Number","MAX_VALUE","Infinity","unit","min","values","intoOps","max","customRead","path","intoV","forEachNodes","formulas","topDown","bottomUp","visiting","Set","visited","forEach","traverse","formula","has","add","delete","mapFormulas","topDownMap","bottomUpMap","topDownMapped","Map","bottomUpMapped","check","get","arrayEqual","set","result","customMapFormula","context","contextMapping","internalMap","current","mapping","old","newFormula","b","undefined","length","every","allCommutativeMonoidOperations","x","Math","mul","allOperations","res","sum_frac","threshold","pass","fail","commutativeMonoidOperationSet","flatten","f","_formula","flattened","flatMap","dep","deduplicate","elementCounts","array","wrap","common","counts","next","factored","count","fill","candidatesByOperation","remainingCounts","filter","push","currentCounts","commonCounts","nextCounts","total","dependency","currentCount","commonCount","candidates","candidate","candidateCounts","candidateCount","clear","constantFold","topLevelData","shouldFold","origin","data","processed","nextContextMap","fold","c","foldStr","numericOperands","formulaOperands","folded","numericValue","isFinite","index","selected","table","first","find","op","smallest","operand","v1","v2","match","unmatch","list","accu","reset","nextMap","nextContext","allSlotKeys","nonTravelerCharacterKeys","travelerKeys","filterFeasiblePerm","artSetPerm","pruneAll","nodes","minimum","arts","numTop","exclusion","forced","should","deps","pruneNodeRange","reaffine","pruneOrder","pruneArtRange","some","newArts","newNodes","forceRename","affineNodes","topLevelAffine","visit","node","isAffine","dynKeys","_","nonConst","base","size","nextDynKey","affine","affineMap","reaffineArt","stat","dyn","slot","id","offsets","key","baseValue","progress","noRainbow","rainbow","noSwitchIn","noSwitchOut","includes","newList","art","other","greaterEqual","greater","baseRange","artRanges","computeArtRange","otherArtRanges","addArtRange","read","newRange","computeNodeRange","nodeRange","operandRanges","newOperands","op1","op2","j","ranges","reads","computeMinMax","sum","minMaxes","filterArts","filters","kind","ids","sets","countBuilds","_count","_artSets","artSets","available","s","exclusionToAllowed","populateShapes","indexOfShape","shape","check_free","remaining","rainbows","isolated","missing","rejected","required","allowedSet","allowedCounts","groupped","used","requiredRainbows","l","usableRainbows","sort","replacing","allowedRainbows","shapes","slice","noFilter","BNBSplitWorker","callback","optimizationTarget","maxBuilds","interim","firstUncalculated","this","linearUpperBound","maxConts","approxs","age","newThreshold","minCount","calculated","calculateFilter","getApproxFilter","reportInterim","splitOldFilter","skipped","splitted","cont","conts","c1","minCont","contCutoff","findIndex","lowArts","splice","highArts","high","approx","maxContribution","low","currentCont","partialSplit","pop","val","currentArts","oldCount","weight","dot","$c","flat","approximation","leadingConts","newValues","requiredConts","lc","newCount","command","buildValues","tested","failed","lin","weightedSum","entry","cents","getCent","nodeRanges","computeFullArtRange","minMax","slopePoint","slope","x0","y0","interpolate","x1","y1","upper","abs","lower","_map","ge","le","oppositeContext","PolyError","xs","xOp","cOp","loc","sqrt","vOp","tOp","pOp","fOp","threshOp","mulOp","prod","thresh","isFirstHalf","flattenedOperands","coeff","lins","factor","cent","splitWorker","computeWorker","cause","ComputeWorker","plotBase","builds","plotData","interimReport","refresh","opts","optimize","self","preArts","totalCount","oldMaxBuildCount","compute","initial","binding","slotCount","body","names","operandNames","arr","toString","join","Function","precompute","buffer","permute","m","build","artifactIds","plot","force","plots","scale","round","mergePlot","DefaultSplitWorker","_callback","_newThreshold","splitBySetOrID","addFilter","_arts","limit","numChunks","ceil","boundedNumChunks","chunk","splitByID","onmessage","splitID","computeID","postMessage","source","split","setPerm","perm","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","__webpack_exports__","O","deferred","chunkIds","priority","notFulfilled","fulfilled","r","d","definition","o","defineProperty","enumerable","e","chunkId","Promise","all","promises","u","miniCssF","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","then"],"sourceRoot":""}