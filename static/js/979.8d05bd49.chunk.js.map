{"version":3,"file":"static/js/979.8d05bd49.chunk.js","mappings":"mSAEA,GAAeA,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,0EACD,gBCFJ,GAAeF,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,+CACD,U,WCFJ,GAAeF,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,kFACD,U,iICCSC,EAAW,oB,cCCjB,SAASC,EAAWC,GACzB,IAAMC,EAAc,IAAIC,IAClBC,EAAYH,EAAQI,QACvBC,QAAO,kCAAeC,WAAW,gBACjCC,KAAI,WAAcC,GAAO,IAAD,eAAlBC,EAAkB,KAAdC,EAAc,KAEvB,OADAT,EAAYU,IAAIF,EAAID,GACbI,KAAKC,MAAMH,MAEtB,MAAO,CACLI,OAAQ,OACRC,UAAWC,EAAAA,EACXC,OAAQnB,EACRoB,QAAS,EACTC,WAAYnB,EAAQI,QACjBC,QAAO,kCAAeC,WAAW,YACjCC,KAAI,+BAAKG,GAAL,kBAAgBE,KAAKC,MAAMH,MAClCP,UAAAA,EACAiB,QAASpB,EAAQI,QACdC,QAAO,kCAAeC,WAAW,cACjCC,KAAI,+BAAKG,GAAL,kBAAgBE,KAAKC,MAAMH,MAClCW,OAAQrB,EAAQI,QACbC,QAAO,kCAAeC,WAAW,aACjCC,KAAI,+BAAEe,EAAF,KAAOZ,EAAP,oBAAC,UAAuBE,KAAKC,MAAMH,IAAnC,IAA2CY,IAAKA,EAAIC,MAAM,UAAU,QAC3EC,cAAexB,EAAQI,QACpBC,QAAO,kCAAeC,WAAW,oBACjCC,KAAI,YAAmB,IAAD,eAAhBe,EAAgB,KAAXZ,EAAW,KACfe,GAAoB,kBAAQb,KAAKC,MAAMH,IAAnB,IAA2BY,IAAKA,EAAIC,MAAM,iBAAiB,KAGrF,OADAE,EAAOC,OAASD,EAAOC,OAAOnB,KAAI,SAAAoB,GAAC,OAAIA,EAAEpB,KAAI,SAAAoB,GAAC,OAAI1B,EAAY2B,IAAID,GAAhB,mBAAiC1B,EAAY4B,IAAIF,IAAO,MAAItB,QAAO,SAAAsB,GAAC,OAAIA,QACnHF,M,gKC1BR,SAASK,EAAWC,EAAaC,GACtC,GACO,IADCD,EAAKb,QACH,OAKZ,SAAqBa,EAAaC,GAChC,IAAMP,EAiBR,SAAqBM,GACnB,IAAMd,EAASc,EAAKd,OAAQjB,EAAU,IAAIiC,EAAAA,GACpCR,EAAuB,CAAES,KAAM,OAAQlC,QAAAA,EAASiB,OAAAA,GAEtD,GAAIc,EAAK5B,UAAW,CAClBsB,EAAOtB,UF/BF,CAAEgC,MAAO,EAAGC,QAAS,GAAIC,IAAK,GAAIC,QAAS,GAAIC,UAAW,GAAIC,QAAS,IEgC5E,IAAMC,EAAUhB,EAAOtB,UACvBsC,EAAQN,MAAQJ,EAAK5B,UAAUuC,OAE/BX,EAAK5B,UAAUwC,SAAQ,SAACC,EAAGpC,IACVqC,EAAAA,EAAAA,IAAcD,GAExB5C,EAAQW,IAAR,mBAAwBH,GAAKoC,GADrBH,EAAQL,QAAQU,KAAKF,MAItC,GAAIb,EAAKX,QAAS,CAChBK,EAAOL,QF1CF,CAAEe,MAAO,EAAGC,QAAS,GAAIC,IAAK,GAAIC,QAAS,GAAIC,UAAW,GAAIC,QAAS,IE2C5E,IAAMC,EAAUhB,EAAOL,QACvBqB,EAAQN,MAAQJ,EAAKX,QAASsB,OAE9BX,EAAKX,QAAQuB,SAAQ,SAACI,EAAGvC,GACvB,IAAMwC,GAASC,EAAAA,EAAAA,IAAYF,GAG3B,OAFKC,EACAhD,EAAQW,IAAR,iBAAsBH,GAAKuC,GADnBN,EAAQL,QAAQU,KAAKC,GAE3BC,EAAS,CAACA,GAAU,MAG7BvB,EAAOL,QAAUqB,EAEnB,GAAIV,EAAKZ,WAAY,CACnBM,EAAON,WFxDF,CAAEgB,MAAO,EAAGC,QAAS,GAAIC,IAAK,GAAIC,QAAS,GAAIC,UAAW,GAAIC,QAAS,IEyD5E,IAAMC,EAAUhB,EAAON,WACvBsB,EAAQN,MAAQJ,EAAKZ,WAAWuB,OAEhCX,EAAKZ,WAAWwB,SAAQ,SAAAO,IACPC,EAAAA,EAAAA,IAAeD,IACjBT,EAAQL,QAAQU,KAAKI,GAI9BA,EAAE1B,gBACJ0B,EAAE1B,cAAcE,OAAS,GACzBwB,EAAE1B,cAAc4B,UAAY,GAG9BpD,EAAQW,IAAR,eAAoBuC,EAAE5B,KAAO4B,MAGjC,GAAIjC,IAAWnB,EAAU,CACvB,MAA6CiC,EAArChB,EAAR,EAAQA,UAAWM,EAAnB,EAAmBA,OAAQG,EAA3B,EAA2BA,cAC3B,GAAIT,EAAY,EAAG,OACnBf,EAAQqD,aAAatC,GACrBM,GAAUA,EAAOsB,SAAQ,SAAAW,GACvB,MAA0BA,EAAlBhC,EAAR,EAAQA,IAAQiC,GAAhB,YACKjC,GACLtB,EAAQW,IAAR,gBAAqBW,GAAOiC,MAE9B/B,GAAiBA,EAAcmB,SAAQ,SAAAa,GACrC,MAA0BA,EAAlBlC,EAAR,EAAQA,IAAQiC,GAAhB,YACKjC,GACLtB,EAAQW,IAAR,uBAA4BW,GAAOiC,WAMrCvD,EAAQqD,aAAa,GAEvB,OAAO5B,EArFQgC,CAAY1B,GAC3B,IAAKN,EAAQ,OASb,OANAiC,EAAAA,EAAAA,GAAQjC,EAAOzB,SCHV,SAAeyB,EAAsBkC,GAC1C,IAAmBC,EAAyEnC,EAApFtB,UAAgC0D,EAAoDpC,EAA7DL,QAAoC0C,EAAyBrC,EAArCN,WAAyBnB,EAAYyB,EAAZzB,QAsEhF,GAnEI4D,EAAa,WACf,IADc,EACRG,EAAO/D,EAAQI,QAAQC,QAAO,kCAAWC,WAAW,gBAAcC,KAAI,+BAAEe,EAAF,KAAO0C,EAAP,WAAc,CAAC1C,EAAKV,KAAKC,MAAMmD,OACrGC,EAAc,IAAIC,IAAIP,EAAKI,KAAKI,OAAO5D,KAAI,SAAAqC,GAAC,OAAIA,EAAEnC,OAClD2D,EAAeL,EAAKM,MAAK,SAAAzB,GAAC,OAAIA,EAAE,GAAG0B,YAH3B,UAKWP,GALX,IAKd,2BAA+B,CAAC,IAAD,uBAAnBzC,EAAmB,KAAdiD,EAAc,KAC7B,EAA+BZ,EAAKI,KAAKS,SAASD,GAA5CE,EAAN,EAAMA,WAAYC,EAAlB,EAAkBA,SAGlBD,EAAaA,EAAWpE,QAAO,SAAAuC,GAAC,OAAIqB,EAAYrC,IAAIgB,EAAEnC,OACtDiE,EAAWA,EAASrE,QAAO,SAAAuC,GAAC,OAAIqB,EAAYrC,IAAIgB,EAAEnC,OAGlD,IAAMkE,EAAkC,UAAGF,EAAW,UAAd,QAAoBC,EAAS,GACrE,GAAIC,EAAO,CAET,IAAK,IAAMrD,KADX2C,EAAYW,OAAOD,EAAMlE,IACPkE,EACVrD,KAAOiD,GAAgB,aAARjD,IACnBiD,EAAIjD,GAAOqD,EAAMrD,IAEhB8C,IACHG,EAAID,SAAWK,EAAML,UAGrBG,EAAW/B,OAAQkB,EAAWrB,UAAUO,KAAKyB,GACxCG,EAAShC,OAAQkB,EAAWtB,QAAQQ,KAAKyB,GAC7CX,EAAWvB,IAAIS,KAAKyB,GACzBvE,EAAQW,IAAIW,EAAKiD,IA3BL,8BA6BdX,EAAWpB,SAAU,OAAIyB,GAAa1D,KAAI,SAAAE,GAAE,OAAIkD,EAAKI,KAAKlC,IAAIpB,MA7B/C,GA+BfkD,EAAKI,KAAKI,OAAOxB,SAAQ,SAAChB,EAAGnB,GAAJ,OAAUR,EAAQW,IAAR,mBAAwBH,GAAKmB,MAG9DkC,EAAgB,WAClB,IADiB,EACXzC,EAAUpB,EAAQI,QAAQC,QAAO,kCAAWC,WAAW,cAAYC,KAAI,+BAAEe,EAAF,KAAO0C,EAAP,WAAc,CAAC1C,EAAKV,KAAKC,MAAMmD,OACtGC,EAAc,IAAIC,IAAIP,EAAKvC,QAAQ+C,OAAO5D,KAAI,SAAAwC,GAAC,OAAIA,EAAEtC,OACrD2D,EAAehD,EAAQiD,MAAK,SAAAQ,GAAM,OAAIA,EAAO,GAAGP,YAHrC,UAKWlD,GALX,IAKjB,2BAAqC,CAAC,IAAD,uBAAzBE,EAAyB,KAApBuD,EAAoB,KACnC,EAA+BlB,EAAKvC,QAAQ0D,QAAQD,GAA9CJ,EAAN,EAAMA,WAAYC,EAAlB,EAAkBA,SAGlBD,EAAaA,EAAWpE,QAAO,SAAA0C,GAAC,OAAIkB,EAAYrC,IAAImB,EAAEtC,OACtDiE,EAAWA,EAASrE,QAAO,SAAA0C,GAAC,OAAIkB,EAAYrC,IAAImB,EAAEtC,OAGlD,IAAMkE,EAAK,UAAIF,EAAW,UAAf,QAAqBC,EAAS,GACzC,GAAIC,EAAO,CAET,IAAK,IAAMrD,KADX2C,EAAYW,OAAOD,EAAMlE,IACPkE,EACVrD,KAAOuD,GAAmB,aAARvD,IACtBuD,EAAOvD,GAAOqD,EAAMrD,IAEnB8C,IACHS,EAAOP,SAAWK,EAAML,UAGxBG,EAAW/B,OAAQmB,EAActB,UAAUO,KAAK+B,GAC3CH,EAAShC,OAAQmB,EAAcvB,QAAQQ,KAAK+B,GAChDhB,EAAcxB,IAAIS,KAAK+B,GAC5B7E,EAAQW,IAAIW,EAAKuD,IA3BF,8BA6BjBhB,EAAcrB,SAAU,OAAIyB,GAAa1D,KAAI,SAAAE,GAAE,OAAIkD,EAAKvC,QAAQS,IAAIpB,MA7BlD,GA+BlBkD,EAAKvC,QAAQ+C,OAAOxB,SAAQ,SAAChB,EAAGnB,GAAJ,OAAUR,EAAQW,IAAR,iBAAsBH,GAAKmB,MAE/DmC,EAAa,CACf,IAAMiB,EAAiB/E,EAAQI,QAAQC,QAAO,kCAAWC,WAAW,YAAUC,KAAI,+BAAEe,EAAF,KAAOZ,EAAP,WAAkB,CAACY,EAAI0D,MAAM,GAAIpE,KAAKC,MAAMH,OACxHuE,EAAc,IAAIf,IAAIa,EAAexE,KAAI,sCACzC2E,EAAc,IAAIhB,IAAIP,EAAKwB,MAAMC,MAEvCtB,EAAYxB,QAAU,GACtBwB,EAAYzB,IAAM,GAElB,IARe,EAQTgD,EAAcN,EAAeV,MAAK,gDAAoBiB,KAAKjB,MAAK,SAAA1C,GAAC,OAAIA,QAR5D,UAUWoD,GAVX,IAUf,2BAA0C,CAAC,IAAD,qBAA9BzD,EAA8B,KAAzBiE,EAAyB,KAClCZ,EAAQhB,EAAKwB,MAAMtD,IAAIP,GAC7B,GAAIqD,EAAJ,CAOA,IAAK,IAAMrD,KANTwC,EAAYxB,QAAQQ,KAAKyC,GAMTZ,EACVrD,KAAOiE,IACXA,EAAKjE,GAAOqD,EAAMrD,IACjB+D,IACHE,EAAKD,KAAOX,EAAMW,MAEpBtF,EAAQW,IAAR,eAAoBW,GAAOiE,QAVzBzB,EAAYzB,IAAIS,KAAKyC,IAfV,8BA4BfzB,EAAYtB,SAAU,OAAI0C,GAAa7E,QAAO,gBAAEmF,GAAF,sBAASP,EAAYrD,IAAI4D,MAAIjF,KAAI,SAAAiF,GAAC,OAAI7B,EAAKwB,MAAMtD,IAAI2D,MACnG1B,EAAYvB,UAAY,QAExBoB,EAAKwB,MAAMC,KAAKzC,SAAQ,SAAA6C,GAAC,OAAIxF,EAAQW,IAAR,eAAoB6E,GAAK7B,EAAKwB,MAAMtD,IAAI2D,OAGvE,IAzGiE,EAyG3DC,EAAU,IAAIvB,IAAIlE,EAAQoF,MAzGiC,UA0G/CzB,EAAK3D,QAAQoF,MA1GkC,IA0GjE,2BACE,KADS9D,EACT,QAAKmE,EAAQ7D,IAAIN,IAASA,EAAIhB,WAAW,cAAiBgB,EAAIhB,WAAW,YAAegB,EAAIhB,WAAW,UACrGN,EAAQ0F,UAAUpE,EAAKqC,EAAK3D,QAAQ2F,UAAUrE,KA5Ge,+BDQjEsE,CAAMnE,EAAQO,GACPP,EAhBUoE,CAAY9D,EAAMC,GENrC,IACM8D,EAAoF,CACxF,EAqBF,SAAqBC,GACnB,IAAM5F,EAAmB,GAEzB,IAAK,IAAM6F,KAAYD,EACrB,GAAMC,KAAYC,GAAlB,CAD8B,gBAIGF,EAAQC,IAJX,IAI9B,2BAAoD,CAAC,IAA1CE,EAAyC,QAC1CC,EAA4CD,EAA5CC,QAASC,EAAmCF,EAAnCE,KAAMC,EAA6BH,EAA7BG,MAAOC,EAAsBJ,EAAtBI,SAAUC,EAAYL,EAAZK,QAClCC,EAAM,CACVC,OAAQC,GAAkBP,GAC1BQ,OAAQP,EACRC,MAAAA,EACAO,QAASX,GAAmBK,GAC5BO,YAAaC,GAAuBP,EAAQQ,MAC5CC,SAAUd,EAAmBe,WAAW1G,KAAI,YAAsB,IAAnBwG,EAAkB,EAAlBA,KAAMrG,EAAY,EAAZA,MAC7CY,EAAM4F,GAAsBH,GAClC,MAAO,CACLzF,IAAAA,EACAZ,MAAU,OAAHY,QAAG,IAAHA,GAAAA,EAAK6F,SAAS,KACnBC,KAAKC,MAAc,IAAR3G,GAAgB,GAC3BA,OAIRP,EAAU2C,KAAK0D,IAtBa,+BA0BhC,MAAO,CAAErG,UAAAA,KAKX,I,iBAAM8F,GAA4C,CAChD,OAAU,SACV,QAAW,QACX,KAAQ,QACR,IAAO,SACP,KAAQ,WAKJS,GAAkD,CACtD,WAAc,aACd,aAAgB,eAChB,UAAa,YACb,gBAAmB,kBACnB,qBAAwB,uBACxB,WAAc,aACd,aAAgB,uBAChB,aAAgB,gBAChB,QAAW,UACX,gBAAmB,mBACnB,aAAgB,eAChB,WAAc,aACd,WAAc,aACd,SAAY,WACZ,cAAiB,gBACjB,cAAiB,gBACjB,eAAkB,iBAClB,kBAAqB,oBACrB,uBAA0B,yBAC1B,iBAAoB,mBACpB,oBAAuB,sBACvB,sBAAyB,wBACzB,gBAAmB,kBACnB,QAAW,UACX,MAAS,WACT,eAAkB,iBAClB,gBAAmB,iBACnB,YAAe,cACf,gBAAmB,kBACnB,mBAAsB,qBACtB,eAAkB,kBAClB,uBAA0B,yBAC1B,UAAa,YACb,oBAAuB,sBACvB,sBAAyB,yBACzB,oBAAuB,sBACvB,cAAiB,gBACjB,mBAAsB,qBACtB,oBAAuB,uBAEnBI,GAAoD,CACxD,WAAc,QACd,WAAc,KACd,eAAkB,MAClB,aAAgB,MAChB,iBAAoB,OAEpB,iBAAoB,OACpB,SAAY,YAEZ,eAAkB,WAClB,iBAAoB,SACpB,SAAY,YACZ,aAAgB,eAChB,UAAa,YACb,WAAc,aACd,SAAY,YACZ,UAAa,aACb,UAAa,WACb,WAAc,cACd,cAAiB,iBAObI,GAAkD,CACtD,WAAc,KACd,eAAkB,MAClB,aAAgB,MAChB,iBAAoB,OACpB,aAAgB,MAChB,iBAAoB,OACpB,SAAY,YACZ,eAAkB,WAClB,iBAAoB,SACpB,SAAY,aCzIRI,IAAaC,EAAAA,EAAAA,IAAO,QAAPA,CAAgB,CACjCC,QAAS,SAGI,SAASC,GAAT,GAA+D,IAAD,EAAxCC,EAAwC,EAAxCA,UAC3BC,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBF,SACAG,GAAMC,EAAAA,EAAAA,GAAe,YAArBD,EACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOjG,EAAP,KAAakG,EAAb,KACA,GAAgCD,EAAAA,EAAAA,UAAS,IAAzC,eAAOE,EAAP,KAAiBC,EAAjB,KACA,GAAgCH,EAAAA,EAAAA,UAAS,IAAzC,eAAOI,EAAP,KAAiBC,EAAjB,KACMtC,GAAkCuC,EAAAA,EAAAA,UAAQ,WAC9C,GAAKvG,EAAL,CACA,IAAIiB,EACJ,IAEE,GAAsB,kBADtBA,EAASpC,KAAKC,MAAMkB,IAGlB,YADAsG,EAAY,8BAGd,MAAOE,GAEP,YADAF,EAAY,8BAId,GAAuB,MAAnBrF,EAAO9B,SAAmB,CAAC,SAAU,UAAW,OAAQ,MAAO,QAAQmD,MAAK,SAAAmB,GAAC,OAAIgD,OAAOpD,KAAKpC,GAAQyF,SAASjD,MAAK,CAErH,IAAMkD,ED7BL,SAAoB3C,EAAc/D,GAA8D,IAAD,IAC9Fd,EAAO,UAAG6E,EAAQ7E,eAAX,QANQ,IAOfyH,EAAS,UAAG7C,EAA+B5E,UAAlC,aAAG,OAAA4E,EAA0CC,GAE5D,GAAK4C,EAGL,OAAO7G,EAAW,CAChBhB,OAAQ,OACRG,OAAQ,cACRC,QAAS,EACTf,UAAWwI,EAAUxI,WACpB6B,GCiBkB4G,CAAW5F,EAAQ2E,GACpC,OAAKe,QACHL,EAAY,gCAIT,GAAsB,SAAlBrF,EAAOlC,OAAmB,CAEnC,IAAM4H,EAAW5G,EAAWkB,EAAQ2E,GACpC,OAAKe,QACHL,EAAY,8BAKhBA,EAAY,+BAEX,CAACtG,EAAM4F,IAOJkB,EAAQ,yCAAG,WAAMN,GAAN,8EACTO,EAAOP,EAAEQ,OAAOC,MAAM,GAC5BT,EAAEQ,OAAOrI,MAAQ,KACboI,GAAMX,EAAYW,EAAK/B,OACrBkC,EAAS,IAAIC,YACZC,OAAS,kBAAMlB,EAAQgB,EAAOxH,SACrCwH,EAAOG,WAAWN,GANH,2CAAH,sDAQd,OAAO,UAACO,EAAA,EAAD,YACL,SAACC,EAAA,EAAD,CAAaC,GAAI,CAAEC,GAAI,GAAvB,UAA4B,SAACC,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,iCACjD,UAACJ,EAAA,EAAD,YACE,UAACK,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAGN,GAAI,CAAEO,GAAI,GAAtC,WACE,SAACH,EAAA,GAAD,CAAMI,MAAI,EAAV,UACE,mBAAOC,QAAQ,mBAAf,WACE,SAAC1C,GAAD,CAAY2C,OAAO,QAAQxJ,GAAG,mBAAmByB,KAAK,OAAOgI,SAAUrB,KACvE,SAACsB,EAAA,EAAD,CAAQC,UAAU,OAAOC,WAAW,SAACC,EAAD,IAApC,0BAGJ,SAACX,EAAA,GAAD,CAAMI,MAAI,EAACQ,SAAU,EAArB,UACE,SAACC,EAAA,EAAD,CAAUjB,GAAI,CAAEkB,GAAI,EAAGjB,GAAI,GAA3B,UACE,SAACkB,EAAA,EAAD,UAAaxC,GAAW,6BAAM,SAAC,IAAD,CAAiByC,KAAMC,EAAAA,MAA7B,IAA6C1C,MAAmB,6BAAM,SAAC,IAAD,CAAiByC,KAAME,EAAAA,MAA7B,KAA6C,SAACpB,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,0CAIhK,SAACgB,EAAA,EAAD,CAAYI,cAAY,EAACC,QAAQ,UAAjC,UAA2C,SAACtB,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,qCAChE,SAAC,IAAD,CAAKU,UAAU,WAAWb,GAAI,CAAEyB,MAAO,OAAQC,WAAY,YAAaC,UAAW,OAAQpB,GAAI,EAAGqB,OAAQ,YAAczK,MAAOqB,EAAMmI,SAAU,SAAA3B,GAAC,OAAIN,EAAQM,EAAEQ,OAAOrI,UAfvK,UAgBG0K,GAAWrF,UAhBd,QAgB0B+B,EAAEM,MAE3BiD,GAAatF,GAjCF,WACZkC,EAAQ,IACRE,EAAY,IACZT,UAkCJ,SAAS0D,GAAWrJ,GAClB,GACO,UADP,OAAQA,QAAR,IAAQA,OAAR,EAAQA,EAAMG,MACC,OAAO,SAACoJ,GAAD,CAAgBvJ,KAAMA,IAG9C,SAASsJ,GAAatJ,EAA8BwJ,GAClD,GACO,UADP,OAAQxJ,QAAR,IAAQA,OAAR,EAAQA,EAAMG,MACC,OAAO,SAACsJ,GAAD,CAAgBzJ,KAAMA,EAAMwJ,MAAOA,IAI3D,SAASD,GAAT,GAA6G,IAAD,IAAlFvJ,KAAQd,EAA0E,EAA1EA,OAAQd,EAAkE,EAAlEA,UAAWgB,EAAuD,EAAvDA,WAAYC,EAA2C,EAA3CA,QACvD0G,GADkG,EAAhC/F,MAC5DgG,EAAAA,EAAAA,GAAe,YAArBD,GACR,OAAO,UAAC0C,EAAA,EAAD,YACL,SAAClB,EAAA,EAAD,CAAaC,GAAI,CAAEC,GAAI,GAAvB,UACE,UAACkB,EAAA,EAAD,YACE,SAACjB,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,yBAAwB,kCAAUzI,WAG3D,SAACwK,EAAA,EAAD,KACA,SAACnC,EAAA,EAAD,WACE,UAACK,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,SAACF,EAAA,GAAD,CAAMI,MAAI,EAACQ,SAAU,EAArB,UACE,SAACmB,GAAD,CAAajK,OAAQtB,EAAW+B,KAAK,YAEvC,SAACyH,EAAA,GAAD,CAAMI,MAAI,EAACQ,SAAU,EAArB,UACE,SAACmB,GAAD,CAAajK,OAAQL,EAASc,KAAK,eAErC,SAACyH,EAAA,GAAD,CAAMI,MAAI,EAACQ,SAAU,EAArB,UACE,SAACmB,GAAD,CAAajK,OAAQN,EAAYe,KAAK,oBAMhD,SAASwJ,GAAT,GAA6F,IAAD,IAArEjK,EAAqE,EAArEA,OAAQS,EAA6D,EAA7DA,KACrB4F,GAAMC,EAAAA,EAAAA,GAAe,YAArBD,EACR,OAAKrG,GACE,UAAC4H,EAAA,EAAD,YACL,SAACC,EAAA,EAAD,CAAaC,GAAI,CAAEC,GAAI,GAAvB,UACE,UAACkB,EAAA,EAAD,YACE,SAACjB,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAO,gBAAWxH,KADjC,cAC6CT,EAAOU,aADpD,QAC6D,QAG/D,SAACsJ,EAAA,EAAD,KACA,UAACnC,EAAA,EAAD,YACE,UAACoB,EAAA,EAAD,YAAY,SAACjB,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,cAAjC,KAAgD,4BAASjI,EAAOY,IAAIK,SAApE,MAAwFjB,EAAOU,UAC/F,UAACuI,EAAA,EAAD,YAAY,SAACjB,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,kBAAjC,KAAoD,4BAASjI,EAAOa,QAAQI,SAA5E,MAAgGjB,EAAOU,UACvG,UAACuI,EAAA,EAAD,YAAY,SAACjB,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,oBAAjC,KAAsD,4BAASjI,EAAOc,UAAUG,SAAhF,MAAoGjB,EAAOU,UAC3G,UAACuI,EAAA,EAAD,CAAYiB,MAAM,eAAlB,WAAiC,SAAClC,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,kBAAtD,KAAyE,4BAASjI,EAAOe,QAAQE,cAC/F,UAACjB,EAAOW,eAAR,QAAC,EAAgBM,UAAU,4BAC3B,UAACgI,EAAA,EAAD,CAAYiB,MAAM,aAAlB,WAA+B,SAAClC,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,kBAApD,KAAuE,4BAASjI,EAAOW,QAAQM,SAA/F,MAAmHjB,EAAOU,UAC1H,SAAC,IAAD,CAAKiI,UAAU,WAAWb,GAAI,CAAEyB,MAAO,OAAQC,WAAY,YAAaC,UAAW,OAAQC,OAAQ,YAAczK,MAAOE,KAAKgL,UAAUnK,EAAOW,aAASyJ,EAAW,GAAIC,UAAQ,aAfhK,KAqBtB,SAASN,GAAT,GAAwG,IAAD,MAArExL,EAAqE,EAA7E+B,KAAQ/B,QAAW+B,EAA0D,EAA1DA,KAAMwJ,EAAoD,EAApDA,MACjD,GAAkC3D,EAAAA,EAAAA,YAAWC,EAAAA,GAArCF,EAAR,EAAQA,SAAUoE,EAAlB,EAAkBA,YACVjE,GAAMC,EAAAA,EAAAA,GAAe,YAArBD,EACFkE,GAAY,UAAAjK,EAAKZ,kBAAL,eAAiBgB,SAAjB,UAA0BJ,EAAK5B,iBAA/B,aAA0B,EAAgBgC,SAA1C,UAAmDJ,EAAKX,eAAxD,aAAmD,EAAce,OAQnF,OAAO,iCAAE,SAACsJ,EAAA,EAAD,KAAW,SAACnC,EAAA,EAAD,CAAaC,GAAI,CAAEC,GAAI,GAAvB,UAClB,SAACW,EAAA,EAAD,CAAQwB,MAAOK,EAAY,UAAY,QAASF,UAAWE,EAAWC,QARtD,WAChBtE,EAASuE,QACTvE,EAAS3H,QAAQmM,SAASnM,GAC1B+L,EAAY,IAAIK,EAAAA,EAAgBzE,EAAS3H,UACzCuL,KAI0FlB,WAAW,SAAC,IAAD,CAAiBM,KAAM0B,EAAAA,MAA5H,UAA8I,SAAC5C,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,+CClJxJ,SAAS4C,KACtB,IAAMC,GAAqB3E,EAAAA,EAAAA,YAAWC,EAAAA,GAChC2E,EAAUC,SAASF,EAAmB5E,SAAS3H,QAAQ2F,UAAU,YAAc,KAC7EmC,GAAMC,EAAAA,EAAAA,GAAe,CAAC,aAAtBD,EAER,OAAO,UAACuB,EAAA,EAAD,YACL,SAACC,EAAA,EAAD,CAAaC,GAAI,CAAEC,GAAI,GAAvB,UACE,SAACkB,EAAA,EAAD,CAAYK,QAAQ,YAApB,SACGjD,EADH,6CAIF,SAAC2D,EAAA,EAAD,KACA,SAACnC,EAAA,EAAD,CAAaC,GAAI,CAAE/B,QAAS,OAAQkF,cAAe,SAAUC,IAAK,GAAlE,UACE,SAAChD,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAG+C,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAlD,UACGC,EAAAA,EAAAA,IAAM,EAAG,GAAGxM,KAAI,SAAAC,GAAC,OAAI,SAACmJ,EAAA,GAAD,CAAcI,MAAI,EAAC8C,GAAI,EAAvB,SACnBrM,IAAMgM,GAAU,SAACQ,GAAD,CAAUC,MAAOzM,KAChC,SAAC0M,GAAD,CAAsBD,MAAOzM,EAA7B,UACE,SAACwM,GAAD,CAAUC,MAAOzM,EAAG+L,mBAAoBA,OAHb/L,aAUzC,SAAS0M,GAAT,GAAoD,IAApBD,EAAmB,EAAnBA,MAAOE,EAAY,EAAZA,SACrC,GAAgCnF,EAAAA,EAAAA,WAAS,WAAO,IAAD,EACvCoF,EAAM,wBAAoBH,GAC1BjN,EAAU,IAAIqN,EAAAA,GAAaD,GAC3BE,EAAQ1M,KAAKC,MAAL,UAAW0M,aAAaC,QAAQJ,UAAhC,gCAA4DH,EAA5D,QACdjN,EAAQyN,WAAWH,GAGnBtN,EAAQ0N,eAAc,SAAAlI,GAAC,OAAIA,EAAElF,WAAW,qBACxC,IAAMqN,EAAK,IAAIvB,EAAAA,EAAgBpM,GAE/B,OADAA,EAAQ4N,cACDD,KAVT,eAAOhG,EAAP,KAAiBoE,EAAjB,KAaA,OAAO,SAAC8B,EAAA,WAAD,CAA0BnN,MAAO,CAAEiH,SAAAA,EAAUoE,YAAAA,GAA7C,SACJoB,IAIL,SAASH,GAAT,GAA8G,IAA1FC,EAAyF,EAAzFA,MAAOV,EAAkF,EAAlFA,mBACzB,GAAkC3E,EAAAA,EAAAA,YAAWC,EAAAA,GAArCF,EAAR,EAAQA,SAAUoE,EAAlB,EAAkBA,YAClB,GAAwC+B,EAAAA,EAAAA,GAAW,UAAUC,EAAAA,EAAAA,GAAWd,IAAxE,sBAASlG,EAAT,EAASA,KAAMiH,EAAf,EAAeA,SAAYC,EAA3B,KACMC,GAAW3B,EACjB,GAAsC4B,EAAAA,EAAAA,KAAtC,eAAOC,EAAP,KAAmBC,EAAnB,KAA2BC,EAA3B,KACQxG,GAAMC,EAAAA,EAAAA,GAAe,CAAC,aAAtBD,EACFyG,EAAU5G,EAASxC,MAAMC,KAAK1C,OAC9B8L,EAAS7G,EAAS5D,KAAKI,OAAOzB,OAC9B+L,EAAY9G,EAASvG,QAAQ+C,OAAOzB,OACpCgM,EAAUC,QAAQJ,GAAWC,GAAUC,GACvCG,GAAkBC,EAAAA,EAAAA,cACtB,kBAAMC,UAAUC,UAAUC,UAAUpO,KAAKgL,UAAU7L,EAAW4H,EAAS3H,WACpEiP,MAAK,kBAAMC,MAAM,oCACjBC,MAAMC,QAAQC,SACjB,CAAC1H,IAEGkB,IAAWgG,EAAAA,EAAAA,cAAY,YAC3BP,IACKJ,IACavG,EAAS3H,QACjB4N,gBAET,CAACU,EAASJ,EAASvG,EAAS3H,UAEzBsP,IAAWT,EAAAA,EAAAA,cAAY,WAC3B,GAAKU,OAAOC,QAAP,2CAAmDzI,EAAnD,OACL,GAAImH,EACFvG,EAASuE,QACTH,EAAY,IAAIK,EAAAA,EAAgBzE,EAAS3H,cACpC,CACL,IACMoN,EADUzF,EAAS3H,QACFyP,aACjBC,EAAe,IAAIrC,EAAAA,GAAaD,GACtCsC,EAAajC,WAAW,IACxB1B,EAAY,IAAIK,EAAAA,EAAgBsD,IAChCnC,aAAaoC,WAAWvC,MAEzB,CAACzF,EAAUuG,EAASnH,EAAMgF,IAEvB6D,IAAWf,EAAAA,EAAAA,cAAY,WAC3B,IACMgB,GADO,IAAIC,MACIC,cAAcxO,MAAM,KAAK,GAAGyO,QAAQ,IAAK,KAAKC,WAAW,IAAK,KAC7EC,EAAUtP,KAAKgL,UAAU7L,EAAW4H,EAAS3H,UAC7CkI,EAAQ,UAAMnB,EAAKoJ,OAAOF,WAAW,IAAK,KAAlC,YAA0CJ,EAA1C,SAERjN,EAAIwN,SAASC,cAAc,KACjCzN,EAAEgN,SAAW1H,EACbtF,EAAE0N,KAAF,eAHoB,iCAGpB,YAAgCC,mBAAmBL,IACnDtN,EAAEmG,OAAS,SACXqH,SAASI,KAAKC,YAAY7N,GAC1BA,EAAE8N,QACFN,SAASI,KAAKG,YAAY/N,KACzB,CAAC+E,EAAUZ,IAER6J,IAAS/B,EAAAA,EAAAA,cAAY,WACzB,GAAKtC,EAAL,CAGA,IAAMC,EAAUC,SAASF,EAAmB5E,SAAS3H,QAAQ2F,UAAU,YAAc,KAC/EkL,EAAc,IAAIxD,EAAAA,GAAJ,wBAAkCb,GAAWD,EAAmB5E,SAAS3H,SAC7F6Q,EAAYnD,eAAc,SAAAlI,GAAC,OAAIA,EAAElF,WAAW,qBAC5CuQ,EAAYjD,cAGZ,IACMR,EADUzF,EAAS3H,QACFyP,aACvBlC,aAAaoC,WAAWvC,GAGxBb,EAAmB5E,SAASuE,QAC5BK,EAAmB5E,SAAS3H,QAAQmM,SAASxE,EAAS3H,SACtDuM,EAAmB5E,SAAS3H,QAAQW,IAAI,UAAWsM,GACnDV,EAAmBR,YAAY,IAAIK,EAAAA,EAAgBG,EAAmB5E,SAAS3H,aAE9E,CAACuM,EAAoB5E,EAAUsF,IAElC,IAAgCjF,EAAAA,EAAAA,UAASjB,GAAzC,iBAAO+J,GAAP,MAAiBC,GAAjB,OACAC,EAAAA,EAAAA,YAAU,kBAAMD,GAAYhK,KAAO,CAACA,IAEpC,IAAMkK,IAASpC,EAAAA,EAAAA,cAAY,WACzBZ,EAAU,CAAElH,KAAM+J,KACb5C,GAAUvG,EAAS3H,QAAyB4N,gBAChD,CAACK,EAAW6C,GAAUnJ,EAAUuG,IAC7BgD,IAAYrC,EAAAA,EAAAA,cAAY,SAAAtG,GAAC,MAAc,UAAVA,EAAEjH,KAAmB2P,OAAU,CAACA,KAEnE,OAAO,UAACzG,EAAA,EAAD,CAAUjB,GAAI,CAAE4H,OAAQ,OAAQC,UAAWlD,EAAU,mCAAgCrC,GAArF,WACL,UAACvC,EAAA,EAAD,CAAaC,GAAI,CAAE/B,QAAS,OAAQmF,IAAK,EAAG0E,eAAgB,iBAA5D,WACE,SAAE,KAAF,CAAkB3Q,MAAOoQ,GAAUvH,GAAI,CAAE+H,aAAc,EAAG7G,GAAI,EAAGF,SAAU,GAAKL,SAAU,SAAC3B,GAAD,OAAOwI,GAAYxI,EAAEQ,OAAOrI,QAAQuQ,OAAQA,GAAQM,UAAWL,MACvJhD,IAAW,SAAC/D,EAAA,EAAD,CAAQE,WAAW,SAACmH,EAAD,IAAkBvF,QAAS2E,GAAQjF,MAAM,UAA5D,SAAuE7D,EAAvE,iDACb,SAAC2J,EAAA,EAAD,CAAM9F,MAAOuC,EAAU,UAAY,YAAawD,MAAOxD,EAAUpG,EAAH,sDAAkCA,EAAlC,oDAA2DmF,SAE3H,SAACxB,EAAA,EAAD,KACA,SAACnC,EAAA,EAAD,WACE,UAACqI,EAAA,EAAD,CAAKnK,QAAQ,OAAOmF,IAAK,EAAzB,WACE,UAACgF,EAAA,EAAD,CAAKpH,SAAU,EAAf,WACE,UAACG,EAAA,EAAD,CAAYkH,QAAM,EAAlB,WAAmB,SAACnI,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,gBAAxC,KAAyD,4BAAS6E,QAClE,UAAC7D,EAAA,EAAD,CAAYkH,QAAM,EAAlB,WAAmB,SAACnI,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,eAAxC,KAAwD,4BAAS8E,QACjE,UAAC9D,EAAA,EAAD,CAAYkH,QAAM,EAAlB,WAAmB,SAACnI,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,kBAAxC,KAA2D,4BAAS+E,SACjET,IAAY,SAACtD,EAAA,EAAD,CAAYkH,QAAM,EAAlB,UAAmB,4BAAU,IAAI9B,KAAK9B,GAAU6D,yBAEjE,SAACF,EAAA,EAAD,WACE,UAAChI,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAG+C,QAAS,CAAEC,GAAI,GAA3C,WACE,SAAClD,EAAA,GAAD,CAAMI,MAAI,EAAC8C,GAAI,EAAf,UACE,SAAC1C,EAAA,EAAD,CAAQ2H,WAAS,EAAChG,UAAW4C,EAAS/C,MAAM,OAAOM,QAAS2C,EAAiBvE,WAAW,SAAC0H,EAAA,EAAD,CAAoBpH,KAAMqH,EAAAA,MAAlH,UACE,SAACvI,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,kCAGzB,UAACC,EAAA,GAAD,CAAMI,MAAI,EAAC8C,GAAI,EAAf,WACE,SAACoF,EAAA,EAAD,CAAcC,KAAM9D,EAAYE,QAASA,EAAzC,UACE,SAAC7G,GAAD,CAAYC,UAAWmB,QAEzB,SAACsB,EAAA,EAAD,CAAQ2H,WAAS,EAAC1H,UAAU,OAAOuB,MAAM,OAAOtB,WAAW,SAACC,EAAD,IAAY2B,QAASoC,EAAhF,SACGvG,EADH,wDAIF,SAAC6B,EAAA,GAAD,CAAMI,MAAI,EAAC8C,GAAI,EAAf,UACE,SAAC1C,EAAA,EAAD,CAAQ2H,WAAS,EAAChG,UAAW4C,EAASzC,QAAS2D,GAAUvF,WAAW,SAAC8H,EAAA,EAAD,IAApE,SACGrK,EADH,yDAIF,SAAC6B,EAAA,GAAD,CAAMI,MAAI,EAAC8C,GAAI,EAAf,UACE,SAAC1C,EAAA,EAAD,CAAQ2H,WAAS,EAAChG,UAAW4C,EAAS/C,MAAM,QAAQM,QAASqD,GAAUjF,WAAW,SAAC+H,EAAD,IAAlF,SACGtK,EADH,mE,oDCjLC,SAASuK,KACtB,IAAQvK,GAAMC,EAAAA,EAAAA,KAAND,EACR,OAAO,UAACuB,EAAA,EAAD,YACL,UAACC,EAAA,EAAD,CAAaC,GAAI,CAAEC,GAAI,GAAvB,UACG1B,EAAE,wCADL,KAC8C,SAACwK,GAAA,EAAD,CAAS3G,MAAM,UAAf,SAA0B7D,EAAE,8BAE1E,SAAC2D,EAAA,EAAD,KACA,SAACnC,EAAA,EAAD,WACE,SAACiJ,GAAD,SAKN,IAAMC,GAAkB,CACtB,IAAO,kCACP,IAAO,kCACP,GAAM,UACN,GAAM,UACN,GAAM,aACN,GAAM,cACN,GAAM,mBACN,GAAM,qBACN,GAAM,qBACN,GAAM,eACN,GAAM,sEACN,GAAM,6CACN,GAAM,wBAED,SAASD,KACd,OAAoBxK,EAAAA,EAAAA,GAAe,CAAC,KAAM,aAAlCD,EAAR,EAAQA,EAAG2K,EAAX,EAAWA,KACLC,EAAgB,SAACC,GAAD,OAAU,kBAAMF,EAAKG,eAAeD,KACpDE,EAAcJ,EAAKK,UAAU,GACnC,OAAO,SAACC,GAAA,EAAD,CAAgBjB,WAAS,EAACkB,MAAOlL,EAAE,uCAAwC,CAAEmL,SAAUnL,EAAE,aAAD,OAAc+K,MAAtG,SACJK,GAAAA,EAAAA,KAAqB,SAACP,GAAD,OAAU,UAACQ,GAAA,EAAD,CAAqBC,SAAUP,IAAgBF,EAAM7G,SAAU+G,IAAgBF,EAAM1G,QAASyG,EAAcC,GAA5G,WAC9B,SAAClJ,EAAA,EAAD,CAAOC,QAAO,oBAAeiJ,KAC5BA,IAASE,EAAT,YAA4BL,GAAgBG,GAA5C,KAAuD,KAFXA,Q,uCCjCpC,SAASU,KACtB,OAAwCvF,EAAAA,EAAAA,GAAW,iBAAkBwF,GAAAA,GAArE,eAASC,EAAT,KAASA,OAAUC,EAAnB,KAEA,OAAO,SAACnK,EAAA,EAAD,WACL,UAACC,EAAA,EAAD,YACE,SAACoB,EAAA,EAAD,CAAYI,cAAY,EAACa,MAAM,eAA/B,2GACA,SAACxB,EAAA,EAAD,CAAQ2H,WAAS,EACf7F,QAAS,kBAAMuH,EAAkB,CAAED,QAASA,KAC5C5H,MAAO4H,EAAS,UAAY,UAC5BlJ,UAAWkJ,GAAS,SAACE,GAAA,EAAD,KAAe,SAACC,GAAA,EAAD,IAHrC,sCCJS,SAASC,KACtB,IAAQ7L,GAAMC,EAAAA,EAAAA,GAAe,CAAC,aAAtBD,EAGR,OAFA8L,EAAAA,GAAAA,KAAa,CAAEC,QAAS,WAAYC,KAAM,cAEnC,UAACtJ,EAAA,EAAD,CAAUjB,GAAI,CAAEwK,GAAI,GAApB,WACL,SAACzK,EAAA,EAAD,CAAaC,GAAI,CAAEC,GAAI,GAAvB,UACE,SAACkB,EAAA,EAAD,CAAYK,QAAQ,YAApB,UACE,SAACtB,EAAA,EAAD,CAAO3B,EAAGA,EAAG4B,QAAQ,eAGzB,SAAC+B,EAAA,EAAD,KACA,UAACnC,EAAA,EAAD,CAAaC,GAAI,CAAE/B,QAAS,OAAQkF,cAAe,SAAUC,IAAK,GAAlE,WACE,SAAC0F,GAAD,KACA,SAAC/F,GAAD,KACA,SAAC+G,GAAD,Y,uGCpBC,SAASC,IACd,MAAO,CAAEC,QAAQ,GAGZ,SAASS,IACd,MAAO,CACLC,UAAS,OAAKC,EAAAA,GACdC,UAAU,K,gDCPd,KAAexU,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,uIACD,a,+CCFJ,KAAeF,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,+FACD,yB,gDCFJ,KAAeF,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,8CACD","sources":["../node_modules/@mui/icons-material/esm/ImportExport.js","../node_modules/@mui/icons-material/esm/Upload.js","../node_modules/@mui/icons-material/esm/Delete.js","Database/exim.ts","Database/exports/good.ts","Database/imports/good.ts","Database/imports/merge.ts","Database/imports/mona.ts","PageSettings/UploadCard.tsx","PageSettings/DatabaseCard.tsx","PageSettings/LanguageCard.tsx","PageSettings/TCToggleCard.tsx","PageSettings/index.tsx","stateInit.tsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Download.js"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 3 5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\"\n}), 'ImportExport');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Upload');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import type { IArtifact } from \"../Types/artifact\"\r\nimport type { ICharacter } from \"../Types/character\"\r\nimport type { IWeapon } from \"../Types/weapon\"\r\nimport type { DBStorage } from \"./DBStorage\"\r\n\r\nexport const GOSource = \"Genshin Optimizer\" as const\r\n\r\nexport function newCounter<T>(): ImportResultCounter<T> {\r\n  return { total: 0, invalid: [], new: [], updated: [], unchanged: [], removed: [], }\r\n}\r\n\r\nexport type IGOOD = {\r\n  format: \"GOOD\"\r\n  source: string\r\n  version: 1\r\n  characters?: any[]\r\n  artifacts?: any[]\r\n  weapons?: any[]\r\n}\r\nexport type IGO = {\r\n  dbVersion: number\r\n  source: typeof GOSource\r\n  states?: object[]\r\n  buildSettings?: object[]\r\n}\r\n\r\nexport type ImportResultCounter<T> = {\r\n  total: number, // total # in file\r\n  new: T[],\r\n  updated: T[], // Use new object\r\n  unchanged: T[], // Use new object\r\n  removed: T[],\r\n  invalid: T[],\r\n}\r\nexport type ImportResult = {\r\n  type: \"GOOD\",\r\n  storage: DBStorage,\r\n  source: string,\r\n  artifacts?: ImportResultCounter<IArtifact>,\r\n  weapons?: ImportResultCounter<IWeapon>,\r\n  characters?: ImportResultCounter<ICharacter>,\r\n}\r\n","\r\nimport { DBStorage } from \"../DBStorage\";\r\nimport { BuildSetting } from \"../Data/BuildsettingData\";\r\nimport { GOSource, IGO, IGOOD } from \"../exim\";\r\nimport { currentDBVersion } from \"../imports/migrate\";\r\n\r\nexport function exportGOOD(storage: DBStorage): IGOOD & IGO {\r\n  const artifactIDs = new Map<string, number>()\r\n  const artifacts = storage.entries\r\n    .filter(([key]) => key.startsWith(\"artifact_\"))\r\n    .map(([id, value], i) => {\r\n      artifactIDs.set(id, i)\r\n      return JSON.parse(value)\r\n    })\r\n  return {\r\n    format: \"GOOD\",\r\n    dbVersion: currentDBVersion,\r\n    source: GOSource,\r\n    version: 1,\r\n    characters: storage.entries\r\n      .filter(([key]) => key.startsWith(\"char_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    artifacts,\r\n    weapons: storage.entries\r\n      .filter(([key]) => key.startsWith(\"weapon_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    states: storage.entries\r\n      .filter(([key]) => key.startsWith(\"state_\"))\r\n      .map(([key, value]) => ({ ...JSON.parse(value), key: key.split(\"state_\")[1] })),\r\n    buildSettings: storage.entries\r\n      .filter(([key]) => key.startsWith(\"buildSetting_\"))\r\n      .map(([key, value]) => {\r\n        const result: BuildSetting = { ...JSON.parse(value), key: key.split(\"buildSetting_\")[1] }\r\n        // Make sure the artifact ids match the new ids after import\r\n        result.builds = result.builds.map(x => x.map(x => artifactIDs.has(x) ? `artifact_${artifactIDs.get(x)}` : \"\").filter(x => x))\r\n        return result\r\n      }),\r\n  }\r\n}\r\n","import { ArtCharDatabase } from \"../Database\";\r\nimport { SandboxStorage } from \"../DBStorage\";\r\nimport { GOSource, IGO, IGOOD, ImportResult, newCounter } from \"../exim\";\r\nimport { merge } from \"./merge\";\r\nimport { migrate } from \"./migrate\";\r\nimport { parseArtifact, parseCharacter, parseWeapon } from \"./parse\";\r\n\r\n// MIGRATION STEP: Always keep parsing in sync with GOODv1 format\r\n\r\nexport function importGOOD(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  switch (data.version) {\r\n    case 1: return importGOOD1(data, oldDatabase)\r\n  }\r\n}\r\n\r\n// TODO: Remove this function or move it somewhere else\r\nfunction importGOOD1(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  const result = parseImport(data)\r\n  if (!result) return\r\n  // TODO\r\n  // Handle the error thrown when the `storage` uses unsupported DB version.\r\n  migrate(result.storage)\r\n  // TODO\r\n  // The `merging` part can be separated into another step in DB migration.\r\n  // We can let the user select finer grain migration options, such as\r\n  // weapon-only migration.\r\n  merge(result, oldDatabase)\r\n  return result\r\n}\r\n\r\n/**\r\n * Parse GOODv1 data format into a parsed data of the version specified in `data`.\r\n * If the DB version is not specified, the default version is used.\r\n */\r\nfunction parseImport(data: IGOOD): ImportResult | undefined {\r\n  const source = data.source, storage = new SandboxStorage()\r\n  const result: ImportResult = { type: \"GOOD\", storage, source }\r\n\r\n  if (data.artifacts) {\r\n    result.artifacts = newCounter()\r\n    const counter = result.artifacts\r\n    counter.total = data.artifacts.length\r\n\r\n    data.artifacts.forEach((a, i) => {\r\n      const parsed = parseArtifact(a)\r\n      if (!parsed) counter.invalid.push(a)\r\n      else storage.set(`artifact_${i}`, a)\r\n    })\r\n  }\r\n  if (data.weapons) {\r\n    result.weapons = newCounter()\r\n    const counter = result.weapons\r\n    counter.total = data.weapons!.length\r\n\r\n    data.weapons.forEach((w, i) => {\r\n      const parsed = parseWeapon(w)\r\n      if (!parsed) counter.invalid.push(w)\r\n      else storage.set(`weapon_${i}`, w)\r\n      return parsed ? [parsed] : []\r\n    })\r\n\r\n    result.weapons = counter\r\n  }\r\n  if (data.characters) {\r\n    result.characters = newCounter()\r\n    const counter = result.characters\r\n    counter.total = data.characters.length\r\n\r\n    data.characters.forEach(c => {\r\n      const parsed = parseCharacter(c)\r\n      if (!parsed) counter.invalid.push(c)\r\n\r\n      // We invalidate build results here because we need to do\r\n      // it regardless of whether the file has character/art data.\r\n      if (c.buildSettings) {\r\n        c.buildSettings.builds = []\r\n        c.buildSettings.buildDate = 0\r\n      }\r\n\r\n      storage.set(`char_${c.key}`, c);\r\n    })\r\n  }\r\n  if (source === GOSource) {\r\n    const { dbVersion, states, buildSettings } = data as unknown as IGO\r\n    if (dbVersion < 8) return // Something doesn't look right here\r\n    storage.setDBVersion(dbVersion)\r\n    states && states.forEach(s => {\r\n      const { key, ...state } = s as any\r\n      if (!key) return\r\n      storage.set(`state_${key}`, state)\r\n    });\r\n    buildSettings && buildSettings.forEach(b => {\r\n      const { key, ...state } = b as any\r\n      if (!key) return\r\n      storage.set(`buildSetting_${key}`, state)\r\n    })\r\n  } else {\r\n    // DO NOT CHANGE THE DB VERSION\r\n    // Update this ONLY when it has been verified that base GOODv1 is a valid GO\r\n    // of that particular version. Any missing/extra keys could crash the system.\r\n    storage.setDBVersion(8)\r\n  }\r\n  return result\r\n}\r\n","import { IArtifact, ICachedArtifact } from \"../../Types/artifact\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { ICachedWeapon, IWeapon } from \"../../Types/weapon\";\r\nimport { ArtCharDatabase } from \"../Database\";\r\nimport { ImportResult } from \"../exim\";\r\n\r\n/**\r\n * Merge the parsed storage (`result`) of the current DB version with existing\r\n * database (`base`) to create a new (parsed) storage. If the data for art/char/weapon\r\n * exists in `result`, it will be merged with `base` on best-effort basis. The\r\n * information in `result` takes precedence when the data exists in both locations.\r\n *\r\n * `result` must be using the latest DB format, i.e., it must already be `migrate`d.\r\n *\r\n * TODO:\r\n * This can be easily extended to include options whether to merge\r\n * each category (art/char/weapon) or to force the `result` data or `base` data.\r\n */\r\nexport function merge(result: ImportResult, base: ArtCharDatabase) {\r\n  const { artifacts: artCounter, weapons: weaponCounter, characters: charCounter, storage } = result\r\n\r\n  // Match artifacts for counter, metadata, and locations\r\n  if (artCounter) {\r\n    const arts = storage.entries.filter(([k]) => k.startsWith(\"artifact_\")).map(([key, v]) => [key, JSON.parse(v) as IArtifact] as const)\r\n    const idsToRemove = new Set(base.arts.values.map(a => a.id))\r\n    const hasLocations = arts.some(a => a[1].location)\r\n\r\n    for (const [key, art] of arts) {\r\n      let { duplicated, upgraded } = base.arts.findDups(art)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\r\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\r\n\r\n      // Prefer dups over upgrades\r\n      const match: ICachedArtifact | undefined = duplicated[0] ?? upgraded[0]\r\n      if (match) {\r\n        idsToRemove.delete(match.id)\r\n        for (const key in match) {\r\n          if (!(key in art) && key !== \"location\")\r\n            art[key] = match[key]\r\n        }\r\n        if (!hasLocations)\r\n          art.location = match.location\r\n      }\r\n\r\n      if (duplicated.length) artCounter.unchanged.push(art)\r\n      else if (upgraded.length) artCounter.updated.push(art)\r\n      else artCounter.new.push(art)\r\n      storage.set(key, art)\r\n    }\r\n    artCounter.removed = [...idsToRemove].map(id => base.arts.get(id)!)\r\n  } else\r\n    base.arts.values.forEach((x, i) => storage.set(`artifact_${i}`, x))\r\n\r\n  // Match weapons for counter, metadata, and locations\r\n  if (weaponCounter) {\r\n    const weapons = storage.entries.filter(([k]) => k.startsWith(\"weapon_\")).map(([key, v]) => [key, JSON.parse(v) as IWeapon] as const)\r\n    const idsToRemove = new Set(base.weapons.values.map(w => w.id))\r\n    const hasLocations = weapons.some(weapon => weapon[1].location)\r\n\r\n    for (const [key, weapon] of weapons) {\r\n      let { duplicated, upgraded } = base.weapons.findDup(weapon)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(w => idsToRemove.has(w.id))\r\n      upgraded = upgraded.filter(w => idsToRemove.has(w.id))\r\n\r\n      // Prefer dups over upgrades\r\n      const match = (duplicated[0] ?? upgraded[0]) as ICachedWeapon | undefined\r\n      if (match) {\r\n        idsToRemove.delete(match.id)\r\n        for (const key in match) {\r\n          if (!(key in weapon) && key !== \"location\")\r\n            weapon[key] = match[key]\r\n        }\r\n        if (!hasLocations)\r\n          weapon.location = match.location\r\n      }\r\n\r\n      if (duplicated.length) weaponCounter.unchanged.push(weapon)\r\n      else if (upgraded.length) weaponCounter.updated.push(weapon)\r\n      else weaponCounter.new.push(weapon)\r\n      storage.set(key, weapon)\r\n    }\r\n    weaponCounter.removed = [...idsToRemove].map(id => base.weapons.get(id)!)\r\n  } else\r\n    base.weapons.values.forEach((x, i) => storage.set(`weapon_${i}`, x))\r\n\r\n  if (charCounter) {\r\n    const newCharEntries = storage.entries.filter(([k]) => k.startsWith(\"char_\")).map(([key, value]) => [key.slice(5), JSON.parse(value) as ICharacter] as const)\r\n    const newCharKeys = new Set(newCharEntries.map(([k]) => k))\r\n    const oldCharKeys = new Set(base.chars.keys as string[])\r\n\r\n    charCounter.updated = []\r\n    charCounter.new = []\r\n\r\n    const hasTeamData = newCharEntries.some(([_, char]) => char.team.some(x => x))\r\n\r\n    for (const [key, char] of newCharEntries) {\r\n      const match = base.chars.get(key as any)\r\n      if (match) {\r\n        charCounter.updated.push(char)\r\n      } else {\r\n        charCounter.new.push(char)\r\n        continue\r\n      }\r\n\r\n      for (const key in match)\r\n        if (!(key in char))\r\n          char[key] = match[key]\r\n      if (!hasTeamData)\r\n        char.team = match.team\r\n\r\n      storage.set(`char_${key}`, char)\r\n    }\r\n\r\n    charCounter.removed = [...oldCharKeys].filter(([k]) => newCharKeys.has(k)).map(k => base.chars.get(k as any)!)\r\n    charCounter.unchanged = []\r\n  } else\r\n    base.chars.keys.forEach(k => storage.set(`char_${k}`, base.chars.get(k)))\r\n\r\n  // Merge misc.\r\n  const newKeys = new Set(storage.keys)\r\n  for (const key of base.storage.keys)\r\n    if (!newKeys.has(key) && !key.startsWith(\"artifact_\") && !key.startsWith(\"weapon_\") && !key.startsWith(\"char_\"))\r\n      storage.setString(key, base.storage.getString(key)!)\r\n}\r\n","import { MainStatKey, SubstatKey } from '../../Types/artifact';\r\nimport { ArtifactSetKey, SlotKey } from \"../../Types/consts\";\r\nimport { ArtCharDatabase } from '../Database';\r\nimport { importGOOD } from './good';\r\n\r\nconst DefaultVersion = \"1\";\r\nconst GetConvertedArtifactsOfVersion: Dict<string, (data: any) => { artifacts: any[] }> = {\r\n  \"1\": importMona1\r\n};\r\n\r\nexport function importMona(dataObj: any, oldDatabase: ArtCharDatabase): ReturnType<typeof importGOOD> {\r\n  const version = dataObj.version ?? DefaultVersion\r\n  const converted = GetConvertedArtifactsOfVersion[version]?.(dataObj)\r\n\r\n  if (!converted)\r\n    return // TODO: Maybe add failure reason, or throws here\r\n\r\n  return importGOOD({\r\n    format: \"GOOD\",\r\n    source: \"mona-uranai\",\r\n    version: 1,\r\n    artifacts: converted.artifacts\r\n  }, oldDatabase)\r\n}\r\n\r\n// backup 0: https://github.com/wormtql/genshin_artifact/blob/main/src/assets/artifacts/data/*/index.js\r\n// backup 1: https://github.com/YuehaiTeam/cocogoat/blob/main/src/App/export/Mona.ts\r\n\r\nfunction importMona1(dataObj: any): { artifacts: any[] } {\r\n  const artifacts: any[] = []\r\n\r\n  for (const property in dataObj) {\r\n    if (!(property in ArtifactSlotKeyMap))\r\n      continue\r\n\r\n    for (const genshinArtArtifact of dataObj[property]) {\r\n      const { setName, star, level, position, mainTag } = genshinArtArtifact\r\n      const raw = {\r\n        setKey: ArtifactSetKeyMap[setName],\r\n        rarity: star,\r\n        level,\r\n        slotKey: ArtifactSlotKeyMap[position],\r\n        mainStatKey: ArtifactMainStatKeyMap[mainTag.name],\r\n        substats: genshinArtArtifact.normalTags.map(({ name, value }) => {\r\n          const key = ArtifactSubStatKeyMap[name]\r\n          return {\r\n            key,\r\n            value: key?.endsWith(\"_\") ?\r\n              Math.round(value * 1000) / 10 : // decimal to percentage\r\n              value,\r\n          }\r\n        }),\r\n      }\r\n      artifacts.push(raw)\r\n    }\r\n  }\r\n\r\n  return { artifacts }\r\n}\r\n\r\n// Referencing https://wormtql.gitbook.io/mona-uranai/ (they don't seem to update this anymore...)\r\n\r\nconst ArtifactSlotKeyMap: Dict<string, SlotKey> = {\r\n  \"flower\": \"flower\",\r\n  \"feather\": \"plume\",\r\n  \"sand\": \"sands\",\r\n  \"cup\": \"goblet\",\r\n  \"head\": \"circlet\",\r\n}\r\n\r\n// Referencing https://github.com/daydreaming666/Amenoma/blob/main/ArtScanner/ArtsInfo.py SetNamesGenshinArt\r\n\r\nconst ArtifactSetKeyMap: Dict<string, ArtifactSetKey> = {\r\n  \"adventurer\": \"Adventurer\",\r\n  \"archaicPetra\": \"ArchaicPetra\",\r\n  \"berserker\": \"Berserker\",\r\n  \"blizzardStrayer\": \"BlizzardStrayer\",\r\n  \"bloodstainedChivalry\": \"BloodstainedChivalry\",\r\n  \"braveHeart\": \"BraveHeart\",\r\n  \"crimsonWitch\": \"CrimsonWitchOfFlames\",\r\n  \"defenderWill\": \"DefendersWill\",\r\n  \"gambler\": \"Gambler\",\r\n  \"gladiatorFinale\": \"GladiatorsFinale\",\r\n  \"heartOfDepth\": \"HeartOfDepth\",\r\n  \"instructor\": \"Instructor\",\r\n  \"lavaWalker\": \"Lavawalker\",\r\n  \"luckyDog\": \"LuckyDog\",\r\n  \"maidenBeloved\": \"MaidenBeloved\",\r\n  \"martialArtist\": \"MartialArtist\",\r\n  \"noblesseOblige\": \"NoblesseOblige\",\r\n  \"prayersForDestiny\": \"PrayersForDestiny\",\r\n  \"prayersForIllumination\": \"PrayersForIllumination\",\r\n  \"prayersForWisdom\": \"PrayersForWisdom\",\r\n  \"prayersToSpringtime\": \"PrayersToSpringtime\",\r\n  \"resolutionOfSojourner\": \"ResolutionOfSojourner\",\r\n  \"retracingBolide\": \"RetracingBolide\",\r\n  \"scholar\": \"Scholar\",\r\n  \"exile\": \"TheExile\",\r\n  \"thunderingFury\": \"ThunderingFury\",\r\n  \"thunderSmoother\": \"Thundersoother\",\r\n  \"tinyMiracle\": \"TinyMiracle\",\r\n  \"travelingDoctor\": \"TravelingDoctor\",\r\n  \"viridescentVenerer\": \"ViridescentVenerer\",\r\n  \"wandererTroupe\": \"WanderersTroupe\",\r\n  \"tenacityOfTheMillelith\": \"TenacityOfTheMillelith\",\r\n  \"paleFlame\": \"PaleFlame\",\r\n  \"emblemOfSeveredFate\": \"EmblemOfSeveredFate\",\r\n  \"shimenawaReminiscence\": \"ShimenawasReminiscence\",\r\n  \"huskOfOpulentDreams\": \"HuskOfOpulentDreams\",\r\n  \"oceanHuedClam\": \"OceanHuedClam\",\r\n  \"EchoesOfAnOffering\": \"EchoesOfAnOffering\",\r\n  \"VermillionHereafter\": \"VermillionHereafter\",\r\n}\r\nconst ArtifactMainStatKeyMap: Dict<string, MainStatKey> = {\r\n  \"cureEffect\": \"heal_\",\r\n  \"lifeStatic\": \"hp\",\r\n  \"lifePercentage\": \"hp_\",\r\n  \"attackStatic\": \"atk\",\r\n  \"attackPercentage\": \"atk_\",\r\n  // \"defendStatic\": \"def\",\r\n  \"defendPercentage\": \"def_\",\r\n  \"critical\": \"critRate_\",\r\n  // // \"eCritical\": \"\",\r\n  \"criticalDamage\": \"critDMG_\",\r\n  \"elementalMastery\": \"eleMas\",\r\n  \"recharge\": \"enerRech_\",\r\n  \"thunderBonus\": \"electro_dmg_\",\r\n  \"fireBonus\": \"pyro_dmg_\",\r\n  \"waterBonus\": \"hydro_dmg_\",\r\n  \"iceBonus\": \"cryo_dmg_\",\r\n  \"windBonus\": \"anemo_dmg_\",\r\n  \"rockBonus\": \"geo_dmg_\",\r\n  \"grassBonus\": \"dendro_dmg_\",\r\n  \"physicalBonus\": \"physical_dmg_\",\r\n  // \"bonus\": \"\",\r\n  // \"aBonus\": \"\",\r\n  // \"bBonus\": \"\",\r\n  // \"eBonus\": \"\",\r\n  // \"qBonus\": \"\",\r\n}\r\nconst ArtifactSubStatKeyMap: Dict<string, SubstatKey> = {\r\n  \"lifeStatic\": \"hp\",\r\n  \"lifePercentage\": \"hp_\",\r\n  \"attackStatic\": \"atk\",\r\n  \"attackPercentage\": \"atk_\",\r\n  \"defendStatic\": \"def\",\r\n  \"defendPercentage\": \"def_\",\r\n  \"critical\": \"critRate_\",\r\n  \"criticalDamage\": \"critDMG_\",\r\n  \"elementalMastery\": \"eleMas\",\r\n  \"recharge\": \"enerRech_\",\r\n}\r\n","import { faArrowLeft, faFileCode, faFileUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Upload } from '@mui/icons-material'\r\nimport { Box, Button, CardContent, Divider, Grid, styled, Typography } from '@mui/material'\r\nimport { useContext, useMemo, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport { ImportResult, ImportResultCounter } from '../Database/exim'\r\nimport { importGOOD } from '../Database/imports/good'\r\nimport { importMona } from '../Database/imports/mona'\r\n\r\nconst InvisInput = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function UploadCard({ onReplace }: { onReplace: () => void }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\");\r\n  const [data, setdata] = useState(\"\")\r\n  const [filename, setfilename] = useState(\"\")\r\n  const [errorMsg, setErrorMsg] = useState(\"\") // TODO localize error msg\r\n  const dataObj: UploadData | undefined = useMemo(() => {\r\n    if (!data) return\r\n    let parsed: any\r\n    try {\r\n      parsed = JSON.parse(data)\r\n      if (typeof parsed !== \"object\") {\r\n        setErrorMsg(\"uploadCard.error.jsonParse\")\r\n        return\r\n      }\r\n    } catch (e) {\r\n      setErrorMsg(\"uploadCard.error.jsonParse\")\r\n      return\r\n    }\r\n    // Figure out the file format\r\n    if (parsed.version === \"1\" && [\"flower\", \"feather\", \"sand\", \"cup\", \"head\"].some(k => Object.keys(parsed).includes(k))) {\r\n      // Parse as mona format\r\n      const imported = importMona(parsed, database)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.monaInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    } else if (parsed.format === \"GOOD\") {\r\n      // Parse as GOOD format\r\n      const imported = importGOOD(parsed, database)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.goInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    }\r\n    setErrorMsg(\"uploadCard.error.unknown\")\r\n    return\r\n  }, [data, database])\r\n\r\n  const reset = () => {\r\n    setdata(\"\")\r\n    setfilename(\"\")\r\n    onReplace()\r\n  }\r\n  const onUpload = async e => {\r\n    const file = e.target.files[0]\r\n    e.target.value = null // reset the value so the same file can be uploaded again...\r\n    if (file) setfilename(file.name)\r\n    const reader = new FileReader()\r\n    reader.onload = () => setdata(reader.result as string)\r\n    reader.readAsText(file)\r\n  }\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}><Trans t={t} i18nKey=\"settings:uploadCard.title\" /></CardContent>\r\n    <CardContent>\r\n      <Grid container spacing={2} sx={{ mb: 1 }}>\r\n        <Grid item>\r\n          <label htmlFor=\"icon-button-file\">\r\n            <InvisInput accept=\".json\" id=\"icon-button-file\" type=\"file\" onChange={onUpload} />\r\n            <Button component=\"span\" startIcon={<Upload />}>Upload</Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <CardDark sx={{ px: 2, py: 1 }}>\r\n            <Typography>{filename ? <span><FontAwesomeIcon icon={faFileCode} /> {filename}</span> : <span><FontAwesomeIcon icon={faArrowLeft} /> <Trans t={t} i18nKey=\"settings:uploadCard.hint\" /></span>}</Typography>\r\n          </CardDark>\r\n        </Grid>\r\n      </Grid>\r\n      <Typography gutterBottom variant=\"caption\"><Trans t={t} i18nKey=\"settings:uploadCard.hintPaste\" /></Typography>\r\n      <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", mb: 2, resize: \"vertical\" }} value={data} onChange={e => setdata(e.target.value)} />\r\n      {UploadInfo(dataObj) ?? t(errorMsg)}\r\n    </CardContent>\r\n    {UploadAction(dataObj, reset)}\r\n  </CardLight>\r\n}\r\n\r\nfunction UploadInfo(data: UploadData | undefined) {\r\n  switch (data?.type) {\r\n    case \"GOOD\": return <GOODUploadInfo data={data} />\r\n  }\r\n}\r\nfunction UploadAction(data: UploadData | undefined, reset: () => void) {\r\n  switch (data?.type) {\r\n    case \"GOOD\": return <GOUploadAction data={data} reset={reset} />\r\n  }\r\n}\r\n\r\nfunction GOODUploadInfo({ data: { source, artifacts, characters, weapons }, data }: { data: ImportResult }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey=\"uploadCard.dbSource\" /><strong> {source}</strong>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      <Grid container spacing={2}>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={artifacts} type=\"arts\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={weapons} type=\"weapons\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={characters} type=\"chars\" />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\nfunction MergeResult({ result, type }: { result?: ImportResultCounter<any>, type: string }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  if (!result) return null\r\n  return <CardLight >\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey={`count.${type}`} /> {result.total ?? 0}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Typography><Trans t={t} i18nKey=\"count.new\" /> <strong>{result.new.length}</strong> / {result.total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.updated\" /> <strong>{result.updated.length}</strong> / {result.total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.unchanged\" /> <strong>{result.unchanged.length}</strong> / {result.total}</Typography>\r\n      <Typography color=\"warning.main\"><Trans t={t} i18nKey=\"count.removed\" /> <strong>{result.removed.length}</strong></Typography>\r\n      {!!result.invalid?.length && <div>\r\n        <Typography color=\"error.main\"><Trans t={t} i18nKey=\"count.invalid\" /> <strong>{result.invalid.length}</strong> / {result.total}</Typography>\r\n        <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", resize: \"vertical\" }} value={JSON.stringify(result.invalid, undefined, 2)} disabled />\r\n      </div>}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nfunction GOUploadAction({ data: { storage }, data, reset }: { data: ImportResult, reset: () => void }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\")\r\n  const dataValid = data.characters?.total || data.artifacts?.total || data.weapons?.total\r\n  const replaceDB = () => {\r\n    database.clear()\r\n    database.storage.copyFrom(storage)\r\n    setDatabase(new ArtCharDatabase(database.storage))\r\n    reset()\r\n  }\r\n\r\n  return <><Divider /><CardContent sx={{ py: 1 }}>\r\n    <Button color={dataValid ? \"success\" : \"error\"} disabled={!dataValid} onClick={replaceDB} startIcon={<FontAwesomeIcon icon={faFileUpload} />}><Trans t={t} i18nKey=\"settings:uploadCard.replaceDatabase\" /></Button>\r\n  </CardContent></>\r\n}\r\n\r\ntype UploadData = ImportResult\r\n","import { faClipboard } from '@fortawesome/free-solid-svg-icons'\r\nimport { Delete, Download, ImportExport, Upload } from '@mui/icons-material'\r\nimport { Button, CardContent, Chip, Divider, Grid, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { useCallback, useContext, useEffect, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { StyledInputBase } from '../Components/CustomNumberInput'\r\nimport FontAwesomeSvgIcon from '../Components/FontAwesomeSvgIcon'\r\nimport ModalWrapper from '../Components/ModalWrapper'\r\nimport { ArtCharDatabase, DatabaseContext, DatabaseContextObj } from \"../Database/Database\"\r\nimport { ExtraStorage } from '../Database/DBStorage'\r\nimport { exportGOOD } from '../Database/exports/good'\r\nimport useBoolState from '../ReactHooks/useBoolState'\r\nimport useDBState, { dbMetaInit } from '../ReactHooks/useDBState'\r\nimport { range } from '../Util/Util'\r\nimport UploadCard from './UploadCard'\r\n\r\nexport default function DatabaseCard() {\r\n  const databaseContextObj = useContext(DatabaseContext)\r\n  const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\r\n  const { t } = useTranslation([\"settings\"]);\r\n\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        {t`DatabaseCard.title`}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <Grid container spacing={2} columns={{ xs: 1, md: 2, }}>\r\n        {range(1, 4).map(i => <Grid key={i} item xs={1}>\r\n          {i === dbIndex ? <DataCard index={i} /> :\r\n            <ExtraDatabaseWrapper index={i}>\r\n              <DataCard index={i} databaseContextObj={databaseContextObj} />\r\n            </ExtraDatabaseWrapper>}\r\n        </Grid>)}\r\n      </Grid>\r\n    </CardContent >\r\n  </CardLight >\r\n}\r\nfunction ExtraDatabaseWrapper({ index, children }) {\r\n  const [database, setDatabase] = useState(() => {\r\n    const dbName = `extraDatabase_${index}`\r\n    const storage = new ExtraStorage(dbName)\r\n    const dbObj = JSON.parse(localStorage.getItem(dbName) ?? `{ \"dbIndex\": \"${index}\" }`)\r\n    storage.setStorage(dbObj)\r\n\r\n    // A bit of preventive programming\r\n    storage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\r\n    const db = new ArtCharDatabase(storage)\r\n    storage.saveStorage()\r\n    return db\r\n  })\r\n\r\n  return <DatabaseContext.Provider value={{ database, setDatabase }}>\r\n    {children}\r\n  </DatabaseContext.Provider>\r\n}\r\n\r\nfunction DataCard({ index, databaseContextObj }: { index: number, databaseContextObj?: DatabaseContextObj }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const [{ name, lastEdit }, setDbMeta] = useDBState(\"dbMeta\", dbMetaInit(index))\r\n  const current = !databaseContextObj\r\n  const [uploadOpen, onOpen, onClose] = useBoolState()\r\n  const { t } = useTranslation([\"settings\"]);\r\n  const numChar = database.chars.keys.length\r\n  const numArt = database.arts.values.length\r\n  const numWeapon = database.weapons.values.length\r\n  const hasData = Boolean(numChar || numArt || numWeapon)\r\n  const copyToClipboard = useCallback(\r\n    () => navigator.clipboard.writeText(JSON.stringify(exportGOOD(database.storage)))\r\n      .then(() => alert(\"Copied database to clipboard.\"))\r\n      .catch(console.error),\r\n    [database],\r\n  )\r\n  const onUpload = useCallback(() => {\r\n    onClose()\r\n    if (!current) {\r\n      const storage = database.storage as ExtraStorage\r\n      storage.saveStorage()\r\n    }\r\n  }, [onClose, current, database.storage])\r\n\r\n  const onDelete = useCallback(() => {\r\n    if (!window.confirm(`Are you sure you want to delete \"${name}\"?`)) return\r\n    if (current) {\r\n      database.clear()\r\n      setDatabase(new ArtCharDatabase(database.storage))\r\n    } else {\r\n      const storage = database.storage as ExtraStorage\r\n      const dbName = storage.databaseName\r\n      const extraStorage = new ExtraStorage(dbName)\r\n      extraStorage.setStorage({})\r\n      setDatabase(new ArtCharDatabase(extraStorage))\r\n      localStorage.removeItem(dbName)\r\n    }\r\n  }, [database, current, name, setDatabase])\r\n\r\n  const download = useCallback(() => {\r\n    const date = new Date()\r\n    const dateStr = date.toISOString().split(\".\")[0].replace(\"T\", \"_\").replaceAll(\":\", \"-\")\r\n    const JSONStr = JSON.stringify(exportGOOD(database.storage))\r\n    const filename = `${name.trim().replaceAll(\" \", \"_\")}_${dateStr}.json`\r\n    const contentType = \"application/json;charset=utf-8\"\r\n    const a = document.createElement('a');\r\n    a.download = filename\r\n    a.href = `data:${contentType},${encodeURIComponent(JSONStr)}`\r\n    a.target = \"_blank\"\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n  }, [database, name])\r\n\r\n  const onSwap = useCallback(() => {\r\n    if (!databaseContextObj) return\r\n\r\n    // save current database to appropriate slot\r\n    const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\r\n    const tempStorage = new ExtraStorage(`extraDatabase_${dbIndex}`, databaseContextObj.database.storage)\r\n    tempStorage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\r\n    tempStorage.saveStorage()\r\n\r\n    // clear this slot database\r\n    const storage = database.storage as ExtraStorage\r\n    const dbName = storage.databaseName\r\n    localStorage.removeItem(dbName)\r\n\r\n    // swap over database\r\n    databaseContextObj.database.clear()\r\n    databaseContextObj.database.storage.copyFrom(database.storage)\r\n    databaseContextObj.database.storage.set(\"dbIndex\", index)\r\n    databaseContextObj.setDatabase(new ArtCharDatabase(databaseContextObj.database.storage))\r\n\r\n  }, [databaseContextObj, database, index])\r\n\r\n  const [tempName, setTempName] = useState(name)\r\n  useEffect(() => setTempName(name), [name])\r\n\r\n  const onBlur = useCallback(() => {\r\n    setDbMeta({ name: tempName })\r\n    if (!current) (database.storage as ExtraStorage).saveStorage()\r\n  }, [setDbMeta, tempName, database, current])\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n\r\n  return <CardDark sx={{ height: \"100%\", boxShadow: current ? \"0px 0px 0px 2px green inset\" : undefined }}>\r\n    <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n      < StyledInputBase value={tempName} sx={{ borderRadius: 1, px: 1, flexGrow: 1 }} onChange={(e) => setTempName(e.target.value)} onBlur={onBlur} onKeyDown={onKeyDOwn} />\r\n      {!current && <Button startIcon={<ImportExport />} onClick={onSwap} color=\"warning\">{t`DatabaseCard.button.swap`}</Button>}\r\n      <Chip color={current ? \"success\" : \"secondary\"} label={current ? t`DatabaseCard.currentDB` : `${t`DatabaseCard.title`} ${index}`} />\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Box display=\"flex\" gap={2}>\r\n        <Box flexGrow={1}>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.chars\" /> <strong>{numChar}</strong></Typography>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.arts\" /> <strong>{numArt}</strong></Typography>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.weapons\" /> <strong>{numWeapon}</strong></Typography>\r\n          {!!lastEdit && <Typography noWrap><strong>{(new Date(lastEdit).toLocaleString())}</strong></Typography>}\r\n        </Box>\r\n        <Box>\r\n          <Grid container spacing={1} columns={{ xs: 2 }} >\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeSvgIcon icon={faClipboard} />}>\r\n                <Trans t={t} i18nKey=\"DatabaseCard.button.copy\" />\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <ModalWrapper open={uploadOpen} onClose={onClose} >\r\n                <UploadCard onReplace={onUpload} />\r\n              </ModalWrapper>\r\n              <Button fullWidth component=\"span\" color=\"info\" startIcon={<Upload />} onClick={onOpen}>\r\n                {t`DatabaseCard.button.upload`}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} onClick={download} startIcon={<Download />}>\r\n                {t`DatabaseCard.button.download`}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} color=\"error\" onClick={onDelete} startIcon={<Delete />}>\r\n                {t`DatabaseCard.button.delete`}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { CardContent, Divider, MenuItem } from '@mui/material'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton'\r\nimport SqBadge from '../Components/SqBadge'\r\nimport { languageCodeList } from \"../i18n\"\r\nexport default function LanguageCard() {\r\n  const { t } = useTranslation();\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      {t(\"settings:languageCard.selectLanguage\")} <SqBadge color=\"warning\">{t(\"ui:underConstruction\")}</SqBadge>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <LanguageDropdown />\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nconst nativeLanguages = {\r\n  \"chs\": \"中文 正体字\",\r\n  \"cht\": \"中文 繁體字\",\r\n  \"de\": \"Deutsch\",\r\n  \"en\": \"English\",\r\n  \"es\": \"español\",\r\n  \"fr\": \"français\",\r\n  \"id\": \"Bahasa Indonesia\",\r\n  \"ja\": \"日本語\",\r\n  \"ko\": \"한국어\",\r\n  \"pt\": \"Português\",\r\n  \"ru\": \"Русский язык\",\r\n  \"th\": \"ภาษาไทย\",\r\n  \"vi\": \"Tiếng Việt\"\r\n}\r\nexport function LanguageDropdown() {\r\n  const { t, i18n } = useTranslation([\"ui\", \"settings\"]);\r\n  const onSetLanguage = (lang) => () => i18n.changeLanguage(lang);\r\n  const currentLang = i18n.languages[0];\r\n  return <DropdownButton fullWidth title={t('settings:languageCard.languageFormat', { language: t(`languages:${currentLang}`) })}>\r\n    {languageCodeList.map((lang) => <MenuItem key={lang} selected={currentLang === lang} disabled={currentLang === lang} onClick={onSetLanguage(lang)}>\r\n      <Trans i18nKey={`languages:${lang}`} />\r\n      {lang !== currentLang ? ` (${nativeLanguages[lang]})` : \"\"}\r\n    </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\r\nimport { Button, CardContent, Typography } from \"@mui/material\";\r\nimport CardLight from \"../Components/Card/CardLight\";\r\nimport { initGlobalSettings } from \"../stateInit\";\r\nimport useDBState from \"../ReactHooks/useDBState\";\r\n\r\nexport default function TCToggleCard() {\r\n  const [{ tcMode }, setGlobalSettings] = useDBState(\"GlobalSettings\", initGlobalSettings)\r\n\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Typography gutterBottom color=\"warning.main\">Enabling this toggle will show some features that might be too complex for the average user.</Typography>\r\n      <Button fullWidth\r\n        onClick={() => setGlobalSettings({ tcMode: !tcMode })}\r\n        color={tcMode ? \"success\" : \"primary\"}\r\n        startIcon={tcMode ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n        Theorycrafting Mode\r\n      </Button>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { CardContent, Divider, Typography } from '@mui/material'\r\nimport ReactGA from 'react-ga4'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport DatabaseCard from './DatabaseCard'\r\nimport LanguageCard from './LanguageCard'\r\nimport TCToggleCard from './TCToggleCard'\r\n\r\nexport default function PageSettings() {\r\n  const { t } = useTranslation([\"settings\"]);\r\n  ReactGA.send({ hitType: \"pageview\", page: '/setting' })\r\n\r\n  return <CardDark sx={{ my: 1 }}>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"title\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <LanguageCard />\r\n      <DatabaseCard />\r\n      <TCToggleCard />\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { allSubstatKeys } from \"./Types/artifact\"\r\n\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n\r\nexport function initCharMeta() {\r\n  return {\r\n    rvFilter: [...allSubstatKeys],\r\n    favorite: false\r\n  }\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');"],"names":["createSvgIcon","_jsx","d","GOSource","exportGOOD","storage","artifactIDs","Map","artifacts","entries","filter","startsWith","map","i","id","value","set","JSON","parse","format","dbVersion","currentDBVersion","source","version","characters","weapons","states","key","split","buildSettings","result","builds","x","has","get","importGOOD","data","oldDatabase","SandboxStorage","type","total","invalid","new","updated","unchanged","removed","counter","length","forEach","a","parseArtifact","push","w","parsed","parseWeapon","c","parseCharacter","buildDate","setDBVersion","s","state","b","parseImport","migrate","base","artCounter","weaponCounter","charCounter","arts","v","idsToRemove","Set","values","hasLocations","some","location","art","findDups","duplicated","upgraded","match","delete","weapon","findDup","newCharEntries","slice","newCharKeys","oldCharKeys","chars","keys","hasTeamData","team","char","k","newKeys","setString","getString","merge","importGOOD1","GetConvertedArtifactsOfVersion","dataObj","property","ArtifactSlotKeyMap","genshinArtArtifact","setName","star","level","position","mainTag","raw","setKey","ArtifactSetKeyMap","rarity","slotKey","mainStatKey","ArtifactMainStatKeyMap","name","substats","normalTags","ArtifactSubStatKeyMap","endsWith","Math","round","InvisInput","styled","display","UploadCard","onReplace","database","useContext","DatabaseContext","t","useTranslation","useState","setdata","filename","setfilename","errorMsg","setErrorMsg","useMemo","e","Object","includes","imported","converted","importMona","onUpload","file","target","files","reader","FileReader","onload","readAsText","CardLight","CardContent","sx","py","Trans","i18nKey","Grid","container","spacing","mb","item","htmlFor","accept","onChange","Button","component","startIcon","Upload","flexGrow","CardDark","px","Typography","icon","faFileCode","faArrowLeft","gutterBottom","variant","width","fontFamily","minHeight","resize","UploadInfo","UploadAction","GOODUploadInfo","reset","GOUploadAction","Divider","MergeResult","color","stringify","undefined","disabled","setDatabase","dataValid","onClick","clear","copyFrom","ArtCharDatabase","faFileUpload","DatabaseCard","databaseContextObj","dbIndex","parseInt","flexDirection","gap","columns","xs","md","range","DataCard","index","ExtraDatabaseWrapper","children","dbName","ExtraStorage","dbObj","localStorage","getItem","setStorage","removeForKeys","db","saveStorage","Database","useDBState","dbMetaInit","lastEdit","setDbMeta","current","useBoolState","uploadOpen","onOpen","onClose","numChar","numArt","numWeapon","hasData","Boolean","copyToClipboard","useCallback","navigator","clipboard","writeText","then","alert","catch","console","error","onDelete","window","confirm","databaseName","extraStorage","removeItem","download","dateStr","Date","toISOString","replace","replaceAll","JSONStr","trim","document","createElement","href","encodeURIComponent","body","appendChild","click","removeChild","onSwap","tempStorage","tempName","setTempName","useEffect","onBlur","onKeyDOwn","height","boxShadow","justifyContent","borderRadius","onKeyDown","ImportExport","Chip","label","Box","noWrap","toLocaleString","fullWidth","FontAwesomeSvgIcon","faClipboard","ModalWrapper","open","Download","Delete","LanguageCard","SqBadge","LanguageDropdown","nativeLanguages","i18n","onSetLanguage","lang","changeLanguage","currentLang","languages","DropdownButton","title","language","languageCodeList","MenuItem","selected","TCToggleCard","initGlobalSettings","tcMode","setGlobalSettings","CheckBox","CheckBoxOutlineBlank","PageSettings","ReactGA","hitType","page","my","initCharMeta","rvFilter","allSubstatKeys","favorite"],"sourceRoot":""}