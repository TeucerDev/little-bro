{"version":3,"file":"static/js/381.5fe5714a.chunk.js","mappings":"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","sources":["Components/SortByButton.tsx","Components/SolidColoredToggleButton.tsx","Components/ToggleButton/ElementToggle.tsx","Components/ToggleButton/WeaponToggle.tsx","PageCharacter/CharacterSelectionModal.tsx"],"sourcesContent":["import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\r\n\r\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\r\nexport default function SortByButton<Key extends string>({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: ButtonGroupProps & {\r\n  sortKeys: Key[]\r\n  value: Key\r\n  onChange: (value: Key) => void\r\n  ascending: boolean\r\n  onChangeAsc: (value: boolean) => void\r\n}) {\r\n  const { t } = useTranslation(\"ui\")\r\n  return <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n    <Trans t={t} i18nKey={t(\"sortBy\") as any}>Sort by: </Trans>\r\n    <ButtonGroup {...props} >\r\n      <DropdownButton title={<Trans t={t} i18nKey={t(`sortMap.${value}`) as any}>{{ value: t(`sortMap.${value}`) }}</Trans>}>\r\n        {sortKeys.map(key =>\r\n          <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\r\n      </DropdownButton>\r\n      <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\r\n        {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\r\n      </Button>\r\n    </ButtonGroup>\r\n  </Box>\r\n}\r\n","import { ButtonProps, ToggleButton, ToggleButtonProps, styled } from \"@mui/material\";\r\n\r\ntype SolidColoredToggleButtonPartial = {\r\n  baseColor?: ButtonProps[\"color\"];\r\n  selectedColor?: ButtonProps[\"color\"];\r\n}\r\nexport type SolidColoredToggleButtonProps = SolidColoredToggleButtonPartial & ToggleButtonProps\r\n\r\n\r\nconst SolidColoredToggleButton = styled(ToggleButton, {\r\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\r\n})<SolidColoredToggleButtonPartial>(({ theme, baseColor = \"secondary\", selectedColor = \"success\" }) => ({\r\n  '&': {\r\n    backgroundColor: theme.palette[baseColor].main,\r\n    color: theme.palette[baseColor].contrastText,\r\n  },\r\n  '&:hover': {\r\n    backgroundColor: theme.palette[baseColor].dark,\r\n  },\r\n  '&.Mui-selected': {\r\n    backgroundColor: theme.palette[selectedColor].main,\r\n    color: theme.palette[selectedColor].contrastText,\r\n  },\r\n  '&.Mui-selected:hover': {\r\n    backgroundColor: theme.palette[selectedColor].dark,\r\n  },\r\n  '&.Mui-disabled': {\r\n    backgroundColor: theme.palette[baseColor].dark,\r\n  },\r\n  '&.Mui-selected.Mui-disabled': {\r\n    backgroundColor: theme.palette[selectedColor].dark,\r\n  },\r\n}));\r\n\r\nexport default SolidColoredToggleButton\r\n","import { Box, ToggleButtonGroup } from \"@mui/material\";\r\nimport { allElements, ElementKey } from \"../../Types/consts\";\r\nimport { handleMultiSelect } from \"../../Util/MultiSelect\";\r\nimport SolidColoredToggleButton from \"../SolidColoredToggleButton\";\r\nimport { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\r\nimport StatIcon from \"../StatIcon\";\r\ntype ElementToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\r\n  onChange: (value: ElementKey[]) => void\r\n  value: ElementKey[]\r\n}\r\nconst elementHandler = handleMultiSelect([...allElements])\r\nexport default function ElementToggle({ value, onChange, ...props }: ElementToggleProps) {\r\n  return <ToggleButtonGroup exclusive value={value} {...props}>\r\n    {allElements.map(ele => <SolidColoredToggleButton key={ele} value={ele} selectedColor={ele} onClick={() => onChange(elementHandler(value, ele))}>\r\n      <Box sx={{ fontSize: \"2em\", lineHeight: 1 }}>{StatIcon[ele]}</Box>\r\n    </SolidColoredToggleButton>)}\r\n  </ToggleButtonGroup>\r\n}\r\n","import { ToggleButton } from \"@mui/material\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport { allWeaponTypeKeys, WeaponTypeKey } from \"../../Types/consts\";\r\nimport { handleMultiSelect } from \"../../Util/MultiSelect\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport SolidToggleButtonGroup, { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\r\ntype WeaponToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\r\n  onChange: (value: WeaponTypeKey[]) => void\r\n  value: WeaponTypeKey[]\r\n}\r\nconst weaponTypeHandler = handleMultiSelect([...allWeaponTypeKeys])\r\nexport default function WeaponToggle({ value, onChange, ...props }: WeaponToggleProps) {\r\n  return <SolidToggleButtonGroup exclusive value={value} {...props}>\r\n    {allWeaponTypeKeys.map(wt => <ToggleButton key={wt} value={wt} onClick={() => onChange(weaponTypeHandler(value, wt))}>\r\n      <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} />\r\n    </ToggleButton>)}\r\n  </SolidToggleButtonGroup>\r\n}\r\n","import { Box, CardActionArea, CardContent, Divider, Grid, TextField, Tooltip, tooltipClasses, TooltipProps, Typography } from \"@mui/material\";\r\nimport { styled } from \"@mui/system\";\r\nimport { ChangeEvent, useContext, useDeferredValue, useEffect, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CardDark from \"../Components/Card/CardDark\";\r\nimport CardLight from \"../Components/Card/CardLight\";\r\nimport CharacterCard from \"../Components/Character/CharacterCard\";\r\nimport CloseButton from \"../Components/CloseButton\";\r\nimport ModalWrapper from \"../Components/ModalWrapper\";\r\nimport SortByButton from \"../Components/SortByButton\";\r\nimport SqBadge from \"../Components/SqBadge\";\r\nimport { StarsDisplay } from \"../Components/StarDisplay\";\r\nimport ElementToggle from \"../Components/ToggleButton/ElementToggle\";\r\nimport WeaponToggle from \"../Components/ToggleButton/WeaponToggle\";\r\nimport { DataContext } from \"../Context/DataContext\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { ascensionMaxLevel } from \"../Data/LevelData\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport useCharacter from \"../ReactHooks/useCharacter\";\r\nimport useDBMeta from \"../ReactHooks/useDBMeta\";\r\nimport useForceUpdate from \"../ReactHooks/useForceUpdate\";\r\nimport usePromise from \"../ReactHooks/usePromise\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { allCharacterKeys, CharacterKey } from \"../Types/consts\";\r\nimport { characterFilterConfigs, characterSortConfigs, CharacterSortKey, characterSortMap } from \"../Util/CharacterSort\";\r\nimport { filterFunction, sortFunction } from \"../Util/SortByFilters\";\r\n\r\ntype characterFilter = (character: ICachedCharacter | undefined, sheet: CharacterSheet) => boolean\r\n\r\ntype CharacterSelectionModalProps = {\r\n  show: boolean,\r\n  newFirst?: boolean\r\n  onHide: () => void,\r\n  onSelect?: (ckey: CharacterKey) => void,\r\n  filter?: characterFilter\r\n}\r\nconst sortKeys = Object.keys(characterSortMap)\r\nexport default function CharacterSelectionModal({ show, onHide, onSelect, filter = () => true, newFirst = false }: CharacterSelectionModalProps) {\r\n  const { t } = useTranslation([\"page_character\", \"charNames_gen\"])\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(() => database.displayCharacter.get())\r\n  useEffect(() => database.displayCharacter.follow((r, s) => setState(s)), [database, setState])\r\n\r\n  const characterSheets = usePromise(() => CharacterSheet.getAll, [])\r\n\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n\r\n  // character favorite updater\r\n  useEffect(() => database.charMeta.followAny(s => forceUpdate()), [forceUpdate, database])\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const deferredSearchTerm = useDeferredValue(searchTerm)\r\n  const deferredState = useDeferredValue(state)\r\n  const deferredDbDirty = useDeferredValue(dbDirty)\r\n  const characterKeyList = useMemo(() => {\r\n    if (!characterSheets) return []\r\n    const { element, weaponType, sortType, ascending } = deferredState\r\n    const sortByKeys = [...(newFirst ? [\"new\"] : []), ...(characterSortMap[sortType] ?? [])] as CharacterSortKey[]\r\n    return deferredDbDirty && allCharacterKeys\r\n      .filter(key => filter(database.chars.get(key), characterSheets[key]))\r\n      .filter(filterFunction({ element, weaponType, name: deferredSearchTerm }, characterFilterConfigs(database, characterSheets)))\r\n      .sort(sortFunction(sortByKeys, ascending, characterSortConfigs(database, characterSheets), [\"new\", \"favorite\"]))\r\n  }, [database, newFirst, deferredState, characterSheets, deferredDbDirty, deferredSearchTerm, filter])\r\n\r\n  if (!characterSheets) return null\r\n\r\n  const { weaponType, element, sortType, ascending } = state\r\n\r\n  return <ModalWrapper open={show} onClose={onHide} sx={{ \"& .MuiContainer-root\": { justifyContent: \"normal\" } }}>\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1, display: \"flex\", alignItems: \"center\", gap: 1, flexWrap: \"wrap\" }}>\r\n        <WeaponToggle sx={{ height: \"100%\" }} onChange={weaponType => database.displayCharacter.set({ weaponType })} value={weaponType} size=\"small\" />\r\n        <ElementToggle sx={{ height: \"100%\" }} onChange={element => database.displayCharacter.set({ element })} value={element} size=\"small\" />\r\n        <Box flexGrow={1}>\r\n          <TextField\r\n            autoFocus\r\n            value={searchTerm}\r\n            onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setSearchTerm(e.target.value)}\r\n            label={t(\"characterName\")}\r\n            size=\"small\"\r\n            sx={{ height: \"100%\" }}\r\n            InputProps={{\r\n              sx: { height: \"100%\" }\r\n            }}\r\n          />\r\n        </Box>\r\n        <SortByButton sx={{ height: \"100%\" }}\r\n          sortKeys={sortKeys} value={sortType} onChange={sortType => database.displayCharacter.set({ sortType })}\r\n          ascending={ascending} onChangeAsc={ascending => database.displayCharacter.set({ ascending })} />\r\n        <CloseButton onClick={onHide} />\r\n      </CardContent>\r\n      <Divider />\r\n      <DataContext.Provider value={{ teamData: undefined } as any}>\r\n        <CardContent><Grid container spacing={1} columns={{ xs: 2, sm: 3, md: 4, lg: 5, }}>\r\n          {characterKeyList.map(characterKey => <Grid item key={characterKey} xs={1} >\r\n            {/* <CharacterCard key={characterKey} hideStats characterKey={characterKey} onClick={() => { onHide(); onSelect?.(characterKey) }} /> */}\r\n            <SelectionCard characterKey={characterKey} onClick={() => { onHide(); onSelect?.(characterKey) }} />\r\n          </Grid>)}\r\n        </Grid></CardContent>\r\n      </DataContext.Provider>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n\r\nconst CustomTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} classes={{ popper: className }} />\r\n))({\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    padding: 0,\r\n  },\r\n});\r\n\r\nfunction SelectionCard({ characterKey, onClick }: { characterKey: CharacterKey, onClick: () => void }) {\r\n  const { gender } = useDBMeta()\r\n  const characterSheet = usePromise(() => CharacterSheet.get(characterKey, gender), [characterKey, gender])\r\n  const character = useCharacter(characterKey)\r\n  const { level = 1, ascension = 0, constellation = 0 } = character ?? {}\r\n  return <CustomTooltip enterDelay={300} enterNextDelay={300} arrow placement=\"bottom\" title={\r\n    <Box sx={{ width: 300 }}>\r\n      <CharacterCard hideStats characterKey={characterKey} />\r\n    </Box>\r\n  }>\r\n    <Box>\r\n      <CardLight sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }}>\r\n        <CardActionArea onClick={onClick}>\r\n          <Box display=\"flex\"\r\n            position=\"relative\"\r\n            className={`grad-${characterSheet?.rarity}star`}\r\n            sx={{\r\n              \"&::before\": {\r\n                content: '\"\"',\r\n                display: \"block\", position: \"absolute\",\r\n                left: 0, top: 0,\r\n                width: \"100%\", height: \"100%\",\r\n                opacity: 0.5,\r\n                backgroundImage: `url(${characterSheet?.bannerImg})`, backgroundPosition: \"center\", backgroundSize: \"cover\",\r\n              }\r\n            }}\r\n            width=\"100%\" >\r\n            <Box flexShrink={1} sx={{ maxWidth: { xs: \"33%\", lg: \"30%\" } }} alignSelf=\"flex-end\" display=\"flex\" flexDirection=\"column\" zIndex={1}>\r\n              <Box\r\n                component=\"img\"\r\n                src={characterSheet?.thumbImg}\r\n                width=\"100%\"\r\n                height=\"auto\"\r\n                maxWidth={256}\r\n                sx={{ mt: \"auto\" }}\r\n              />\r\n            </Box>\r\n            <Box flexGrow={1} sx={{ pr: 1 }} display=\"flex\" flexDirection=\"column\" zIndex={1} justifyContent=\"space-evenly\">\r\n              <Typography variant=\"body2\" ><SqBadge color={characterSheet?.elementKey} sx={{ opacity: 0.85, textShadow: \"0 0 5px gray\" }}>{characterSheet?.name}</SqBadge></Typography>\r\n              {character ? <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }}>\r\n                <Box sx={{ textShadow: \"0 0 5px gray\" }}>\r\n                  <Typography variant=\"body2\" component=\"span\" whiteSpace=\"nowrap\" >Lv. {level}</Typography>\r\n                  <Typography variant=\"body2\" component=\"span\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\r\n                </Box>\r\n                <Typography variant=\"body2\" >C{constellation}</Typography>\r\n              </Box> : <Typography component=\"span\" variant=\"body2\" ><SqBadge>NEW</SqBadge></Typography>}\r\n              <Typography variant=\"body2\" ><StarsDisplay stars={characterSheet?.rarity ?? 1} colored /></Typography>\r\n            </Box>\r\n          </Box>\r\n        </CardActionArea>\r\n      </CardLight>\r\n    </Box>\r\n  </CustomTooltip>\r\n}\r\n"],"names":["SortByButton","sortKeys","value","onChange","ascending","onChangeAsc","props","t","useTranslation","display","alignItems","gap","i18nKey","title","map","key","selected","disabled","onClick","startIcon","icon","faSortAmountDownAlt","faSortAmountUp","className","styled","ToggleButton","shouldForwardProp","prop","theme","baseColor","selectedColor","backgroundColor","palette","main","color","contrastText","dark","elementHandler","handleMultiSelect","allElements","ElementToggle","ToggleButtonGroup","exclusive","ele","Box","sx","fontSize","lineHeight","StatIcon","weaponTypeHandler","allWeaponTypeKeys","WeaponToggle","wt","src","Assets","size","Object","keys","characterSortMap","CharacterSelectionModal","show","onHide","onSelect","filter","newFirst","database","useContext","DatabaseContext","useState","displayCharacter","get","state","setState","useEffect","follow","r","s","characterSheets","usePromise","CharacterSheet","useForceUpdate","dbDirty","forceUpdate","charMeta","followAny","searchTerm","setSearchTerm","deferredSearchTerm","useDeferredValue","deferredState","deferredDbDirty","characterKeyList","useMemo","element","weaponType","sortType","sortByKeys","allCharacterKeys","chars","filterFunction","name","characterFilterConfigs","sort","sortFunction","characterSortConfigs","open","onClose","justifyContent","py","flexWrap","height","set","flexGrow","autoFocus","e","target","label","InputProps","teamData","undefined","container","spacing","columns","xs","sm","md","lg","characterKey","item","SelectionCard","CustomTooltip","classes","popper","tooltipClasses","padding","gender","useDBMeta","characterSheet","character","useCharacter","level","ascension","constellation","enterDelay","enterNextDelay","arrow","placement","width","hideStats","flexDirection","position","rarity","content","left","top","opacity","backgroundImage","bannerImg","backgroundPosition","backgroundSize","flexShrink","maxWidth","alignSelf","zIndex","component","thumbImg","mt","pr","variant","elementKey","textShadow","whiteSpace","ascensionMaxLevel","stars","colored"],"sourceRoot":""}