{"version":3,"file":"static/js/177.b7c90aa2.chunk.js","mappings":"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","sources":["Formula/reaction.ts","Data/Characters/dataUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/ForestRegalia/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/MakhairaAquamarine/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/KagotsurubeIsshin/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HaranGeppakuFutsu/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/KeyOfKhajNisut/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SapwoodBlade/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/XiphosMoonlight/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/MissiveWindspear/index.tsx","Data/Weapons/Polearm/Moonpiercer/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/StaffOfTheScarletSands/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/AquaSimulacra/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FadingTwilight/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/HuntersPath/index.tsx","Data/Weapons/Bow/KingsSquire/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/EndOfTheLine/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/AThousandFloatingDreams/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/FruitOfFulfillment/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WanderingEvenstar/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import KeyMap from \"../KeyMap\";\r\nimport { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../KeyMap/StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { infusionNode, input } from \"./index\";\r\nimport { constant, data, equal, frac, infoMut, lookup, max, min, naught, one, percent, prod, subscript, sum } from \"./utils\";\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers, KeyMap.info(\"crystallize_level_multi\"))\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(\r\n  infoMut(sum(one, /** + Crystallize bonus */ crystallizeElemas), { pivot: true, ...KeyMap.info(\"base_crystallize_multi\") }),\r\n  crystallizeMulti1),\r\n  KeyMap.info(\"crystallize\"))\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers, KeyMap.info(\"transformative_level_multi\"))\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap(Object.keys(transformativeReactions), reaction => {\r\n    const { multi, resist, canCrit } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      prod(constant(multi, KeyMap.info(`${reaction}_multi`)), transMulti1),\r\n      sum(\r\n        infoMut(sum(one, transMulti2), { pivot: true, ...KeyMap.info(\"base_transformative_multi\") }),\r\n        input.total[`${reaction}_dmg_`]\r\n      ),\r\n      lookup(input.hit.hitMode, {\r\n        hit: one,\r\n        critHit: canCrit\r\n          ? sum(one, input.total[`${reaction}_critDMG_`])\r\n          : one,\r\n        avgHit: canCrit\r\n          ? sum(one,\r\n            prod(\r\n              infoMut(max(min(\r\n                input.total[`${reaction}_critRate_`],\r\n                sum(one, one)\r\n              ), naught), { ...input.total[`${reaction}_critRate_`].info, pivot: true }),\r\n              input.total[`${reaction}_critDMG_`]\r\n            )\r\n          )\r\n          : one\r\n      }, NaN),\r\n      input.enemy[`${resist}_resMulti`]\r\n    ), KeyMap.info(`${reaction}_hit`))\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => {\r\n    const base = prod(\r\n      prod(constant(transformativeReactions.swirl.multi, KeyMap.info(\"swirl_multi\")), transMulti1),\r\n      sum(infoMut(sum(one, transMulti2), { pivot: true, ...KeyMap.info(\"base_transformative_multi\") }), input.total.swirl_dmg_)\r\n    )\r\n    const res = input.enemy[`${ele}_resMulti`]\r\n    return infoMut(\r\n      // CAUTION:\r\n      // Add amp multiplier/additive term only to swirls that have amp/additive reactions.\r\n      // It is wasteful to add them indiscriminately, but this means\r\n      // that we need to audit and add appropriate elements here\r\n      // should amp/additive reactions be added to more swirls.\r\n      [\"pyro\", \"hydro\", \"cryo\", \"electro\"].includes(ele)\r\n        ? (ele === \"electro\"\r\n          // Additive reactions apply the additive term before resistance, but after swirl bonuses\r\n          ? data(prod(sum(base, input.hit.addTerm), res), { hit: { ele: constant(ele) } })\r\n          // Amp reaction\r\n          : data(prod(base, res, input.hit.ampMulti), { hit: { ele: constant(ele) } }))\r\n        : prod(base, res),\r\n      KeyMap.info(`${ele}_swirl_hit`))\r\n  })\r\n}\r\nconst infusionReactions = {\r\n  overloaded: equal(infusionNode, \"pyro\", trans.overloaded, KeyMap.info(\"overloaded_hit\")),\r\n  electrocharged: equal(infusionNode, \"hydro\", trans.electrocharged, KeyMap.info(\"electrocharged_hit\")),\r\n  superconduct: equal(infusionNode, \"cryo\", trans.superconduct, KeyMap.info(\"superconduct_hit\")),\r\n  burning: equal(infusionNode, \"pyro\", trans.burning, KeyMap.info(\"burning_hit\")),\r\n  bloom: equal(infusionNode, \"hydro\", trans.bloom, KeyMap.info(\"bloom_hit\")),\r\n  burgeon: equal(infusionNode, \"pyro\", trans.burgeon, KeyMap.info(\"burgeon_hit\")),\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    bloom: trans.bloom,\r\n    burgeon: trans.burgeon,\r\n    hyperbloom: trans.hyperbloom,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), KeyMap.info(`${e}_crystallize`))])),\r\n    shattered: trans.shattered,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    hyperbloom: trans.hyperbloom,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n    bloom: trans.bloom,\r\n    overloaded: infusionReactions.overloaded,\r\n    superconduct: infusionReactions.superconduct,\r\n    burning: infusionReactions.burning,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    burgeon: trans.burgeon,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    bloom: infusionReactions.bloom,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  dendro: {\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    bloom: trans.bloom,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    burgeon: infusionReactions.burgeon,\r\n  }\r\n}\r\n","import { SubstatKey } from \"pipeline\";\r\nimport { infusionNode, input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, lookup, one, percent, prod, stringPrio, subscript, sum } from \"../../Formula/utils\";\r\nimport KeyMap from \"../../KeyMap\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\n\r\nconst inferredHitEle = stringPrio(\r\n  lookup(input.hit.move, {\r\n    \"skill\": input.charEle, \"burst\": input.charEle,\r\n  }, undefined),\r\n  lookup(input.weaponType, {\r\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\r\n    catalyst: input.charEle,\r\n  }, undefined),\r\n  \"physical\"\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(one, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healInc = input.total.healInc\r\n  const healNode = prod(sum(base, healInc), sum(one, input.total.heal_, input.total.incHeal_))\r\n\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { unit: \"%\" }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { unit: \"%\" }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { unit: \"%\" }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript<number>(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  layeredAssignment(data, [\"teamBuff\", \"tally\", \"maxEleMas\"], input.premod.eleMas)\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { ...KeyMap.info(stat), prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\nimport KeyMap from \"../../KeyMap\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), KeyMap.info(mainStat.type))\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), KeyMap.info(subStat.type))\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Akuoumaru\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffSlasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DebateClub\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FerrousShadow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\r\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\r\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\r\n    // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_,\r\n        }, {\r\n          text: trm(\"resistance\")\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ForestRegalia\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 75, 90, 105, 120]\r\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\r\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(eleMas_disp, KeyMap.info(\"eleMas\")),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: skill_dmg_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { unit: \"%\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LuxuriousSeaLord\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\r\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\r\nconst dmg = equal(input.weapon.key, key, equal(condPassive, 'on',\r\n  customDmgNode(prod(\r\n    subscript(\r\n      input.weapon.refineIndex, dmg_Src, { unit: \"%\" }),\r\n      input.total.atk\r\n    ),\r\n    \"elemental\",\r\n    { hit: { ele: constant(\"physical\") }\r\n})))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }],\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st('hitOp.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { name: st(\"dmg\") })\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","\r\nimport { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MakhairaAquamarine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst atk_arr = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atkSelf = equal(input.weapon.key, key, equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }),\r\n    input.premod.eleMas\r\n  )\r\n))\r\nconst atkTeamDisp = equal(input.weapon.key, key, prod(percent(0.3), atkSelf))\r\nconst atkTeam = unequal(input.activeCharKey, input.charKey, atkTeamDisp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk: atkSelf\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      atk: atkTeam\r\n    }\r\n  }\r\n}, {\r\n  atkSelf,\r\n  atkTeamDisp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    path: condPassivePath,\r\n    value: condPassive,\r\n    teamBuff: true,\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkSelf\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }],\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(atkTeamDisp, { ...KeyMap.info(\"atk\"), isTeamBuff: true }),\r\n    }, {\r\n        text: stg(\"duration\"),\r\n        value: 12,\r\n        unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OldMercsPal\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeArchaic\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { name: st(\"dmg\") }) }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rainslasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RedhornStonethresher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { unit: \"%\" }), input.premod.def))\r\nconst charged_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { unit: \"%\" }), input.premod.def))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    def_,\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n  }\r\n}, {\r\n  normal_dmgInc,\r\n  charged_dmgInc,\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: def_\r\n    }, {\r\n      node: normal_dmgInc\r\n    }, {\r\n      node: charged_dmgInc\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"opponentsDamaged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SerpentSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { unit: \"%\" })\r\nconst all_dmg_stack = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: all_dmg_stack\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: {\r\n      ...objectKeyMap(range(1, 5), i => ({\r\n        name: st(\"seconds\", { count: i * 4 }),\r\n        fields: [{\r\n          node: all_dmg_stack\r\n        }, {\r\n          text: trm(\"takeMoreDmg\"),\r\n          value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\r\n          unit: \"%\"\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardPride\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: all_dmg_,\r\n    }, {\r\n      node: infoMut(dmg, { name: st(\"dmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SnowTombedStarsilver\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SongOfBrokenPines\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { unit: \"%\" })\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, KeyMap.info(\"atk_\")))\r\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n      atkSPD_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customShieldNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBell\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\r\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\r\nconst shield = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { unit: \"%\" }), input.total.hp))))\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst all_dmg_ = equal(condWithShield, \"protected\", subscript(input.weapon.refineIndex, allDmgSrc, { unit: \"%\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n}, {\r\n  shield\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"takeDmg\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(shield, { name: stg(`dmgAbsorption`) })\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 45,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheUnforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"WasterGreatsword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Whiteblind\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteIronGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\r\nconst heal = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { unit: \"%\" }), input.total.hp))))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('afterDefeatEnemy'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WolfsGravestone\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, KeyMap.info(\"atk_\")))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"enemyLessPercentHP\", { percent: 30 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport Akuoumaru from \"./Akuoumaru\"\r\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\r\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\r\nimport DebateClub from \"./DebateClub\"\r\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\r\nimport FerrousShadow from \"./FerrousShadow\"\r\nimport ForestRegalia from \"./ForestRegalia\"\r\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\r\nimport LithicBlade from \"./LithicBlade\"\r\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\r\nimport MakhairaAquamarine from \"./MakhairaAquamarine\"\r\nimport OldMercsPal from \"./OldMercsPal\"\r\nimport PrototypeArchaic from \"./PrototypeArchaic\"\r\nimport Rainslasher from \"./Rainslasher\"\r\nimport RedhornStonethresher from \"./RedhornStonethresher\"\r\nimport RoyalGreatsword from \"./RoyalGreatsword\"\r\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\r\nimport SerpentSpine from \"./SerpentSpine\"\r\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\r\nimport SkywardPride from \"./SkywardPride\"\r\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\r\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\r\nimport TheBell from \"./TheBell\"\r\nimport TheUnforged from \"./TheUnforged\"\r\nimport WasterGreatsword from \"./WasterGreatsword\"\r\nimport Whiteblind from \"./Whiteblind\"\r\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\r\nimport WolfsGravestone from \"./WolfsGravestone\"\r\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\r\n  Akuoumaru,\r\n  BlackcliffSlasher,\r\n  BloodtaintedGreatsword,\r\n  DebateClub,\r\n  FavoniusGreatsword,\r\n  FerrousShadow,\r\n  ForestRegalia,\r\n  KatsuragikiriNagamasa,\r\n  LithicBlade,\r\n  LuxuriousSeaLord,\r\n  MakhairaAquamarine,\r\n  OldMercsPal,\r\n  PrototypeArchaic,\r\n  Rainslasher,\r\n  RedhornStonethresher,\r\n  RoyalGreatsword,\r\n  SacrificialGreatsword,\r\n  SerpentSpine,\r\n  SkyriderGreatsword,\r\n  SkywardPride,\r\n  SnowTombedStarsilver,\r\n  SongOfBrokenPines,\r\n  TheBell,\r\n  TheUnforged,\r\n  WasterGreatsword,\r\n  Whiteblind,\r\n  WhiteIronGreatsword,\r\n  WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmenomaKageuchi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquilaFavonia\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\r\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\r\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\r\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\r\nconst heal = equal(input.weapon.key, key, equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { unit: \"%\" }), input.premod.atk)))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { unit: \"%\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n  },\r\n}, {\r\n  heal, dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('takeDmg'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\r\n        }, {\r\n          node: infoMut(dmg, { name: st(\"dmg\") })\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CinnabarSpindle\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\r\nconst skill_dmgInc = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { unit: \"%\" }), input.premod.def)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { // TODO: should be total\r\n    skill_dmgInc\r\n  }\r\n}, {\r\n  skill_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmgInc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CoolSteel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagotsurubeIsshin\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_ = equal(condPassive, \"on\", percent(0.15)) // No refinement data\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customDmgNode(prod(percent(1.8), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"hitOp.normalChargedOrPlunging\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { name: st(\"dmg\") })\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DarkIronSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.electro\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FesteringDesire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { unit: \"%\" })\r\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { unit: \"%\" })\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    skill_critRate_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_\r\n    }, {\r\n      node: skill_critRate_\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FilletBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\r\nconst cd_Src = [15, 14, 13, 12, 11]\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg_, { name: st(\"dmg\") })\r\n    }, {\r\n      text: stg(\"cd\"),\r\n      value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\r\n      unit: \"s\"\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: dmg_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"sigilsConsumed\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: normal_dmg_\r\n        }, {\r\n          node: charged_dmg_\r\n        }, {\r\n          node: plunging_dmg_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HaranGeppakuFutsu\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stack_normal_dmg_ = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPath, condNode] = cond(key, \"HonedFlow\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, KeyMap.info(`${ele}_dmg_`))]\r\n))\r\nconst normal_dmg_ = lookup(condNode,\r\n  objectKeyMap(range(1, 2), i => prod(i, subscript(input.weapon.refineIndex, stack_normal_dmg_)))\r\n  , naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...passive_dmg_,\r\n    normal_dmg_,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [ // Passive\r\n      ...allElements.map((ele) => {\r\n        return { node: passive_dmg_[`${ele}_dmg_`] }\r\n      })\r\n    ],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"consumed\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HarbingerOfDawn\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\r\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"greaterPercentHP\", { percent: 90 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: critRate_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"IronSting\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\r\nconst eleDmgDealtStack = range(1, 2)\r\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\r\n  subscript(input.weapon.refineIndex, allDmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(eleDmgDealtStack.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_,\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, stg } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KeyOfKhajNisut\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst selfEmSrc = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst teamEmSrc = [0.002, 0.0025, 0.003, 0.0035, 0.004]\r\nconst stacksArr = range(1, 3)\r\nconst hp_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hp_ = equal(input.weapon.key, key, subscript(input.weapon.refineIndex, hp_arr, { unit: \"%\" }))\r\n\r\nconst [condAfterSkillStacksPath, condAfterSkillStacks] = cond(key, \"afterSkill\")\r\nconst selfEleMas = equal(input.weapon.key, key,\r\n  lookup(condAfterSkillStacks, Object.fromEntries(stacksArr.map(stack => [\r\n    stack,\r\n    prod(\r\n      stack,\r\n      subscript(input.weapon.refineIndex, selfEmSrc, { unit: \"%\", fixed: 2 }),\r\n      input.total.hp\r\n    )\r\n  ])), naught)\r\n)\r\nconst teamEleMas = equal(input.weapon.key, key,\r\n  equal(condAfterSkillStacks, \"3\",\r\n    prod(\r\n      subscript(input.weapon.refineIndex, teamEmSrc, { unit: \"%\", fixed: 2 }),\r\n      input.total.hp\r\n    )))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    eleMas: selfEleMas\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      eleMas: teamEleMas\r\n    }\r\n  }\r\n}, {\r\n  selfEleMas, teamEleMas\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }]\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    teamBuff: true,\r\n    path: condAfterSkillStacksPath,\r\n    value: condAfterSkillStacks,\r\n    name: st(\"hitOp.skill\"),\r\n    states: Object.fromEntries(stacksArr.map(stack => [\r\n      stack,\r\n      {\r\n        name: st(\"stack\", { count: stack }),\r\n        fields: [{\r\n          node: selfEleMas\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    ]))\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    canShow: equal(condAfterSkillStacks, \"3\", 1),\r\n    teamBuff: true,\r\n    fields: [{\r\n      node: teamEleMas\r\n    }, {\r\n      text: stg(\"duration\"),\r\n      value: 20,\r\n      unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LionsRoar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MistsplitterReforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst stacks = [\"1\", \"2\", \"3\"] as const\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stacksRefine = {\r\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\r\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\r\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\r\n}\r\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, KeyMap.info(`${ele}_dmg_`))]\r\n))\r\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  equal(input.charEle, ele,\r\n    lookup(condNode, objectKeyMap(stacks, stack =>\r\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, KeyMap.info(`${ele}_dmg_`))\r\n  )]\r\n))\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\r\n))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: allElements.map(ele => (\r\n      { node: passive_dmg_[`${ele}_dmg_`] }\r\n    ))\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"emblem\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(\r\n      stacks.map(stack => [stack, {\r\n        name: st(\"stack\", { count: parseInt(stack) }),\r\n        fields: allElements.map(ele => ({\r\n          node: stacks_dmg_[`${ele}_dmg_`]\r\n        }))\r\n      }])\r\n    )\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeCutter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\r\nconst atk = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, atkSrc, { unit: \"%\" }), input.premod.hp))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk\r\n  }\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }, { node: atk }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeRancour\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"onHit\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SapwoodBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 75, 90, 105, 120]\r\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\r\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas\r\n    },\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(eleMas_disp, KeyMap.info(\"eleMas\")),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SilverSword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\r\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { unit: \"%\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    moveSPD_,\r\n    atkSPD_,\r\n  }\r\n}, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: critRate_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st('afterUse.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: moveSPD_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          node: infoMut(dmg, { name: st(\"dmg\") })\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SummitShaper\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SwordOfDescension\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = equal(\"Traveler\", input.charKey, 66)\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk\r\n  }\r\n}, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk\r\n    }, {\r\n      node: infoMut(dmg_, { name: st(\"dmg\") })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheAlleyFlash\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBlackSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { unit: \"%\" }), input.total.atk)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n}, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }, {\r\n      node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheFlute\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { name: st(\"dmg\") }) }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TravelersHandySword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { unit: \"%\" }), input.total.hp)))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"XiphosMoonlight\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst enerRech_arr = [0.00036, 0.00045, 0.00054, 0.00063, 0.00072]\r\nconst selfEnerRech_ = equal(input.weapon.key, key, equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, enerRech_arr, { unit: \"%\", fixed: 3 }),\r\n    input.premod.eleMas,\r\n  )\r\n))\r\nconst teamEnerRech_disp = equal(input.weapon.key, key, prod(percent(0.3), selfEnerRech_))\r\nconst teamEnerRech_ = unequal(input.activeCharKey, input.charKey, teamEnerRech_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    enerRech_: selfEnerRech_\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      enerRech_: teamEnerRech_\r\n    }\r\n  }\r\n}, {\r\n  selfEnerRech_,\r\n  teamEnerRech_disp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    path: condPassivePath,\r\n    value: condPassive,\r\n    name: trm(\"condName\"),\r\n    teamBuff: true,\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: selfEnerRech_,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(teamEnerRech_disp, { ...KeyMap.info(\"enerRech_\"), isTeamBuff: true }),\r\n    }, {\r\n      text: stg(\"duration\"),\r\n      value: 12,\r\n      unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponSwordKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\r\nimport AquilaFavonia from \"./AquilaFavonia\"\r\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\r\nimport CinnabarSpindle from \"./CinnabarSpindle\"\r\nimport CoolSteel from \"./CoolSteel\"\r\nimport KagotsurubeIsshin from \"./KagotsurubeIsshin\"\r\nimport DarkIronSword from \"./DarkIronSword\"\r\nimport DullBlade from \"./DullBlade\"\r\nimport FavoniusSword from \"./FavoniusSword\"\r\nimport FesteringDesire from \"./FesteringDesire\"\r\nimport FilletBlade from \"./FilletBlade\"\r\nimport FreedomSworn from \"./FreedomSworn\"\r\nimport HaranGeppakuFutsu from \"./HaranGeppakuFutsu\"\r\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\r\nimport IronSting from \"./IronSting\"\r\nimport KeyOfKhajNisut from \"./KeyOfKhajNisut\"\r\nimport LionsRoar from \"./LionsRoar\"\r\nimport MistsplitterReforged from \"./MistsplitterReforged\"\r\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\r\nimport PrototypeRancour from \"./PrototypeRancour\"\r\nimport RoyalLongsword from \"./RoyalLongsword\"\r\nimport SacrificialSword from \"./SacrificialSword\"\r\nimport SapwoodBlade from \"./SapwoodBlade\"\r\nimport SilverSword from \"./SilverSword\"\r\nimport SkyriderSword from \"./SkyriderSword\"\r\nimport SkywardBlade from \"./SkywardBlade\"\r\nimport SummitShaper from \"./SummitShaper\"\r\nimport SwordOfDescension from \"./SwordOfDescension\"\r\nimport TheAlleyFlash from \"./TheAlleyFlash\"\r\nimport TheBlackSword from \"./TheBlackSword\"\r\nimport TheFlute from \"./TheFlute\"\r\nimport TravelersHandySword from \"./TravelersHandySword\"\r\nimport XiphosMoonlight from \"./XiphosMoonlight\"\r\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\r\n  AmenomaKageuchi,\r\n  AquilaFavonia,\r\n  BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  CoolSteel,\r\n  KagotsurubeIsshin,\r\n  DarkIronSword,\r\n  DullBlade,\r\n  FavoniusSword,\r\n  FesteringDesire,\r\n  FilletBlade,\r\n  FreedomSworn,\r\n  HaranGeppakuFutsu,\r\n  HarbingerOfDawn,\r\n  IronSting,\r\n  KeyOfKhajNisut,\r\n  LionsRoar,\r\n  MistsplitterReforged,\r\n  PrimordialJadeCutter,\r\n  PrototypeRancour,\r\n  RoyalLongsword,\r\n  SacrificialSword,\r\n  SapwoodBlade,\r\n  SilverSword,\r\n  SkyriderSword,\r\n  SkywardBlade,\r\n  SummitShaper,\r\n  SwordOfDescension,\r\n  TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n  XiphosMoonlight,\r\n} as const\r\nexport default sword\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { compareEq, constant, lookup, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  compareEq(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { name: WeaponSheet.trm(key)(\"inactiveKey\") })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i, { name: st(\"stacks\") })), 0),\r\n  subscript(input.weapon.refineIndex, atk_, { unit: \"%\" }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n  }, {\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: tr(\"passiveName\"),\r\n    states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: atkInc }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = equal(input.weapon.key, key,\r\n  equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" })), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { hit })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(hit, { name: WeaponSheet.trm(key)(\"hitName\") })\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Deathmatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { unit: \"%\" }) }, naught)\r\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { unit: \"%\" }))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      \"oneOrNone\": {\r\n        name: trm(\"opponents.oneOrNone\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n      \"moreThanOne\": {\r\n        name: trm(\"opponents.moreThanOne\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonsBane\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonspineSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = equal(input.weapon.key, key,\r\n  min(prod(subscript(input.weapon.refineIndex, atk), sum(input.premod.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax)))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n}, {\r\n  atk_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusLance\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Halberd\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"IronPoint\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KitainCrossSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { unit: \"%\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MissiveWindspear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst emArr = [48, 60, 72, 84, 96]\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }))\r\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, emArr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    eleMas,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterReaction\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          node: eleMas,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Moonpiercer\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atk_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }))\r\nconst atk_ = equal(input.activeCharKey, target.charKey, atk_disp)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_disp, KeyMap.info(\"atk_\")),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\r\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), i)), naught)\r\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { unit: \"%\" }))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.none\"),\r\n    states: Object.fromEntries(range(1, 7).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: all_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeStarglitter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { unit: \"%\" }), i)), naught)\r\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { unit: \"%\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: Object.fromEntries(range(1, 2).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\r\nconst atkSPD_ = percent(0.12)\r\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    atkSPD_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critRate_,\r\n    }, {\r\n      node: atkSPD_,\r\n    }, {\r\n      node: infoMut(dmg, { name: st(\"dmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfHoma\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\r\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { unit: \"%\" })\r\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\r\nconst atk1 = prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), input.premod.hp)\r\nconst atk2 = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { unit: \"%\" }), input.premod.hp), KeyMap.info(\"atk\")))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk: sum(atk1, atk2)\r\n  }\r\n}, {\r\n  atk2_: atk2\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: hp_\r\n    }, {\r\n      node: infoMut(atk1, KeyMap.info(\"atk\"))\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: st(\"lessPercentHP\", { percent: 50 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk2, KeyMap.info(\"atk\")),\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfTheScarletSands\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\n\r\nconst baseAtkArr = [0.52, 0.65, 0.78, 0.91, 1.04]\r\nconst stacksAttArr = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst stacksArr = range(1, 3)\r\nconst baseAtk = equal(input.weapon.key, key, prod(\r\n  subscript(input.weapon.refineIndex, baseAtkArr, { unit: \"%\" }),\r\n  input.premod.eleMas\r\n), KeyMap.info(\"atk\"))\r\nconst stacksAtk = lookup(condStacks, Object.fromEntries(stacksArr.map(stack => [\r\n  stack,\r\n  prod(\r\n    stack,\r\n    subscript(input.weapon.refineIndex, stacksAttArr, { unit: \"%\" }),\r\n    input.premod.eleMas\r\n  )\r\n])), naught, KeyMap.info(\"atk\"))\r\nconst atk = equal(input.weapon.key, key, sum(baseAtk, stacksAtk))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk\r\n  },\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: baseAtk\r\n    }],\r\n  }, {\r\n    value: condStacks,\r\n    path: condStacksPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: Object.fromEntries(stacksArr.map(i =>\r\n      [i, {\r\n        name: st(\"hits\", { count: i }),\r\n        fields: [{\r\n          node: stacksAtk\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheCatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\r\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_,\r\n    burst_critRate_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"VortexVanquisher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WavebreakersFin\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponPoleArmKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\nimport Deathmatch from './Deathmatch'\r\nimport DragonsBane from './DragonsBane'\r\nimport DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\nimport FavoniusLance from './FavoniusLance'\r\nimport Halberd from './Halberd'\r\nimport IronPoint from './IronPoint'\r\nimport KitainCrossSpear from './KitainCrossSpear'\r\nimport LithicSpear from './LithicSpear'\r\nimport MissiveWindspear from './MissiveWindspear'\r\nimport Moonpiercer from './Moonpiercer'\r\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\nimport PrototypeStarglitter from './PrototypeStarglitter'\r\nimport RoyalSpear from './RoyalSpear'\r\nimport SkywardSpine from './SkywardSpine'\r\nimport StaffOfHoma from './StaffOfHoma'\r\nimport StaffOfTheScarletSands from './StaffOfTheScarletSands'\r\nimport TheCatch from './TheCatch'\r\nimport VortexVanquisher from './VortexVanquisher'\r\nimport WavebreakersFin from './WavebreakersFin'\r\nimport WhiteTassel from './WhiteTassel'\r\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  Deathmatch,\r\n  DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  FavoniusLance,\r\n  Halberd,\r\n  IronPoint,\r\n  KitainCrossSpear,\r\n  LithicSpear,\r\n  MissiveWindspear,\r\n  Moonpiercer,\r\n  PrimordialJadeWingedSpear,\r\n  PrototypeStarglitter,\r\n  RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  StaffOfTheScarletSands,\r\n  TheCatch,\r\n  VortexVanquisher,\r\n  WavebreakersFin,\r\n  WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AlleyHunter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst dmgInc = [.02, .025, .03, .035, .04]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\r\nconst all_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 10).map(c => [c, {\r\n      name: st(\"seconds\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmosBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, KeyMap.info(\"normal_dmg_\"))\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, KeyMap.info(\"charged_dmg_\"))\r\n\r\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\r\nconst normal_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, KeyMap.info(\"normal_dmg_\"))\r\nconst charged_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, KeyMap.info(\"charged_dmg_\"))\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\r\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 5), i => ({\r\n      name: st(\"seconds\", { count: i / 10 }),\r\n      fields: [{\r\n        node: normal_dmg_arrow_\r\n      }, {\r\n        node: charged_dmg_arrow_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquaSimulacra\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst hp_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst dmg_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst base_hp_ = subscript(input.weapon.refineIndex, hp_arr)\r\nconst cond_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_: base_hp_,\r\n    all_dmg_: cond_dmg_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: base_hp_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: cond_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst atkInc = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(range(1, 3).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 30,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CompoundBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.04, .05, .06, .07, .08]\r\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i))\r\n}, naught)\r\nconst atkSPD_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: atkSPD_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ElegyForTheEnd\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst eleMasInc = [60, 75, 90, 105, 120]\r\nconst eleMasInc2 = [100, 125, 150, 175, 200]\r\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\r\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, KeyMap.info(\"eleMas\"))\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, KeyMap.info(\"eleMas\")))\r\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      eleMas: eleMas2\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: eleMas,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas2\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FadingTwilight\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\nconst state_dmg_dict = {\r\n  evengleam: subscript(input.weapon.refineIndex, [0.06, 0.075, 0.09, 0.105, 0.12]),\r\n  afterglow: subscript(input.weapon.refineIndex, [0.1, 0.125, 0.15, 0.175, 0.20]),\r\n  dawnblaze: subscript(input.weapon.refineIndex, [0.14, 0.175, 0.21, 0.245, 0.28])\r\n}\r\nconst state_dmg_ = lookup(condState, state_dmg_dict, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: state_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condState,\r\n    path: condStatePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(Object.keys(state_dmg_dict).map(state => [\r\n      state,\r\n      {\r\n        name: trm(`states.${state}`),\r\n        fields: [{ node: state_dmg_ }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Hamayumi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\r\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, KeyMap.info(\"normal_dmg_\"))\r\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, KeyMap.info(\"charged_dmg_\"))\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\r\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, KeyMap.info(\"normal_dmg_\")))\r\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, KeyMap.info(\"charged_dmg_\")))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg, normal_passive),\r\n    charged_dmg_: sum(charged_dmg, charged_passive)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg\r\n    }, {\r\n      node: charged_dmg\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_passive\r\n        }, {\r\n          node: charged_passive\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"HuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HuntersPath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst allEle_dmg_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, allEle_dmg_arr, { unit: \"%\" })\r\n]))\r\n\r\nconst charged_dmgIncArr = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst charged_dmgInc = equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, charged_dmgIncArr, { unit: \"%\" }),\r\n    input.total.eleMas\r\n  ))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_,\r\n    charged_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(allEle_dmg_).map(node => ({\r\n      node\r\n    }))\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.charged\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmgInc,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }, {\r\n          text: st(\"charges\"),\r\n          value: 12\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KingsSquire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 80, 100, 120, 140]\r\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, eleMasArr))\r\nconst dmg_arr = [1, 1.2, 1.4, 1.6, 1.8]\r\nconst dmg = equal(input.weapon.key, key, customDmgNode(\r\n  prod(\r\n    subscript(input.weapon.refineIndex, dmg_arr, { unit: \"%\" }),\r\n    input.total.atk\r\n  ),\r\n  \"elemental\",\r\n))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") }),\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skillOrBurst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas,\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: stg(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\",\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Messenger\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MitternachtsWaltz\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\r\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\r\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\r\n\r\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\r\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkill,\r\n    path: condSkillPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MouunsMoon\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PolarStar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\r\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\r\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst atk_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\r\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    atk_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, percent, prod } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Predator\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normalInc = percent(.1)\r\nconst chargedInc = percent(.1)\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\r\n}, naught)\r\nconst charged_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\r\n}, naught)\r\nconst atk = equal(input.activeCharKey, \"Aloy\", 66)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    atk\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.cryo\"),\r\n    states: Object.fromEntries(range(1, 2).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }, {\r\n        node: charged_dmg_\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 6,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeCrescent\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.36, .45, .54, .63, .72]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RavenBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RecurveBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healing_s = [.08, .10, .12, .14, .16]\r\nconst healing = equal(input.weapon.key, key,\r\n  customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s))))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { healing })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(healing, { name: stg(\"healing\"), variant: \"heal\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRate_s = [.08, .10, .12, .14, .16]\r\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\r\nconst critRate_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rust\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\r\n\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\r\nconst charged_dmg_ = constant(-0.1)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SeasonedHuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SharpshootersOath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\r\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    weakspotDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: weakspotDMG_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardHarp\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critd_s = [.20, .25, .30, .35, .40]\r\nconst dmgPerc = percent(1.25)\r\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critDMG_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critDMG_\r\n    }, {\r\n      node: infoMut(dmg, { name: st(\"dmg\") })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Slingshot\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmg_arr = [.36, .42, .48, .54, .60]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\r\nconst normal_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), KeyMap.info(\"normal_dmg_\"))\r\nconst charged_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), KeyMap.info(\"charged_dmg_\"))\r\nconst normal_dmg_dec = equal(condPassive, undefined, percent(-0.1, KeyMap.info(\"normal_dmg_\")))\r\nconst charged_dmg_dec = equal(condPassive, undefined, percent(-0.1, KeyMap.info(\"charged_dmg_\")))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_inc, normal_dmg_dec),\r\n    charged_dmg_: sum(charged_dmg_inc, charged_dmg_dec),\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_dec\r\n    }, {\r\n      node: charged_dmg_dec\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_inc\r\n        }, {\r\n          node: charged_dmg_inc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheStringless\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheViridescentHunt\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThunderingPulse\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    normal_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 3), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EndOfTheLine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgArr = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst dmg = equal(input.weapon.key, key, customDmgNode(\r\n  prod(\r\n    subscript(input.weapon.refineIndex, dmgArr, { unit: \"%\" }),\r\n    input.total.atk\r\n  ),\r\n  \"elemental\"\r\n))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { name: st(\"dmg\") })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WindblumeOde\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.16, .20, .24, .28, .32]\r\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.skill\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponBowKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\n\r\nimport AlleyHunter from './AlleyHunter'\r\nimport AmosBow from \"./AmosBow\"\r\nimport AquaSimulacra from \"./AquaSimulacra\"\r\nimport BlackcliffWarbow from './BlackcliffWarbow'\r\nimport CompoundBow from './CompoundBow'\r\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\r\nimport FadingTwilight from \"./FadingTwilight\"\r\nimport FavoniusWarbow from './FavoniusWarbow'\r\nimport Hamayumi from './Hamayumi'\r\nimport HuntersBow from \"./HuntersBow\"\r\nimport HuntersPath from './HuntersPath'\r\nimport KingsSquire from './KingsSquire'\r\nimport Messenger from './Messenger'\r\nimport MitternachtsWaltz from './MitternachtsWaltz'\r\nimport MouunsMoon from './MouunsMoon'\r\nimport PolarStar from './PolarStar'\r\nimport Predator from './Predator'\r\nimport PrototypeCrescent from './PrototypeCrescent'\r\nimport RavenBow from './RavenBow'\r\nimport RecurveBow from './RecurveBow'\r\nimport RoyalBow from './RoyalBow'\r\nimport Rust from './Rust'\r\nimport SacrificialBow from \"./SacrificialBow\"\r\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\r\nimport SharpshootersOath from './SharpshootersOath'\r\nimport SkywardHarp from './SkywardHarp'\r\nimport Slingshot from './Slingshot'\r\nimport TheStringless from './TheStringless'\r\nimport TheViridescentHunt from './TheViridescentHunt'\r\nimport ThunderingPulse from './ThunderingPulse'\r\nimport EndOfTheLine from './EndOfTheLine'\r\nimport WindblumeOde from './WindblumeOde'\r\n\r\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\r\n  AlleyHunter,\r\n  AmosBow,\r\n  AquaSimulacra,\r\n  BlackcliffWarbow,\r\n  CompoundBow,\r\n  ElegyForTheEnd,\r\n  FadingTwilight,\r\n  FavoniusWarbow,\r\n  Hamayumi,\r\n  HuntersBow,\r\n  HuntersPath,\r\n  KingsSquire,\r\n  Messenger,\r\n  MitternachtsWaltz,\r\n  MouunsMoon,\r\n  PolarStar,\r\n  Predator,\r\n  PrototypeCrescent,\r\n  RavenBow,\r\n  RecurveBow,\r\n  RoyalBow,\r\n  Rust,\r\n  SacrificialBow,\r\n  SeasonedHuntersBow,\r\n  SharpshootersOath,\r\n  SkywardHarp,\r\n  Slingshot,\r\n  TheStringless,\r\n  TheViridescentHunt,\r\n  ThunderingPulse,\r\n  EndOfTheLine,\r\n  WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"ApprenticesNotes\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input, tally, target } from '../../../../Formula'\r\nimport { equal, infoMut, lookup, naught, prod, subscript, sum, unequal } from \"../../../../Formula/utils\"\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AThousandFloatingDreams\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst self_eleMasArr = [32, 40, 48, 56, 64]\r\nconst self_eleDmg_arr = [0.10, 0.14, 0.18, 0.22, 0.26]\r\nconst team_eleMasArr = [40, 42, 44, 46, 48]\r\n\r\nconst numSameElement = lookup(input.charEle, Object.fromEntries(allElements.map(ele => [\r\n  ele,\r\n  infoMut(sum(tally[ele], -1), { asConst: true }) // Subtract wielder from count\r\n])), naught)\r\nconst partySize = sum(...allElements.map(ele => tally[ele]))\r\nconst self_eleMas = prod(\r\n  numSameElement,\r\n  subscript(input.weapon.refineIndex, self_eleMasArr)\r\n)\r\nconst self_eleDmg_ = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_dmg_`,\r\n  equal(input.charEle, ele, prod(\r\n    infoMut(sum(partySize, -1, prod(numSameElement, -1)), { asConst: true }),\r\n    subscript(input.weapon.refineIndex, self_eleDmg_arr, { unit: \"%\" })\r\n  ))\r\n]))\r\n\r\nconst team_eleMasDisp = equal(input.weapon.key, key,\r\n  subscript(input.weapon.refineIndex, team_eleMasArr),\r\n  { ...KeyMap.info(\"eleMas\"), isTeamBuff: true }\r\n)\r\nconst team_eleMas = unequal(input.charKey, target.charKey, team_eleMasDisp)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas: self_eleMas,\r\n    ...self_eleDmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: team_eleMas\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: self_eleMas\r\n    },\r\n    ...Object.values(self_eleDmg_).map(node => ({ node }))\r\n    ]\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    fields: [{\r\n      node: team_eleMasDisp\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffAgate\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_,\r\n      }, {\r\n        text: stg(\"duration\"),\r\n        value: 30,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DodocoTales\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\r\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\r\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\r\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_,\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    name: st(\"hitOp.normal\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condCharged,\r\n    path: condChargedPath,\r\n    name: st(\"hitOp.charged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EmeraldOrb\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.hydro\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, hp_conv, { unit: \"%\" }), input.premod.hp))\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    heal_\r\n  }\r\n}, {\r\n  normal_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EyeOfPerception\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_: dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { name: st(\"dmg\") }) }],\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusCodex\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Frostbearer\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmgAoe,\r\n  dmgOnCryoOp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FruitOfFulfillment\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleMasArr = [24, 27, 30, 33, 36]\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\nconst stacksArr = range(1, 5)\r\nconst eleMas = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\r\n  stacks,\r\n  prod(\r\n    subscript(input.weapon.refineIndex, eleMasArr),\r\n    stacks\r\n  )\r\n])), naught)\r\n\r\nconst atk_ = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\r\n  stacks,\r\n  prod(\r\n    percent(-0.05),\r\n    stacks\r\n  )\r\n])), naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n    atk_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    path: condStacksPath,\r\n    value: condStacks,\r\n    name: trm(\"stackName\"),\r\n    states: Object.fromEntries(stacksArr.map(stack => [\r\n      stack,\r\n      {\r\n        name: st(\"stack\", { count: stack }),\r\n        fields: [{\r\n          node: eleMas,\r\n        }, {\r\n          node: atk_\r\n        }]\r\n      }\r\n    ]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HakushinRing\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\r\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\r\nconst anemo_dmg_disp = equal(\"anemo\", condPassive, eleDmg)\r\nconst cryo_dmg_disp = equal(\"cryo\", condPassive, eleDmg)\r\nconst geo_dmg_disp = equal(\"geo\", condPassive, eleDmg)\r\nconst hydro_dmg_disp = equal(\"hydro\", condPassive, eleDmg)\r\nconst pyro_dmg_disp = equal(\"pyro\", condPassive, eleDmg)\r\nconst dendro_dmg_disp = equal(\"dendro\", condPassive, eleDmg)\r\nconst anemo_dmg_ = equal(\"anemo\", target.charEle, anemo_dmg_disp)\r\nconst cryo_dmg_ = equal(\"cryo\", target.charEle, cryo_dmg_disp)\r\nconst geo_dmg_ = equal(\"geo\", target.charEle, geo_dmg_disp)\r\nconst hydro_dmg_ = equal(\"hydro\", target.charEle, hydro_dmg_disp)\r\nconst pyro_dmg_ = equal(\"pyro\", target.charEle, pyro_dmg_disp)\r\nconst dendro_dmg_ = equal(\"dendro\", target.charEle, dendro_dmg_disp)\r\n\r\nconst electro_dmg_disp = unequal(condPassive, undefined, eleDmg)\r\nconst electro_dmg_ = equal(\"electro\", target.charEle, electro_dmg_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_dmg_,\r\n      cryo_dmg_,\r\n      electro_dmg_,\r\n      geo_dmg_,\r\n      hydro_dmg_,\r\n      pyro_dmg_,\r\n      dendro_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.electro\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      anemo: {\r\n        name: <ColorText color=\"swirl\">{stg(\"reaction.swirl\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(anemo_dmg_disp, { ...KeyMap.info(\"anemo_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      cryo: {\r\n        name: <ColorText color=\"superconduct\">{stg(\"reaction.superconduct\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(cryo_dmg_disp, { ...KeyMap.info(\"cryo_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      geo: {\r\n        name: <ColorText color=\"crystallize\">{stg(\"reaction.crystallize\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(geo_dmg_disp, { ...KeyMap.info(\"geo_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      pyro: {\r\n        name: <ColorText color=\"overloaded\">{stg(\"reaction.overloaded\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(pyro_dmg_disp, { ...KeyMap.info(\"pyro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      hydro: {\r\n        name: <ColorText color=\"electrocharged\">{stg(\"reaction.electrocharged\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(hydro_dmg_disp, { ...KeyMap.info(\"hydro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      dendro: {\r\n        name: <ColorText color=\"aggravate\">{stg(\"reaction.aggravate\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dendro_dmg_disp, { ...KeyMap.info(\"dendro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\nconst totems = range(1, 3)\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), KeyMap.info(\"skill_dmg_\")))\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states:\r\n      Object.fromEntries(totems.map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: skill_dmg_s[i - 1]\r\n        },\r\n        ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst ele_dmg_s = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\r\n\r\nconst moveSPD_ = percent(0.1)\r\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s, { unit: \"%\" })\r\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\r\n}, naught)]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    moveSPD_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: moveSPD_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"seconds\", { count: i * 4 }),\r\n      fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MagicGuide\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MappaMare\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\r\n\r\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\r\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\r\n}, naught)])\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: eleDmgs\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [...Object.values(eleDmgs).map(node => ({ node })), {\r\n        text: stg(\"duration\"),\r\n        value: 10,\r\n        unit: \"s\"\r\n      }]\r\n    }))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MemoryOfDust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OathswornEye\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\n\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    enerRech_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OtherworldlyStory\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { unit: \"%\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PocketGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeAmber\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\r\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\r\n\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { unit: \"%\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.burst\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{ node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" }) }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialFragments\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardAtlas\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\n\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n  }\r\n}, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\r\n      {\r\n        node: infoMut(dmg, { name: st(\"dmg\") }),\r\n      }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SolarPearl\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\r\nconst burst_dmg_ = { ...skill_dmg_ }\r\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    normal_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      normal: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          node: burst_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skillOrBurst\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"TheWidsith\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\r\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\r\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\r\nconst eleBonus_ = Object.fromEntries(allElements.map(\r\n  ele => [ele, equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))]\r\n))\r\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n    eleMas\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: tr(\"passiveName\"),\r\n    states: {\r\n      aria: {\r\n        name: trm(\"aria\"),\r\n        fields: [\r\n          ...allElements.map(ele => ({ node: eleBonus_[ele] }))\r\n        ,{\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      interlude: {\r\n        name: trm(\"interlude\"),\r\n        fields: [{\r\n          node: eleMas\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      recitative: {\r\n        name: trm(\"recitative\"),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\r\nconst atk_Disp = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc))\r\nconst atk_ = unequal(input.activeCharKey, input.charKey, // Don't apply to wielding char\r\n  equal(input.activeCharKey, target.charKey, atk_Disp) // Only apply to active char\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm('condName'),\r\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_Disp, KeyMap.info(\"atk_\"))\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TwinNephrite\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterDefeatEnemy\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport KeyMap from '../../../../KeyMap'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WanderingEvenstar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atkArr = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst selfAtk = equal(input.weapon.key, key, equal(\"on\", condPassive, prod(\r\n  subscript(input.weapon.refineIndex, atkArr, { unit: \"%\" }),\r\n  input.premod.eleMas\r\n)))\r\nconst teamAtkDisp = equal(input.weapon.key, key, prod(percent(0.3), selfAtk))\r\nconst teamAtk = unequal(input.activeCharKey, input.charKey, teamAtkDisp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk: selfAtk\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      atk: teamAtk\r\n    }\r\n  }\r\n}, {\r\n  selfAtk,\r\n  teamAtkDisp\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: selfAtk\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(teamAtkDisp, { ...KeyMap.info(\"atk\"), isTeamBuff: true }),\r\n    }, {\r\n      text: stg(\"duration\"),\r\n      value: 12,\r\n      unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, stg, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WineAndSong\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterSprint\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: stg(\"duration\"),\r\n          value: 5,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponCatalystKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport ApprenticesNotes from './ApprenticesNotes'\r\nimport AThousandFloatingDreams from './AThousandFloatingDreams'\r\nimport BlackcliffAgate from './BlackcliffAgate'\r\nimport DodocoTales from './DodocoTales'\r\nimport EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\nimport EyeOfPerception from './EyeOfPerception'\r\nimport FavoniusCodex from './FavoniusCodex'\r\nimport Frostbearer from './Frostbearer'\r\nimport FruitOfFulfillment from './FruitOfFulfillment'\r\nimport HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\nimport MagicGuide from './MagicGuide'\r\nimport MappaMare from './MappaMare'\r\nimport MemoryOfDust from './MemoryOfDust'\r\nimport OathswornEye from './OathswornEye'\r\nimport OtherworldlyStory from './OtherworldlyStory'\r\nimport PocketGrimoire from './PocketGrimoire'\r\nimport PrototypeAmber from './PrototypeAmber'\r\nimport RoyalGrimoire from './RoyalGrimoire'\r\nimport SacrificialFragments from './SacrificialFragments'\r\nimport SkywardAtlas from './SkywardAtlas'\r\nimport SolarPearl from './SolarPearl'\r\nimport TheWidsith from './TheWidsith'\r\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\nimport TwinNephrite from './TwinNephrite'\r\nimport WanderingEvenstar from './WanderingEvenstar'\r\nimport WineAndSong from './WineAndSong'\r\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\r\n  ApprenticesNotes,\r\n  AThousandFloatingDreams,\r\n  BlackcliffAgate,\r\n  DodocoTales,\r\n  EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  FavoniusCodex,\r\n  Frostbearer,\r\n  FruitOfFulfillment,\r\n  HakushinRing,\r\n  KagurasVerity,\r\n  LostPrayerToTheSacredWinds,\r\n  MagicGuide,\r\n  MappaMare,\r\n  MemoryOfDust,\r\n  OathswornEye,\r\n  OtherworldlyStory,\r\n  PocketGrimoire,\r\n  PrototypeAmber,\r\n  RoyalGrimoire,\r\n  SacrificialFragments,\r\n  SkywardAtlas,\r\n  SolarPearl,\r\n  TheWidsith,\r\n  ThrillingTalesOfDragonSlayers,\r\n  TwinNephrite,\r\n  WanderingEvenstar,\r\n  WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["crystallizeMulti1","subscript","input","crystallizeLevelMultipliers","KeyMap","crystallizeElemas","prod","frac","crystallizeHit","infoMut","sum","one","pivot","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","objectKeyMap","Object","keys","transformativeReactions","reaction","multi","resist","canCrit","constant","lookup","hit","critHit","avgHit","max","min","naught","info","NaN","swirl","ele","base","res","includes","data","infusionReactions","overloaded","equal","infusionNode","electrocharged","superconduct","burning","bloom","burgeon","reactions","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","hyperbloom","geo","crystallize","fromEntries","absorbableEle","e","percent","dendro","charCurves","objectMap","_charCurves","value","values","commonBasic","key","inferredHitEle","stringPrio","undefined","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","additional","mergeData","customShieldNode","shieldNode","customHealNode","healInc","healNode","dmgNode","lvlMultiplier","talentType","unit","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","variant","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","length","result","prefix","asConst","endsWith","slice","Error","special","allMainStatKeys","inferInfoMut","weaponCurves","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","total","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","trm","cond","condPassivePath","condPassive","energyRange","range","i","ratio","burst_dmg_","sheet","icon","iconAwaken","document","path","header","headerTemplate","st","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","c","count","text","stg","all_dmg_","on","dmg","charged_dmg_","eleMas_disp","eleMas","target","skill_dmg_","condStackPath","condStack","atkInc","critInc","critRate_","atkSelf","atkTeamDisp","atkTeam","unequal","atk","canShow","isTeamBuff","def_","normal_dmgInc","charged_dmgInc","crit_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","shield","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","ForestRegalia","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","MakhairaAquamarine","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","skill_dmgInc","skill_critRate_","cd_Src","dmg_","normal_dmg_","plunging_dmg_","passiveRefine","stack_normal_dmg_","passive_dmg_","allElements","eleDmgDealtStack","selfEmSrc","stacksArr","hp_","condAfterSkillStacksPath","condAfterSkillStacks","selfEleMas","stack","fixed","teamEleMas","stacks","stacksRefine","stacks_dmg_","allEle_dmg_","parseInt","moveSPD_","autoSrc","selfEnerRech_","teamEnerRech_disp","teamEnerRech_","enerRech_","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","KagotsurubeIsshin","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HaranGeppakuFutsu","HarbingerOfDawn","IronSting","KeyOfKhajNisut","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SapwoodBlade","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","XiphosMoonlight","tr","dmg_Nodes","compareEq","atkDefInc","atk_disp","dmgInc","atk1","atk2","atk2_","condStacksPath","condStacks","stacksAttArr","baseAtk","stacksAtk","burst_critRate_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","MissiveWindspear","Moonpiercer","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","StaffOfTheScarletSands","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","base_hp_","cond_dmg_","atk_s","atkSPD_s","eleMas2","condStatePath","condState","state_dmg_dict","evengleam","afterglow","dawnblaze","state_dmg_","state","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","allEle_dmg_arr","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","dmg_arr","normal_dmg_inc","charged_dmg_inc","normal_dmg_dec","charged_dmg_dec","refinementVals","bow","AlleyHunter","AmosBow","AquaSimulacra","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FadingTwilight","FavoniusWarbow","Hamayumi","HuntersBow","HuntersPath","KingsSquire","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","EndOfTheLine","WindblumeOde","self_eleDmg_arr","numSameElement","partySize","self_eleMas","self_eleDmg_","team_eleMasDisp","team_eleMas","condChargedPath","condCharged","heal_","eleMasArr","eleDmg","anemo_dmg_disp","cryo_dmg_disp","geo_dmg_disp","hydro_dmg_disp","pyro_dmg_disp","dendro_dmg_disp","anemo_dmg_","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","dendro_dmg_","electro_dmg_disp","electro_dmg_","color","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","atk_Disp","refineInc","selfAtk","teamAtkDisp","ApprenticesNotes","AThousandFloatingDreams","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","FruitOfFulfillment","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WanderingEvenstar","WineAndSong"],"sourceRoot":""}